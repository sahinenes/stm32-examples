
010_uart_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003448  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003614  08003614  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003614  08003614  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003614  08003614  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800361c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000014  08003630  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003630  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009547  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001990  00000000  00000000  0002958b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f86a  00000000  00000000  0002bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009561  00000000  00000000  0004b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf57c  00000000  00000000  00054b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011408f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca8  00000000  00000000  001140e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080035c4 	.word	0x080035c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080035c4 	.word	0x080035c4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa18 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81a 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8a6 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f874 	bl	80002d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,(uint8_t*)recive,sizeof(recive));
 80001e8:	2232      	movs	r2, #50	; 0x32
 80001ea:	4907      	ldr	r1, [pc, #28]	; (8000208 <main+0x34>)
 80001ec:	4807      	ldr	r0, [pc, #28]	; (800020c <main+0x38>)
 80001ee:	f002 f9ef 	bl	80025d0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_IT(&huart2,(uint8_t*)transmit, sizeof(transmit));
 80001f2:	2207      	movs	r2, #7
 80001f4:	4906      	ldr	r1, [pc, #24]	; (8000210 <main+0x3c>)
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x38>)
 80001f8:	f002 f98e 	bl	8002518 <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f000 fa6a 	bl	80006d8 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t*)transmit, sizeof(transmit));
 8000204:	e7f5      	b.n	80001f2 <main+0x1e>
 8000206:	bf00      	nop
 8000208:	20000030 	.word	0x20000030
 800020c:	20000064 	.word	0x20000064
 8000210:	20000000 	.word	0x20000000

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0a6      	sub	sp, #152	; 0x98
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 f9c6 	bl	80035b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2258      	movs	r2, #88	; 0x58
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 f9b8 	bl	80035b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
 800024e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800025c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fd98 	bl	8000da8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f8e2 	bl	8000446 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fc98 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002aa:	f000 f8cc 	bl	8000446 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fec1 	bl	8002040 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c4:	f000 f8bf 	bl	8000446 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3798      	adds	r7, #152	; 0x98
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <MX_USART2_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000314:	f002 f8b2 	bl	800247c <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f892 	bl	8000446 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000064 	.word	0x20000064
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800034c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a24      	ldr	r2, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2160      	movs	r1, #96	; 0x60
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fcc9 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_GPIO_Init+0xc8>)
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_GPIO_Init+0xcc>)
 80003c8:	f000 fb32 	bl	8000a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80003cc:	2360      	movs	r3, #96	; 0x60
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4619      	mov	r1, r3
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 fb23 	bl	8000a30 <HAL_GPIO_Init>

}
 80003ea:	bf00      	nop
 80003ec:	3728      	adds	r7, #40	; 0x28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	10210000 	.word	0x10210000
 80003fc:	48000800 	.word	0x48000800

08000400 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]


	  HAL_UART_Receive_IT(&huart2,(uint8_t*)recive,sizeof(recive));
 8000408:	2232      	movs	r2, #50	; 0x32
 800040a:	4906      	ldr	r1, [pc, #24]	; (8000424 <HAL_UART_RxCpltCallback+0x24>)
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <HAL_UART_RxCpltCallback+0x28>)
 800040e:	f002 f8df 	bl	80025d0 <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000412:	2120      	movs	r1, #32
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f000 fcac 	bl	8000d74 <HAL_GPIO_TogglePin>


}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000030 	.word	0x20000030
 8000428:	20000064 	.word	0x20000064

0800042c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f000 fc9b 	bl	8000d74 <HAL_GPIO_TogglePin>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044a:	b672      	cpsid	i
}
 800044c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044e:	e7fe      	b.n	800044e <Error_Handler+0x8>

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000486:	2007      	movs	r0, #7
 8000488:	f000 fa1a 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <HAL_UART_MspInit+0x8c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d130      	bne.n	800051c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004ea:	230c      	movs	r3, #12
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004fa:	2307      	movs	r3, #7
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 fa92 	bl	8000a30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2026      	movs	r0, #38	; 0x26
 8000512:	f000 f9e0 	bl	80008d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000516:	2026      	movs	r0, #38	; 0x26
 8000518:	f000 f9f9 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	; 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40004400 	.word	0x40004400
 8000528:	40021000 	.word	0x40021000

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f88e 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f002 f861 	bl	800264c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000064 	.word	0x20000064

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <SystemInit+0x20>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <SystemInit+0x20>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490e      	ldr	r1, [pc, #56]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0b      	ldr	r4, [pc, #44]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005e2:	f7ff ffd7 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e6:	f002 ffc1 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ea:	f7ff fdf3 	bl	80001d4 <main>

080005ee <LoopForever>:

LoopForever:
    b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80005fc:	0800361c 	.word	0x0800361c
  ldr r2, =_sbss
 8000600:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000604:	200000ec 	.word	0x200000ec

08000608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_2_IRQHandler>
	...

0800060c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_Init+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_Init+0x28>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 f94f 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f808 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f7ff ff12 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x54>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f967 	bl	800092a <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d80a      	bhi.n	8000682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 f92f 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_InitTick+0x5c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000008 	.word	0x20000008
 8000690:	20000010 	.word	0x20000010
 8000694:	2000000c 	.word	0x2000000c

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000010 	.word	0x20000010
 80006bc:	200000e8 	.word	0x200000e8

080006c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200000e8 	.word	0x200000e8

080006d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_Delay+0x44>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffde 	bl	80006c0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000010 	.word	0x20000010

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	db0b      	blt.n	80007ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 021f 	and.w	r2, r3, #31
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <__NVIC_EnableIRQ+0x38>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	2001      	movs	r0, #1
 80007a6:	fa00 f202 	lsl.w	r2, r0, r2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff8e 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff29 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff3e 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff8e 	bl	8000814 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff31 	bl	8000784 <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000950:	2b02      	cmp	r3, #2
 8000952:	d008      	beq.n	8000966 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e020      	b.n	80009a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 020e 	bic.w	r2, r2, #14
 8000974:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 0201 	bic.w	r2, r2, #1
 8000984:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d005      	beq.n	80009d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2204      	movs	r2, #4
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e027      	b.n	8000a26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 020e 	bic.w	r2, r2, #14
 80009e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	4798      	blx	r3
    } 
  }
  return status;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	e160      	b.n	8000d02 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 8152 	beq.w	8000cfc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d00b      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b12      	cmp	r3, #18
 8000a76:	d130      	bne.n	8000ada <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	f003 0201 	and.w	r2, r3, #1
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0xea>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d123      	bne.n	8000b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	08da      	lsrs	r2, r3, #3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3208      	adds	r2, #8
 8000b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	08da      	lsrs	r2, r3, #3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	6939      	ldr	r1, [r7, #16]
 8000b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0203 	and.w	r2, r3, #3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 80ac 	beq.w	8000cfc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <HAL_GPIO_Init+0x2f0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a5d      	ldr	r2, [pc, #372]	; (8000d20 <HAL_GPIO_Init+0x2f0>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b5b      	ldr	r3, [pc, #364]	; (8000d20 <HAL_GPIO_Init+0x2f0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bbc:	4a59      	ldr	r2, [pc, #356]	; (8000d24 <HAL_GPIO_Init+0x2f4>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be6:	d025      	beq.n	8000c34 <HAL_GPIO_Init+0x204>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <HAL_GPIO_Init+0x2f8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d01f      	beq.n	8000c30 <HAL_GPIO_Init+0x200>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a4e      	ldr	r2, [pc, #312]	; (8000d2c <HAL_GPIO_Init+0x2fc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d019      	beq.n	8000c2c <HAL_GPIO_Init+0x1fc>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <HAL_GPIO_Init+0x300>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d013      	beq.n	8000c28 <HAL_GPIO_Init+0x1f8>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4c      	ldr	r2, [pc, #304]	; (8000d34 <HAL_GPIO_Init+0x304>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00d      	beq.n	8000c24 <HAL_GPIO_Init+0x1f4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4b      	ldr	r2, [pc, #300]	; (8000d38 <HAL_GPIO_Init+0x308>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x1f0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4a      	ldr	r2, [pc, #296]	; (8000d3c <HAL_GPIO_Init+0x30c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <HAL_GPIO_Init+0x1ec>
 8000c18:	2306      	movs	r3, #6
 8000c1a:	e00c      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	e00a      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e008      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c24:	2304      	movs	r3, #4
 8000c26:	e006      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e004      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <HAL_GPIO_Init+0x206>
 8000c34:	2300      	movs	r3, #0
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	f002 0203 	and.w	r2, r2, #3
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	4093      	lsls	r3, r2
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c46:	4937      	ldr	r1, [pc, #220]	; (8000d24 <HAL_GPIO_Init+0x2f4>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_GPIO_Init+0x310>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f47f ae97 	bne.w	8000a40 <HAL_GPIO_Init+0x10>
  }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	48001000 	.word	0x48001000
 8000d38:	48001400 	.word	0x48001400
 8000d3c:	48001800 	.word	0x48001800
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43d9      	mvns	r1, r3
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	400b      	ands	r3, r1
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	619a      	str	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f000 bf01 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 8160 	beq.w	8001092 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd2:	4bae      	ldr	r3, [pc, #696]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d00c      	beq.n	8000df8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dde:	4bab      	ldr	r3, [pc, #684]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d159      	bne.n	8000e9e <HAL_RCC_OscConfig+0xf6>
 8000dea:	4ba8      	ldr	r3, [pc, #672]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df6:	d152      	bne.n	8000e9e <HAL_RCC_OscConfig+0xf6>
 8000df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	fab3 f383 	clz	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d102      	bne.n	8000e2a <HAL_RCC_OscConfig+0x82>
 8000e24:	4b99      	ldr	r3, [pc, #612]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	e015      	b.n	8000e56 <HAL_RCC_OscConfig+0xae>
 8000e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e42:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e52:	4b8e      	ldr	r3, [pc, #568]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e5e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e62:	fa92 f2a2 	rbit	r2, r2
 8000e66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	f042 0220 	orr.w	r2, r2, #32
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	f002 021f 	and.w	r2, r2, #31
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 8102 	beq.w	8001090 <HAL_RCC_OscConfig+0x2e8>
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f040 80fc 	bne.w	8001090 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f000 be93 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d106      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x110>
 8000eaa:	4b78      	ldr	r3, [pc, #480]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a77      	ldr	r2, [pc, #476]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e030      	b.n	8000f1a <HAL_RCC_OscConfig+0x172>
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10c      	bne.n	8000edc <HAL_RCC_OscConfig+0x134>
 8000ec2:	4b72      	ldr	r3, [pc, #456]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a71      	ldr	r2, [pc, #452]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b6f      	ldr	r3, [pc, #444]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a6e      	ldr	r2, [pc, #440]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e01e      	b.n	8000f1a <HAL_RCC_OscConfig+0x172>
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee6:	d10c      	bne.n	8000f02 <HAL_RCC_OscConfig+0x15a>
 8000ee8:	4b68      	ldr	r3, [pc, #416]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a67      	ldr	r2, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b65      	ldr	r3, [pc, #404]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a64      	ldr	r2, [pc, #400]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e00b      	b.n	8000f1a <HAL_RCC_OscConfig+0x172>
 8000f02:	4b62      	ldr	r3, [pc, #392]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a61      	ldr	r2, [pc, #388]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a5e      	ldr	r2, [pc, #376]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d059      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fbcc 	bl	80006c0 <HAL_GetTick>
 8000f28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fbc7 	bl	80006c0 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d902      	bls.n	8000f44 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f000 be40 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x1ce>
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1fa>
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000faa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0ab      	beq.n	8000f2e <HAL_RCC_OscConfig+0x186>
 8000fd6:	e05c      	b.n	8001092 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fb72 	bl	80006c0 <HAL_GetTick>
 8000fdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb6d 	bl	80006c0 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d902      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f000 bde6 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800100c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x282>
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x2ae>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001046:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_RCC_OscConfig+0x2e4>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800105e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800106a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1ab      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x23a>
 800108a:	e002      	b.n	8001092 <HAL_RCC_OscConfig+0x2ea>
 800108c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8170 	beq.w	8001382 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a2:	4bd0      	ldr	r3, [pc, #832]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ae:	4bcd      	ldr	r3, [pc, #820]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d16d      	bne.n	8001196 <HAL_RCC_OscConfig+0x3ee>
 80010ba:	4bca      	ldr	r3, [pc, #808]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c6:	d166      	bne.n	8001196 <HAL_RCC_OscConfig+0x3ee>
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_OscConfig+0x350>
 80010f2:	4bbc      	ldr	r3, [pc, #752]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x378>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001110:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800111c:	4bb1      	ldr	r3, [pc, #708]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	2202      	movs	r2, #2
 8001122:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001126:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001132:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_RCC_OscConfig+0x3ba>
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	f000 bd31 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4ba0      	ldr	r3, [pc, #640]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	21f8      	movs	r1, #248	; 0xf8
 8001172:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800117a:	fa91 f1a1 	rbit	r1, r1
 800117e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001182:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001186:	fab1 f181 	clz	r1, r1
 800118a:	b2c9      	uxtb	r1, r1
 800118c:	408b      	lsls	r3, r1
 800118e:	4995      	ldr	r1, [pc, #596]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001194:	e0f5      	b.n	8001382 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8085 	beq.w	80012ac <HAL_RCC_OscConfig+0x504>
 80011a2:	2301      	movs	r3, #1
 80011a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	461a      	mov	r2, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fa77 	bl	80006c0 <HAL_GetTick>
 80011d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fa72 	bl	80006c0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d902      	bls.n	80011ee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	f000 bceb 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001200:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x476>
 8001218:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e013      	b.n	8001246 <HAL_RCC_OscConfig+0x49e>
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001236:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001242:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	2202      	movs	r2, #2
 8001248:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800124c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001258:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f002 021f 	and.w	r2, r2, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0af      	beq.n	80011d8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	21f8      	movs	r1, #248	; 0xf8
 8001288:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001290:	fa91 f1a1 	rbit	r1, r1
 8001294:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001298:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800129c:	fab1 f181 	clz	r1, r1
 80012a0:	b2c9      	uxtb	r1, r1
 80012a2:	408b      	lsls	r3, r1
 80012a4:	494f      	ldr	r1, [pc, #316]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
 80012aa:	e06a      	b.n	8001382 <HAL_RCC_OscConfig+0x5da>
 80012ac:	2301      	movs	r3, #1
 80012ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	461a      	mov	r2, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff f9f2 	bl	80006c0 <HAL_GetTick>
 80012dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff f9ed 	bl	80006c0 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d902      	bls.n	80012f8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f000 bc66 	b.w	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800130a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d102      	bne.n	8001328 <HAL_RCC_OscConfig+0x580>
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e013      	b.n	8001350 <HAL_RCC_OscConfig+0x5a8>
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001340:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_RCC_OscConfig+0x63c>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2202      	movs	r2, #2
 8001352:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001356:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800135a:	fa92 f2a2 	rbit	r2, r2
 800135e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001362:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001366:	fab2 f282 	clz	r2, r2
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	f002 021f 	and.w	r2, r2, #31
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1af      	bne.n	80012e2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80da 	beq.w	8001546 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d069      	beq.n	8001470 <HAL_RCC_OscConfig+0x6c8>
 800139c:	2301      	movs	r3, #1
 800139e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x640>)
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	461a      	mov	r2, r3
 80013c2:	2301      	movs	r3, #1
 80013c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff f97b 	bl	80006c0 <HAL_GetTick>
 80013ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e00d      	b.n	80013ec <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff f976 	bl	80006c0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d905      	bls.n	80013ec <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e3ef      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 80013e4:	40021000 	.word	0x40021000
 80013e8:	10908120 	.word	0x10908120
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800141c:	2202      	movs	r2, #2
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f2a3 	rbit	r2, r3
 800142a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800142e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001430:	4ba4      	ldr	r3, [pc, #656]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001438:	2102      	movs	r1, #2
 800143a:	6019      	str	r1, [r3, #0]
 800143c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f1a3 	rbit	r1, r3
 8001446:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800144a:	6019      	str	r1, [r3, #0]
  return result;
 800144c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0b0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x628>
 800146e:	e06a      	b.n	8001546 <HAL_RCC_OscConfig+0x79e>
 8001470:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001486:	601a      	str	r2, [r3, #0]
  return result;
 8001488:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800148c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b8c      	ldr	r3, [pc, #560]	; (80016c8 <HAL_RCC_OscConfig+0x920>)
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f90d 	bl	80006c0 <HAL_GetTick>
 80014a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014aa:	e009      	b.n	80014c0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff f908 	bl	80006c0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e381      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 80014c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f4:	2202      	movs	r2, #2
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001506:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800150a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001510:	2102      	movs	r1, #2
 8001512:	6019      	str	r1, [r3, #0]
 8001514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f1a3 	rbit	r1, r3
 800151e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001522:	6019      	str	r1, [r3, #0]
  return result;
 8001524:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1b2      	bne.n	80014ac <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8157 	beq.w	8001804 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a55      	ldr	r2, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <HAL_RCC_OscConfig+0x924>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <HAL_RCC_OscConfig+0x924>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_RCC_OscConfig+0x924>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f88b 	bl	80006c0 <HAL_GetTick>
 80015aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	e009      	b.n	80015c4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff f886 	bl	80006c0 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e2ff      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x924>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ef      	beq.n	80015b0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x840>
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a39      	ldr	r2, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	e02f      	b.n	8001648 <HAL_RCC_OscConfig+0x8a0>
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x864>
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0x8a0>
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x888>
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0x8a0>
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 8001642:	f023 0304 	bic.w	r3, r3, #4
 8001646:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d06a      	beq.n	8001728 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff f835 	bl	80006c0 <HAL_GetTick>
 8001656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff f830 	bl	80006c0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e2a7      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 8001674:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016a2:	601a      	str	r2, [r3, #0]
  return result;
 80016a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d108      	bne.n	80016d0 <HAL_RCC_OscConfig+0x928>
 80016be:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <HAL_RCC_OscConfig+0x91c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	e013      	b.n	80016ec <HAL_RCC_OscConfig+0x944>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	10908120 	.word	0x10908120
 80016cc:	40007000 	.word	0x40007000
 80016d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4bc0      	ldr	r3, [pc, #768]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016f0:	2102      	movs	r1, #2
 80016f2:	6011      	str	r1, [r2, #0]
 80016f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	fa92 f1a2 	rbit	r1, r2
 80016fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001702:	6011      	str	r1, [r2, #0]
  return result;
 8001704:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d09a      	beq.n	800165c <HAL_RCC_OscConfig+0x8b4>
 8001726:	e063      	b.n	80017f0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7fe ffca 	bl	80006c0 <HAL_GetTick>
 800172c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7fe ffc5 	bl	80006c0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e23c      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 800174a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001778:	601a      	str	r2, [r3, #0]
  return result;
 800177a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800177e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0x9f2>
 8001794:	4b95      	ldr	r3, [pc, #596]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	e00d      	b.n	80017b6 <HAL_RCC_OscConfig+0xa0e>
 800179a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017ba:	2102      	movs	r1, #2
 80017bc:	6011      	str	r1, [r2, #0]
 80017be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fa92 f1a2 	rbit	r1, r2
 80017c8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017cc:	6011      	str	r1, [r2, #0]
  return result;
 80017ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1a0      	bne.n	8001732 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4a7b      	ldr	r2, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 81d9 	beq.w	8001bc2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	f000 81a6 	beq.w	8001b6a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 811e 	bne.w	8001a66 <HAL_RCC_OscConfig+0xcbe>
 800182a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800182e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001842:	601a      	str	r2, [r3, #0]
  return result;
 8001844:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001848:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	461a      	mov	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7fe ff2e 	bl	80006c0 <HAL_GetTick>
 8001864:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e009      	b.n	800187e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7fe ff29 	bl	80006c0 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1a2      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 800187e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001896:	601a      	str	r2, [r3, #0]
  return result;
 8001898:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800189c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_RCC_OscConfig+0xb10>
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0xb48>
 80018b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fa92 f1a2 	rbit	r1, r2
 8001904:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001908:	6011      	str	r1, [r2, #0]
  return result;
 800190a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fab2 f282 	clz	r2, r2
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	f042 0220 	orr.w	r2, r2, #32
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f002 021f 	and.w	r2, r2, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d19e      	bne.n	800186a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	f023 020f 	bic.w	r2, r3, #15
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	492c      	ldr	r1, [pc, #176]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 800193c:	4313      	orrs	r3, r2
 800193e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a19      	ldr	r1, [r3, #32]
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	430b      	orrs	r3, r1
 8001956:	4925      	ldr	r1, [pc, #148]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001974:	601a      	str	r2, [r3, #0]
  return result;
 8001976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001986:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	2301      	movs	r3, #1
 8001990:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7fe fe95 	bl	80006c0 <HAL_GetTick>
 8001996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199a:	e009      	b.n	80019b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe fe90 	bl	80006c0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e109      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 80019b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0xc48>
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <HAL_RCC_OscConfig+0xc44>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e01e      	b.n	8001a28 <HAL_RCC_OscConfig+0xc80>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f2a3 	rbit	r2, r3
 8001a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0xe28>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	fa92 f1a2 	rbit	r1, r2
 8001a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a40:	6011      	str	r1, [r2, #0]
  return result;
 8001a42:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d09b      	beq.n	800199c <HAL_RCC_OscConfig+0xbf4>
 8001a64:	e0ad      	b.n	8001bc2 <HAL_RCC_OscConfig+0xe1a>
 8001a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7e:	601a      	str	r2, [r3, #0]
  return result;
 8001a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fe10 	bl	80006c0 <HAL_GetTick>
 8001aa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7fe fe0b 	bl	80006c0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e084      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad2:	601a      	str	r2, [r3, #0]
  return result;
 8001ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0xd4c>
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_RCC_OscConfig+0xe28>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	e01b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd84>
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_RCC_OscConfig+0xe28>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f107 0214 	add.w	r2, r7, #20
 8001b30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f107 0214 	add.w	r2, r7, #20
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	fa92 f1a2 	rbit	r1, r2
 8001b40:	f107 0210 	add.w	r2, r7, #16
 8001b44:	6011      	str	r1, [r2, #0]
  return result;
 8001b46:	f107 0210 	add.w	r2, r7, #16
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f042 0220 	orr.w	r2, r2, #32
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f002 021f 	and.w	r2, r2, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d19e      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xcfe>
 8001b68:	e02b      	b.n	8001bc2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e025      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0xe28>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_RCC_OscConfig+0xe28>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b8c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d111      	bne.n	8001bbe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d108      	bne.n	8001bbe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09e      	sub	sp, #120	; 0x78
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e162      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	498b      	ldr	r1, [pc, #556]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e14a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	497f      	ldr	r1, [pc, #508]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80dc 	beq.w	8001e00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d13c      	bne.n	8001cca <HAL_RCC_ClockConfig+0xf6>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xa6>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e00f      	b.n	8001c9a <HAL_RCC_ClockConfig+0xc6>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	667b      	str	r3, [r7, #100]	; 0x64
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001caa:	fab2 f282 	clz	r2, r2
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d17b      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0f3      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d13c      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x178>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x128>
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_ClockConfig+0x148>
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d20:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13a      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b2      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e00d      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1bc>
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2202      	movs	r2, #2
 8001d92:	61ba      	str	r2, [r7, #24]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	617a      	str	r2, [r7, #20]
  return result;
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e079      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	491a      	ldr	r1, [pc, #104]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fc76 	bl	80006c0 <HAL_GetTick>
 8001dd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe fc72 	bl	80006c0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e061      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d214      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4906      	ldr	r1, [pc, #24]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e040      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e76:	f000 f829 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	22f0      	movs	r2, #240	; 0xf0
 8001e86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	40d3      	lsrs	r3, r2
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_ClockConfig+0x2f0>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_RCC_ClockConfig+0x2f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fbc4 	bl	8000638 <HAL_InitTick>
  
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3778      	adds	r7, #120	; 0x78
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080035dc 	.word	0x080035dc
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	2000000c 	.word	0x2000000c

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e03f      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	e03f      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	607a      	str	r2, [r7, #4]
  return result;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	40d3      	lsrs	r3, r2
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	220f      	movs	r2, #15
 8001f30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	60fa      	str	r2, [r7, #12]
  return result;
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	40d3      	lsrs	r3, r2
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e007      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	623b      	str	r3, [r7, #32]
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f7e:	623b      	str	r3, [r7, #32]
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	372c      	adds	r7, #44	; 0x2c
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40021000 	.word	0x40021000
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	080035f4 	.word	0x080035f4
 8001f9c:	08003604 	.word	0x08003604

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fbe:	f7ff ffef 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	fa92 f2a2 	rbit	r2, r2
 8001fd8:	603a      	str	r2, [r7, #0]
  return result;
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	40d3      	lsrs	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	080035ec 	.word	0x080035ec

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002002:	f7ff ffcd 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002010:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fa92 f2a2 	rbit	r2, r2
 800201c:	603a      	str	r2, [r7, #0]
  return result;
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_RCC_GetPCLK2Freq+0x40>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	080035ec 	.word	0x080035ec

08002040 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b092      	sub	sp, #72	; 0x48
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80d4 	beq.w	800220c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10e      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	61d3      	str	r3, [r2, #28]
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fb0b 	bl	80006c0 <HAL_GetTick>
 80020aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7fe fb07 	bl	80006c0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1d6      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8084 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d07c      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	461a      	mov	r2, r3
 800213a:	2300      	movs	r3, #0
 800213c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d04b      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fab7 	bl	80006c0 <HAL_GetTick>
 8002152:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe fab3 	bl	80006c0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e180      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	61fb      	str	r3, [r7, #28]
  return result;
 8002184:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d108      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800219a:	4b01      	ldr	r3, [pc, #4]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	e00d      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	10908100 	.word	0x10908100
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	4ba0      	ldr	r3, [pc, #640]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	613a      	str	r2, [r7, #16]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	60fa      	str	r2, [r7, #12]
  return result;
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0b7      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021e6:	4b95      	ldr	r3, [pc, #596]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4992      	ldr	r1, [pc, #584]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	4a8d      	ldr	r2, [pc, #564]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002218:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f023 0203 	bic.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4985      	ldr	r1, [pc, #532]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002236:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	497e      	ldr	r1, [pc, #504]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4976      	ldr	r1, [pc, #472]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002272:	4b72      	ldr	r3, [pc, #456]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f023 0210 	bic.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	496f      	ldr	r1, [pc, #444]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	4967      	ldr	r1, [pc, #412]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f023 0220 	bic.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4960      	ldr	r1, [pc, #384]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022cc:	4b5b      	ldr	r3, [pc, #364]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	4958      	ldr	r1, [pc, #352]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4951      	ldr	r1, [pc, #324]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4949      	ldr	r1, [pc, #292]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002326:	4b45      	ldr	r3, [pc, #276]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4942      	ldr	r1, [pc, #264]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	493a      	ldr	r1, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	4933      	ldr	r1, [pc, #204]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	492b      	ldr	r1, [pc, #172]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	491c      	ldr	r1, [pc, #112]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	4915      	ldr	r1, [pc, #84]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	490d      	ldr	r1, [pc, #52]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	4906      	ldr	r1, [pc, #24]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002434:	4b01      	ldr	r3, [pc, #4]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	e002      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	490b      	ldr	r1, [pc, #44]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800244a:	4313      	orrs	r3, r2
 800244c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002468:	4313      	orrs	r3, r2
 800246a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3748      	adds	r7, #72	; 0x48
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e040      	b.n	8002510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fd fffa 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fadc 	bl	8002a78 <UART_SetConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e022      	b.n	8002510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fca6 	bl	8002e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fd2d 	bl	8002f68 <UART_CheckIdleState>
 800250e:	4603      	mov	r3, r0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252a:	2b20      	cmp	r3, #32
 800252c:	d145      	bne.n	80025ba <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_UART_Transmit_IT+0x22>
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e03e      	b.n	80025bc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_UART_Transmit_IT+0x34>
 8002548:	2302      	movs	r3, #2
 800254a:	e037      	b.n	80025bc <HAL_UART_Transmit_IT+0xa4>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2221      	movs	r2, #33	; 0x21
 800257c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d107      	bne.n	8002598 <HAL_UART_Transmit_IT+0x80>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_UART_Transmit_IT+0xb0>)
 8002594:	669a      	str	r2, [r3, #104]	; 0x68
 8002596:	e002      	b.n	800259e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_UART_Transmit_IT+0xb4>)
 800259c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	08003303 	.word	0x08003303
 80025cc:	0800328f 	.word	0x0800328f

080025d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d12c      	bne.n	8002640 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_UART_Receive_IT+0x22>
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e025      	b.n	8002642 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_UART_Receive_IT+0x34>
 8002600:	2302      	movs	r3, #2
 8002602:	e01e      	b.n	8002642 <HAL_UART_Receive_IT+0x72>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800262e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	461a      	mov	r2, r3
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fd5c 	bl	80030f4 <UART_Start_Receive_IT>
 800263c:	4603      	mov	r3, r0
 800263e:	e000      	b.n	8002642 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d113      	bne.n	80026a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00e      	beq.n	80026a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 81cc 	beq.w	8002a32 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
      }
      return;
 80026a2:	e1c6      	b.n	8002a32 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80e3 	beq.w	8002872 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4ba5      	ldr	r3, [pc, #660]	; (8002950 <HAL_UART_IRQHandler+0x304>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80d8 	beq.w	8002872 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_UART_IRQHandler+0xa2>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <HAL_UART_IRQHandler+0xce>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2202      	movs	r2, #2
 8002708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_UART_IRQHandler+0xfa>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2204      	movs	r2, #4
 8002734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273c:	f043 0202 	orr.w	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002772:	f043 0208 	orr.w	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_UART_IRQHandler+0x15e>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8140 	beq.w	8002a36 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d004      	beq.n	80027fa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d031      	beq.n	800285e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fd02 	bl	8003204 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d123      	bne.n	8002856 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a4a      	ldr	r2, [pc, #296]	; (8002954 <HAL_UART_IRQHandler+0x308>)
 800282c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f8be 	bl	80009b4 <HAL_DMA_Abort_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	e00f      	b.n	800286e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8fc 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	e00b      	b.n	800286e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8f8 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	e007      	b.n	800286e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8f4 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800286c:	e0e3      	b.n	8002a36 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286e:	bf00      	nop
    return;
 8002870:	e0e1      	b.n	8002a36 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	2b01      	cmp	r3, #1
 8002878:	f040 80a7 	bne.w	80029ca <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a1 	beq.w	80029ca <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 809b 	beq.w	80029ca <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2210      	movs	r2, #16
 800289a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d156      	bne.n	8002958 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80bf 	beq.w	8002a3a <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80028c2:	893a      	ldrh	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f080 80b8 	bcs.w	8002a3a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	893a      	ldrh	r2, [r7, #8]
 80028ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d02a      	beq.n	8002932 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0210 	bic.w	r2, r2, #16
 8002926:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f808 	bl	8000942 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800293e:	b29b      	uxth	r3, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f88a 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800294c:	e075      	b.n	8002a3a <HAL_UART_IRQHandler+0x3ee>
 800294e:	bf00      	nop
 8002950:	04000120 	.word	0x04000120
 8002954:	08003263 	.word	0x08003263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002964:	b29b      	uxth	r3, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d060      	beq.n	8002a3e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800298a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0210 	bic.w	r2, r2, #16
 80029bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f84c 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029c8:	e039      	b.n	8002a3e <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <HAL_UART_IRQHandler+0x3a4>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fdb5 	bl	8003558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029ee:	e029      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01a      	beq.n	8002a42 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
    }
    return;
 8002a14:	e015      	b.n	8002a42 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fca7 	bl	800337e <UART_EndTransmit_IT>
    return;
 8002a30:	e008      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002a32:	bf00      	nop
 8002a34:	e006      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002a42:	bf00      	nop
  }

}
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4bab      	ldr	r3, [pc, #684]	; (8002d50 <UART_SetConfig+0x2d8>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a99      	ldr	r2, [pc, #612]	; (8002d54 <UART_SetConfig+0x2dc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d120      	bne.n	8002b36 <UART_SetConfig+0xbe>
 8002af4:	4b98      	ldr	r3, [pc, #608]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d817      	bhi.n	8002b30 <UART_SetConfig+0xb8>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_SetConfig+0x90>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b2b 	.word	0x08002b2b
 8002b14:	08002b1f 	.word	0x08002b1f
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e0b5      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e0b2      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b24:	2304      	movs	r3, #4
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e0af      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	e0ac      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b30:	2310      	movs	r3, #16
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e0a9      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a88      	ldr	r2, [pc, #544]	; (8002d5c <UART_SetConfig+0x2e4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d124      	bne.n	8002b8a <UART_SetConfig+0x112>
 8002b40:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b4c:	d011      	beq.n	8002b72 <UART_SetConfig+0xfa>
 8002b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b52:	d817      	bhi.n	8002b84 <UART_SetConfig+0x10c>
 8002b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b58:	d011      	beq.n	8002b7e <UART_SetConfig+0x106>
 8002b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5e:	d811      	bhi.n	8002b84 <UART_SetConfig+0x10c>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <UART_SetConfig+0xf4>
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d006      	beq.n	8002b78 <UART_SetConfig+0x100>
 8002b6a:	e00b      	b.n	8002b84 <UART_SetConfig+0x10c>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e08b      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b72:	2302      	movs	r3, #2
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e088      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e085      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e082      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b84:	2310      	movs	r3, #16
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e07f      	b.n	8002c8a <UART_SetConfig+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a74      	ldr	r2, [pc, #464]	; (8002d60 <UART_SetConfig+0x2e8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d124      	bne.n	8002bde <UART_SetConfig+0x166>
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba0:	d011      	beq.n	8002bc6 <UART_SetConfig+0x14e>
 8002ba2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba6:	d817      	bhi.n	8002bd8 <UART_SetConfig+0x160>
 8002ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bac:	d011      	beq.n	8002bd2 <UART_SetConfig+0x15a>
 8002bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bb2:	d811      	bhi.n	8002bd8 <UART_SetConfig+0x160>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <UART_SetConfig+0x148>
 8002bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bbc:	d006      	beq.n	8002bcc <UART_SetConfig+0x154>
 8002bbe:	e00b      	b.n	8002bd8 <UART_SetConfig+0x160>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e061      	b.n	8002c8a <UART_SetConfig+0x212>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e05e      	b.n	8002c8a <UART_SetConfig+0x212>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e05b      	b.n	8002c8a <UART_SetConfig+0x212>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e058      	b.n	8002c8a <UART_SetConfig+0x212>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e055      	b.n	8002c8a <UART_SetConfig+0x212>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a60      	ldr	r2, [pc, #384]	; (8002d64 <UART_SetConfig+0x2ec>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d124      	bne.n	8002c32 <UART_SetConfig+0x1ba>
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bf4:	d011      	beq.n	8002c1a <UART_SetConfig+0x1a2>
 8002bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bfa:	d817      	bhi.n	8002c2c <UART_SetConfig+0x1b4>
 8002bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c00:	d011      	beq.n	8002c26 <UART_SetConfig+0x1ae>
 8002c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c06:	d811      	bhi.n	8002c2c <UART_SetConfig+0x1b4>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <UART_SetConfig+0x19c>
 8002c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c10:	d006      	beq.n	8002c20 <UART_SetConfig+0x1a8>
 8002c12:	e00b      	b.n	8002c2c <UART_SetConfig+0x1b4>
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e037      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e034      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c20:	2304      	movs	r3, #4
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e031      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c26:	2308      	movs	r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e02e      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e02b      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4c      	ldr	r2, [pc, #304]	; (8002d68 <UART_SetConfig+0x2f0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d124      	bne.n	8002c86 <UART_SetConfig+0x20e>
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <UART_SetConfig+0x2e0>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c48:	d011      	beq.n	8002c6e <UART_SetConfig+0x1f6>
 8002c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c4e:	d817      	bhi.n	8002c80 <UART_SetConfig+0x208>
 8002c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c54:	d011      	beq.n	8002c7a <UART_SetConfig+0x202>
 8002c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c5a:	d811      	bhi.n	8002c80 <UART_SetConfig+0x208>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <UART_SetConfig+0x1f0>
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c64:	d006      	beq.n	8002c74 <UART_SetConfig+0x1fc>
 8002c66:	e00b      	b.n	8002c80 <UART_SetConfig+0x208>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e00d      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e00a      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c74:	2304      	movs	r3, #4
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e007      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	77fb      	strb	r3, [r7, #31]
 8002c7e:	e004      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c80:	2310      	movs	r3, #16
 8002c82:	77fb      	strb	r3, [r7, #31]
 8002c84:	e001      	b.n	8002c8a <UART_SetConfig+0x212>
 8002c86:	2310      	movs	r3, #16
 8002c88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c92:	d16d      	bne.n	8002d70 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002c94:	7ffb      	ldrb	r3, [r7, #31]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d827      	bhi.n	8002cea <UART_SetConfig+0x272>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <UART_SetConfig+0x228>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002ceb 	.word	0x08002ceb
 8002cb0:	08002cdb 	.word	0x08002cdb
 8002cb4:	08002ceb 	.word	0x08002ceb
 8002cb8:	08002ceb 	.word	0x08002ceb
 8002cbc:	08002ceb 	.word	0x08002ceb
 8002cc0:	08002ce3 	.word	0x08002ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7ff f978 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	61b8      	str	r0, [r7, #24]
        break;
 8002cca:	e013      	b.n	8002cf4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7ff f996 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002cd0:	61b8      	str	r0, [r7, #24]
        break;
 8002cd2:	e00f      	b.n	8002cf4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <UART_SetConfig+0x2f4>)
 8002cd6:	61bb      	str	r3, [r7, #24]
        break;
 8002cd8:	e00c      	b.n	8002cf4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cda:	f7ff f8f7 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002cde:	61b8      	str	r0, [r7, #24]
        break;
 8002ce0:	e008      	b.n	8002cf4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce6:	61bb      	str	r3, [r7, #24]
        break;
 8002ce8:	e004      	b.n	8002cf4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8002cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8086 	beq.w	8002e08 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	005a      	lsls	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	441a      	add	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	d916      	bls.n	8002d48 <UART_SetConfig+0x2d0>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d212      	bcs.n	8002d48 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f023 030f 	bic.w	r3, r3, #15
 8002d2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	89fa      	ldrh	r2, [r7, #14]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e05f      	b.n	8002e08 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77bb      	strb	r3, [r7, #30]
 8002d4c:	e05c      	b.n	8002e08 <UART_SetConfig+0x390>
 8002d4e:	bf00      	nop
 8002d50:	efff69f3 	.word	0xefff69f3
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40004800 	.word	0x40004800
 8002d64:	40004c00 	.word	0x40004c00
 8002d68:	40005000 	.word	0x40005000
 8002d6c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d827      	bhi.n	8002dc6 <UART_SetConfig+0x34e>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <UART_SetConfig+0x304>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002da1 	.word	0x08002da1
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08002dc7 	.word	0x08002dc7
 8002d8c:	08002db7 	.word	0x08002db7
 8002d90:	08002dc7 	.word	0x08002dc7
 8002d94:	08002dc7 	.word	0x08002dc7
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	08002dbf 	.word	0x08002dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da0:	f7ff f90a 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8002da4:	61b8      	str	r0, [r7, #24]
        break;
 8002da6:	e013      	b.n	8002dd0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7ff f928 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002dac:	61b8      	str	r0, [r7, #24]
        break;
 8002dae:	e00f      	b.n	8002dd0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <UART_SetConfig+0x3a8>)
 8002db2:	61bb      	str	r3, [r7, #24]
        break;
 8002db4:	e00c      	b.n	8002dd0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db6:	f7ff f889 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002dba:	61b8      	str	r0, [r7, #24]
        break;
 8002dbc:	e008      	b.n	8002dd0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc2:	61bb      	str	r3, [r7, #24]
        break;
 8002dc4:	e004      	b.n	8002dd0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8002dce:	bf00      	nop
    }

    if (pclk != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	085a      	lsrs	r2, r3, #1
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	d908      	bls.n	8002e04 <UART_SetConfig+0x38c>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d204      	bcs.n	8002e04 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e001      	b.n	8002e08 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e14:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f22:	d10a      	bne.n	8002f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f78:	f7fd fba2 	bl	80006c0 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d10e      	bne.n	8002faa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f82d 	bl	8002ffa <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e023      	b.n	8002ff2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d10e      	bne.n	8002fd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f817 	bl	8002ffa <UART_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e00d      	b.n	8002ff2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300a:	e05e      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d05a      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fd fb54 	bl	80006c0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <UART_WaitOnFlagUntilTimeout+0x30>
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11b      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003038:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e043      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02c      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d124      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003088:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003098:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d091      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d10e      	bne.n	8003146 <UART_Start_Receive_IT+0x52>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <UART_Start_Receive_IT+0x48>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800313a:	e02d      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003144:	e028      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <UART_Start_Receive_IT+0x76>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <UART_Start_Receive_IT+0x6c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	22ff      	movs	r2, #255	; 0xff
 800315a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800315e:	e01b      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	227f      	movs	r2, #127	; 0x7f
 8003164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003168:	e016      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003172:	d10d      	bne.n	8003190 <UART_Start_Receive_IT+0x9c>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <UART_Start_Receive_IT+0x92>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	227f      	movs	r2, #127	; 0x7f
 8003180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003184:	e008      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800318e:	e003      	b.n	8003198 <UART_Start_Receive_IT+0xa4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2222      	movs	r2, #34	; 0x22
 80031a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d107      	bne.n	80031d0 <UART_Start_Receive_IT+0xdc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <UART_Start_Receive_IT+0x108>)
 80031cc:	665a      	str	r2, [r3, #100]	; 0x64
 80031ce:	e002      	b.n	80031d6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <UART_Start_Receive_IT+0x10c>)
 80031d4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80031ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	08003485 	.word	0x08003485
 8003200:	080033b1 	.word	0x080033b1

08003204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800321a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0210 	bic.w	r2, r2, #16
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fbe3 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	2b21      	cmp	r3, #33	; 0x21
 800329c:	d12b      	bne.n	80032f6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d110      	bne.n	80032cc <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80032ca:	e014      	b.n	80032f6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b292      	uxth	r2, r2
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330e:	2b21      	cmp	r3, #33	; 0x21
 8003310:	d12f      	bne.n	8003372 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d110      	bne.n	8003340 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800332c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800333e:	e018      	b.n	8003372 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003352:	b292      	uxth	r2, r2
 8003354:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd f842 	bl	800042c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c4:	2b22      	cmp	r3, #34	; 0x22
 80033c6:	d151      	bne.n	800346c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033ce:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033d0:	89bb      	ldrh	r3, [r7, #12]
 80033d2:	b2d9      	uxtb	r1, r3
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	400a      	ands	r2, r1
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d138      	bne.n	800347c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003418:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10f      	bne.n	800345e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0210 	bic.w	r2, r2, #16
 800344c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fb02 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
 800345c:	e002      	b.n	8003464 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fc ffce 	bl	8000400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800346a:	e007      	b.n	800347c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	619a      	str	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003492:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	2b22      	cmp	r3, #34	; 0x22
 800349a:	d151      	bne.n	8003540 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034a2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80034aa:	89ba      	ldrh	r2, [r7, #12]
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	4013      	ands	r3, r2
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	1c9a      	adds	r2, r3, #2
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d138      	bne.n	8003550 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034ec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10f      	bne.n	8003532 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0210 	bic.w	r2, r2, #16
 8003520:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fa98 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
 8003530:	e002      	b.n	8003538 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fc ff64 	bl	8000400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800353e:	e007      	b.n	8003550 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0208 	orr.w	r2, r2, #8
 800354e:	619a      	str	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 f820 	bl	80035c4 <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003614 	.word	0x08003614
 80035a8:	08003614 	.word	0x08003614
 80035ac:	08003614 	.word	0x08003614
 80035b0:	08003618 	.word	0x08003618

080035b4 <memset>:
 80035b4:	4402      	add	r2, r0
 80035b6:	4603      	mov	r3, r0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d100      	bne.n	80035be <memset+0xa>
 80035bc:	4770      	bx	lr
 80035be:	f803 1b01 	strb.w	r1, [r3], #1
 80035c2:	e7f9      	b.n	80035b8 <memset+0x4>

080035c4 <_init>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr

080035d0 <_fini>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr
