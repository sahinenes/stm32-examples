
005_adc_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08004250  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08004250  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d3  00000000  00000000  00028723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  0002a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f374  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000909f  00000000  00000000  00049da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0534  00000000  00000000  00052e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a00  00000000  00000000  001133cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080041f4 	.word	0x080041f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080041f4 	.word	0x080041f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fa5e 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80a 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f000 f8d8 	bl	8000bd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a24:	f000 f866 	bl	8000af4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <main+0x1c>)
 8000a2a:	f000 fcc9 	bl	80013c0 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <main+0x1a>
 8000a30:	2000002c 	.word	0x2000002c

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0a6      	sub	sp, #152	; 0x98
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a3e:	2228      	movs	r2, #40	; 0x28
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fbce 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2258      	movs	r2, #88	; 0x58
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fbc0 	bl	80041e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV4;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f866 	bl	8002b64 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f93d 	bl	8000d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000abc:	2102      	movs	r1, #2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 ff66 	bl	8003990 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aca:	f000 f927 	bl	8000d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 f940 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ae6:	f000 f919 	bl	8000d1c <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3798      	adds	r7, #152	; 0x98
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b72:	f000 fa2b 	bl	8000fcc <HAL_ADC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f8ce 	bl	8000d1c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b8c:	f001 fb86 	bl	800229c <HAL_ADCEx_MultiModeConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b96:	f000 f8c1 	bl	8000d1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_ADC1_Init+0xdc>)
 8000bb8:	f001 f884 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000bc2:	f000 f8ab 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000002c 	.word	0x2000002c

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a2a      	ldr	r2, [pc, #168]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_GPIO_Init+0xc4>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f001 ff6f 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_GPIO_Init+0xc8>)
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_GPIO_Init+0xcc>)
 8000c6c:	f001 fdd8 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c70:	2320      	movs	r3, #32
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 fdc9 	bl	8002820 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	10210000 	.word	0x10210000
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	adc_value=HAL_ADC_GetValue(&hadc1);
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <HAL_ADC_ConvCpltCallback+0x68>)
 8000cb2:	f000 fcc5 	bl	8001640 <HAL_ADC_GetValue>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cbc:	801a      	strh	r2, [r3, #0]
	adc_voltage=(3.3*adc_value)/4095;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fbda 	bl	800047c <__aeabi_i2d>
 8000cc8:	a30d      	add	r3, pc, #52	; (adr r3, 8000d00 <HAL_ADC_ConvCpltCallback+0x58>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fc3f 	bl	8000550 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	a30b      	add	r3, pc, #44	; (adr r3, 8000d08 <HAL_ADC_ConvCpltCallback+0x60>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fd60 	bl	80007a4 <__aeabi_ddiv>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff fe42 	bl	8000974 <__aeabi_d2f>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	66666666 	.word	0x66666666
 8000d04:	400a6666 	.word	0x400a6666
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	40affe00 	.word	0x40affe00
 8000d10:	2000002c 	.word	0x2000002c
 8000d14:	20000028 	.word	0x20000028
 8000d18:	2000007c 	.word	0x2000007c

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_MspInit+0x44>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x44>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x44>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x44>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x44>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f001 fd1c 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d90:	d12c      	bne.n	8000dec <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f001 fd22 	bl	8002820 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2012      	movs	r0, #18
 8000de2:	f001 fce6 	bl	80027b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000de6:	2012      	movs	r0, #18
 8000de8:	f001 fcff 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f88e 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <ADC1_2_IRQHandler+0x10>)
 8000e52:	f000 fc03 	bl	800165c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000002c 	.word	0x2000002c

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f003 f973 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fdad 	bl	8000a14 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ebc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec8:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed0:	20000084 	.word	0x20000084

08000ed4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC3_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f001 fc57 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff ff18 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc6f 	bl	8002806 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f001 fc37 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000080 	.word	0x20000080

08000f8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000080 	.word	0x20000080

08000fa4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	; 0x68
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e1e3      	b.n	80013b4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d176      	bne.n	80010ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d152      	bne.n	80010ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fea5 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13b      	bne.n	80010ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fa81 	bl	800253c <ADC_Disable>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12f      	bne.n	80010ac <HAL_ADC_Init+0xe0>
 800104c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001050:	2b00      	cmp	r3, #0
 8001052:	d12b      	bne.n	80010ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105c:	f023 0302 	bic.w	r3, r3, #2
 8001060:	f043 0202 	orr.w	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001076:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001086:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001088:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <HAL_ADC_Init+0x308>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a92      	ldr	r2, [pc, #584]	; (80012d8 <HAL_ADC_Init+0x30c>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	0c9a      	lsrs	r2, r3, #18
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109e:	e002      	b.n	80010a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f9      	bne.n	80010a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c8:	d110      	bne.n	80010ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0312 	bic.w	r3, r3, #18
 80010d2:	f043 0210 	orr.w	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 8150 	bne.w	800139a <HAL_ADC_Init+0x3ce>
 80010fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 814b 	bne.w	800139a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8143 	bne.w	800139a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800111c:	f043 0202 	orr.w	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112c:	d004      	beq.n	8001138 <HAL_ADC_Init+0x16c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6a      	ldr	r2, [pc, #424]	; (80012dc <HAL_ADC_Init+0x310>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_ADC_Init+0x170>
 8001138:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <HAL_ADC_Init+0x314>)
 800113a:	e000      	b.n	800113e <HAL_ADC_Init+0x172>
 800113c:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <HAL_ADC_Init+0x318>)
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001148:	d102      	bne.n	8001150 <HAL_ADC_Init+0x184>
 800114a:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_ADC_Init+0x310>)
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e01a      	b.n	8001186 <HAL_ADC_Init+0x1ba>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_ADC_Init+0x310>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <HAL_ADC_Init+0x196>
 800115a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e011      	b.n	8001186 <HAL_ADC_Init+0x1ba>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a60      	ldr	r2, [pc, #384]	; (80012e8 <HAL_ADC_Init+0x31c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d102      	bne.n	8001172 <HAL_ADC_Init+0x1a6>
 800116c:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_ADC_Init+0x320>)
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e009      	b.n	8001186 <HAL_ADC_Init+0x1ba>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <HAL_ADC_Init+0x320>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d102      	bne.n	8001182 <HAL_ADC_Init+0x1b6>
 800117c:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <HAL_ADC_Init+0x31c>)
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e001      	b.n	8001186 <HAL_ADC_Init+0x1ba>
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_ADC_Init+0x1da>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x1da>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_ADC_Init+0x1dc>
 80011a6:	2300      	movs	r3, #0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d11c      	bne.n	80011e6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011ac:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d010      	beq.n	80011d4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_ADC_Init+0x202>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Init+0x202>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_ADC_Init+0x204>
 80011ce:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d108      	bne.n	80011e6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7e5b      	ldrb	r3, [r3, #25]
 80011ea:	035b      	lsls	r3, r3, #13
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011f0:	2a01      	cmp	r2, #1
 80011f2:	d002      	beq.n	80011fa <HAL_ADC_Init+0x22e>
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	e000      	b.n	80011fc <HAL_ADC_Init+0x230>
 80011fa:	2200      	movs	r2, #0
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4313      	orrs	r3, r2
 800120a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800120c:	4313      	orrs	r3, r2
 800120e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d11b      	bne.n	8001252 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	3b01      	subs	r3, #1
 8001228:	045a      	lsls	r2, r3, #17
 800122a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800122c:	4313      	orrs	r3, r2
 800122e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
 8001234:	e00d      	b.n	8001252 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	2b01      	cmp	r3, #1
 8001258:	d054      	beq.n	8001304 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_ADC_Init+0x31c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d004      	beq.n	800126e <HAL_ADC_Init+0x2a2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_ADC_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d140      	bne.n	80012f0 <HAL_ADC_Init+0x324>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001276:	d02a      	beq.n	80012ce <HAL_ADC_Init+0x302>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001280:	d022      	beq.n	80012c8 <HAL_ADC_Init+0x2fc>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800128a:	d01a      	beq.n	80012c2 <HAL_ADC_Init+0x2f6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001294:	d012      	beq.n	80012bc <HAL_ADC_Init+0x2f0>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800129e:	d00a      	beq.n	80012b6 <HAL_ADC_Init+0x2ea>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80012a8:	d002      	beq.n	80012b0 <HAL_ADC_Init+0x2e4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	e023      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012b4:	e020      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012ba:	e01d      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	e017      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012cc:	e014      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012d2:	e011      	b.n	80012f8 <HAL_ADC_Init+0x32c>
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	50000100 	.word	0x50000100
 80012e0:	50000300 	.word	0x50000300
 80012e4:	50000700 	.word	0x50000700
 80012e8:	50000400 	.word	0x50000400
 80012ec:	50000500 	.word	0x50000500
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012fc:	4313      	orrs	r3, r2
 80012fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001300:	4313      	orrs	r3, r2
 8001302:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d114      	bne.n	800133c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001320:	f023 0302 	bic.w	r3, r3, #2
 8001324:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7e1b      	ldrb	r3, [r3, #24]
 800132a:	039a      	lsls	r2, r3, #14
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4313      	orrs	r3, r2
 8001336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001338:	4313      	orrs	r3, r2
 800133a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_ADC_Init+0x3f0>)
 8001344:	4013      	ands	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800134c:	430b      	orrs	r3, r1
 800134e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10c      	bne.n	8001372 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f023 010f 	bic.w	r1, r3, #15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	e007      	b.n	8001382 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020f 	bic.w	r2, r2, #15
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f023 0303 	bic.w	r3, r3, #3
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
 8001398:	e00a      	b.n	80013b0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f023 0312 	bic.w	r3, r3, #18
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3768      	adds	r7, #104	; 0x68
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	fff0c007 	.word	0xfff0c007

080013c0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8123 	bne.w	8001622 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start_IT+0x2a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e11e      	b.n	8001628 <HAL_ADC_Start_IT+0x268>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f001 f844 	bl	8002480 <ADC_Enable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 810a 	bne.w	8001618 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001420:	d004      	beq.n	800142c <HAL_ADC_Start_IT+0x6c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a82      	ldr	r2, [pc, #520]	; (8001630 <HAL_ADC_Start_IT+0x270>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d106      	bne.n	800143a <HAL_ADC_Start_IT+0x7a>
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_ADC_Start_IT+0x274>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <HAL_ADC_Start_IT+0x9a>
 8001438:	e005      	b.n	8001446 <HAL_ADC_Start_IT+0x86>
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_ADC_Start_IT+0x278>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_ADC_Start_IT+0x9a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144e:	d004      	beq.n	800145a <HAL_ADC_Start_IT+0x9a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a79      	ldr	r2, [pc, #484]	; (800163c <HAL_ADC_Start_IT+0x27c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d115      	bne.n	8001486 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d036      	beq.n	80014e2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001484:	e02d      	b.n	80014e2 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149a:	d004      	beq.n	80014a6 <HAL_ADC_Start_IT+0xe6>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a63      	ldr	r2, [pc, #396]	; (8001630 <HAL_ADC_Start_IT+0x270>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10a      	bne.n	80014bc <HAL_ADC_Start_IT+0xfc>
 80014a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e008      	b.n	80014ce <HAL_ADC_Start_IT+0x10e>
 80014bc:	4b5f      	ldr	r3, [pc, #380]	; (800163c <HAL_ADC_Start_IT+0x27c>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ee:	d106      	bne.n	80014fe <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f023 0206 	bic.w	r2, r3, #6
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
 80014fc:	e002      	b.n	8001504 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	221c      	movs	r2, #28
 8001512:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	2b08      	cmp	r3, #8
 800151a:	d110      	bne.n	800153e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	605a      	str	r2, [r3, #4]
          break;
 800153c:	e008      	b.n	8001550 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 020c 	orr.w	r2, r2, #12
 800154c:	605a      	str	r2, [r3, #4]
          break;
 800154e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0210 	bic.w	r2, r2, #16
 8001566:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001570:	d004      	beq.n	800157c <HAL_ADC_Start_IT+0x1bc>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <HAL_ADC_Start_IT+0x270>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d106      	bne.n	800158a <HAL_ADC_Start_IT+0x1ca>
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_ADC_Start_IT+0x274>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03e      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 8001588:	e005      	b.n	8001596 <HAL_ADC_Start_IT+0x1d6>
 800158a:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_ADC_Start_IT+0x278>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2b00      	cmp	r3, #0
 8001594:	d037      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Start_IT+0x1ea>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_ADC_Start_IT+0x270>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d106      	bne.n	80015b8 <HAL_ADC_Start_IT+0x1f8>
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_ADC_Start_IT+0x274>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d027      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 80015b6:	e005      	b.n	80015c4 <HAL_ADC_Start_IT+0x204>
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_ADC_Start_IT+0x278>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d020      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_Start_IT+0x218>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_ADC_Start_IT+0x270>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <HAL_ADC_Start_IT+0x226>
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_ADC_Start_IT+0x274>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d010      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 80015e4:	e005      	b.n	80015f2 <HAL_ADC_Start_IT+0x232>
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_ADC_Start_IT+0x278>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2b09      	cmp	r3, #9
 80015f0:	d009      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_Start_IT+0x246>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_ADC_Start_IT+0x27c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10f      	bne.n	8001626 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0204 	orr.w	r2, r2, #4
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e006      	b.n	8001626 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001620:	e001      	b.n	8001626 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	50000100 	.word	0x50000100
 8001634:	50000300 	.word	0x50000300
 8001638:	50000700 	.word	0x50000700
 800163c:	50000400 	.word	0x50000400

08001640 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b04      	cmp	r3, #4
 800167c:	d106      	bne.n	800168c <HAL_ADC_IRQHandler+0x30>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b04      	cmp	r3, #4
 800168a:	d00f      	beq.n	80016ac <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001696:	2b08      	cmp	r3, #8
 8001698:	f040 80c0 	bne.w	800181c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	f040 80b8 	bne.w	800181c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x7c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a95      	ldr	r2, [pc, #596]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d106      	bne.n	80016e6 <HAL_ADC_IRQHandler+0x8a>
 80016d8:	4b94      	ldr	r3, [pc, #592]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d03e      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 80016e4:	e005      	b.n	80016f2 <HAL_ADC_IRQHandler+0x96>
 80016e6:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d037      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fa:	d004      	beq.n	8001706 <HAL_ADC_IRQHandler+0xaa>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a89      	ldr	r2, [pc, #548]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d106      	bne.n	8001714 <HAL_ADC_IRQHandler+0xb8>
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2b05      	cmp	r3, #5
 8001710:	d027      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 8001712:	e005      	b.n	8001720 <HAL_ADC_IRQHandler+0xc4>
 8001714:	4b86      	ldr	r3, [pc, #536]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2b05      	cmp	r3, #5
 800171e:	d020      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001728:	d004      	beq.n	8001734 <HAL_ADC_IRQHandler+0xd8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7e      	ldr	r2, [pc, #504]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d106      	bne.n	8001742 <HAL_ADC_IRQHandler+0xe6>
 8001734:	4b7d      	ldr	r3, [pc, #500]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2b09      	cmp	r3, #9
 800173e:	d010      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 8001740:	e005      	b.n	800174e <HAL_ADC_IRQHandler+0xf2>
 8001742:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2b09      	cmp	r3, #9
 800174c:	d009      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001756:	d004      	beq.n	8001762 <HAL_ADC_IRQHandler+0x106>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a75      	ldr	r2, [pc, #468]	; (8001934 <HAL_ADC_IRQHandler+0x2d8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d104      	bne.n	800176c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e00f      	b.n	800178c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001774:	d004      	beq.n	8001780 <HAL_ADC_IRQHandler+0x124>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6b      	ldr	r2, [pc, #428]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d102      	bne.n	8001786 <HAL_ADC_IRQHandler+0x12a>
 8001780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001784:	e000      	b.n	8001788 <HAL_ADC_IRQHandler+0x12c>
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <HAL_ADC_IRQHandler+0x2d8>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001796:	2b00      	cmp	r3, #0
 8001798:	d139      	bne.n	800180e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d134      	bne.n	800180e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d12d      	bne.n	800180e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d11a      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020c 	bic.w	r2, r2, #12
 80017ce:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d112      	bne.n	800180e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	e00b      	b.n	800180e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f043 0210 	orr.w	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fa4a 	bl	8000ca8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	220c      	movs	r2, #12
 800181a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b20      	cmp	r3, #32
 8001828:	d106      	bne.n	8001838 <HAL_ADC_IRQHandler+0x1dc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b20      	cmp	r3, #32
 8001836:	d00f      	beq.n	8001858 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001842:	2b40      	cmp	r3, #64	; 0x40
 8001844:	f040 813c 	bne.w	8001ac0 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	f040 8134 	bne.w	8001ac0 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186c:	d004      	beq.n	8001878 <HAL_ADC_IRQHandler+0x21c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d106      	bne.n	8001886 <HAL_ADC_IRQHandler+0x22a>
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2b00      	cmp	r3, #0
 8001882:	d03e      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 8001884:	e005      	b.n	8001892 <HAL_ADC_IRQHandler+0x236>
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2b00      	cmp	r3, #0
 8001890:	d037      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x24a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d106      	bne.n	80018b4 <HAL_ADC_IRQHandler+0x258>
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d027      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 80018b2:	e005      	b.n	80018c0 <HAL_ADC_IRQHandler+0x264>
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d020      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c8:	d004      	beq.n	80018d4 <HAL_ADC_IRQHandler+0x278>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d106      	bne.n	80018e2 <HAL_ADC_IRQHandler+0x286>
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_ADC_IRQHandler+0x2d0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d010      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 80018e0:	e005      	b.n	80018ee <HAL_ADC_IRQHandler+0x292>
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_ADC_IRQHandler+0x2d4>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	d009      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d004      	beq.n	8001902 <HAL_ADC_IRQHandler+0x2a6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_ADC_IRQHandler+0x2d8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d104      	bne.n	800190c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	e018      	b.n	800193e <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001914:	d004      	beq.n	8001920 <HAL_ADC_IRQHandler+0x2c4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_ADC_IRQHandler+0x2cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_IRQHandler+0x2dc>
 8001920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001924:	e009      	b.n	800193a <HAL_ADC_IRQHandler+0x2de>
 8001926:	bf00      	nop
 8001928:	50000100 	.word	0x50000100
 800192c:	50000300 	.word	0x50000300
 8001930:	50000700 	.word	0x50000700
 8001934:	50000400 	.word	0x50000400
 8001938:	4b9d      	ldr	r3, [pc, #628]	; (8001bb0 <HAL_ADC_IRQHandler+0x554>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 80b2 	bne.w	8001ab2 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80a5 	bne.w	8001ab2 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 809f 	bne.w	8001ab2 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	f040 8097 	bne.w	8001ab2 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198c:	d004      	beq.n	8001998 <HAL_ADC_IRQHandler+0x33c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a88      	ldr	r2, [pc, #544]	; (8001bb4 <HAL_ADC_IRQHandler+0x558>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x34a>
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HAL_ADC_IRQHandler+0x55c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03e      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 80019a4:	e005      	b.n	80019b2 <HAL_ADC_IRQHandler+0x356>
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <HAL_ADC_IRQHandler+0x560>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d037      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ba:	d004      	beq.n	80019c6 <HAL_ADC_IRQHandler+0x36a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_ADC_IRQHandler+0x558>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d106      	bne.n	80019d4 <HAL_ADC_IRQHandler+0x378>
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_ADC_IRQHandler+0x55c>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d027      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 80019d2:	e005      	b.n	80019e0 <HAL_ADC_IRQHandler+0x384>
 80019d4:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <HAL_ADC_IRQHandler+0x560>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d020      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e8:	d004      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x398>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a71      	ldr	r2, [pc, #452]	; (8001bb4 <HAL_ADC_IRQHandler+0x558>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d106      	bne.n	8001a02 <HAL_ADC_IRQHandler+0x3a6>
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_ADC_IRQHandler+0x55c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d010      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 8001a00:	e005      	b.n	8001a0e <HAL_ADC_IRQHandler+0x3b2>
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <HAL_ADC_IRQHandler+0x560>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	d009      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x3c6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <HAL_ADC_IRQHandler+0x554>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d104      	bne.n	8001a2c <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e00f      	b.n	8001a4c <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x3e4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_ADC_IRQHandler+0x558>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d102      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x3ea>
 8001a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_IRQHandler+0x3ec>
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_ADC_IRQHandler+0x554>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12d      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11a      	bne.n	8001a9a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a72:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d112      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
 8001a98:	e00b      	b.n	8001ab2 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8de 	bl	8001c74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2260      	movs	r2, #96	; 0x60
 8001abe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d113      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x49a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b80      	cmp	r3, #128	; 0x80
 8001ada:	d10c      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fa5b 	bl	8000fa4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d115      	bne.n	8001b32 <HAL_ADC_IRQHandler+0x4d6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b14:	d10d      	bne.n	8001b32 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8ba 	bl	8001c9c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b30:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b40:	d115      	bne.n	8001b6e <HAL_ADC_IRQHandler+0x512>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b50:	d10d      	bne.n	8001b6e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8a6 	bl	8001cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d151      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x5c4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d14a      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e02d      	b.n	8001bf4 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba0:	d004      	beq.n	8001bac <HAL_ADC_IRQHandler+0x550>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <HAL_ADC_IRQHandler+0x558>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x564>
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_ADC_IRQHandler+0x55c>)
 8001bae:	e008      	b.n	8001bc2 <HAL_ADC_IRQHandler+0x566>
 8001bb0:	50000400 	.word	0x50000400
 8001bb4:	50000100 	.word	0x50000100
 8001bb8:	50000300 	.word	0x50000300
 8001bbc:	50000700 	.word	0x50000700
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_ADC_IRQHandler+0x614>)
 8001bc2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e007      	b.n	8001bf4 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10e      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff f9d0 	bl	8000fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2e:	d11b      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x60c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d113      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f043 0208 	orr.w	r2, r3, #8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f810 	bl	8001c88 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	50000700 	.word	0x50000700

08001c74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b09b      	sub	sp, #108	; 0x6c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x22>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e2cb      	b.n	800227e <HAL_ADC_ConfigChannel+0x5ba>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 82af 	bne.w	800225c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d81c      	bhi.n	8001d40 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	231f      	movs	r3, #31
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4019      	ands	r1, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	e063      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d81e      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3b1e      	subs	r3, #30
 8001d5c:	221f      	movs	r2, #31
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4019      	ands	r1, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	3b1e      	subs	r3, #30
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
 8001d84:	e040      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b0e      	cmp	r3, #14
 8001d8c:	d81e      	bhi.n	8001dcc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3b3c      	subs	r3, #60	; 0x3c
 8001da2:	221f      	movs	r2, #31
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4019      	ands	r1, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	3b3c      	subs	r3, #60	; 0x3c
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dca:	e01d      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	3b5a      	subs	r3, #90	; 0x5a
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4019      	ands	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	3b5a      	subs	r3, #90	; 0x5a
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80e5 	bne.w	8001fe2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d91c      	bls.n	8001e5a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6999      	ldr	r1, [r3, #24]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6898      	ldr	r0, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1e      	subs	r3, #30
 8001e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	619a      	str	r2, [r3, #24]
 8001e58:	e019      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6959      	ldr	r1, [r3, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4019      	ands	r1, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d84f      	bhi.n	8001f50 <HAL_ADC_ConfigChannel+0x28c>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001eeb 	.word	0x08001eeb
 8001ec0:	08001f0d 	.word	0x08001f0d
 8001ec4:	08001f2f 	.word	0x08001f2f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ece:	4b9f      	ldr	r3, [pc, #636]	; (800214c <HAL_ADC_ConfigChannel+0x488>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	0691      	lsls	r1, r2, #26
 8001ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eda:	430a      	orrs	r2, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ee6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ee8:	e07e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ef0:	4b96      	ldr	r3, [pc, #600]	; (800214c <HAL_ADC_ConfigChannel+0x488>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	0691      	lsls	r1, r2, #26
 8001efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001efc:	430a      	orrs	r2, r1
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f08:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f0a:	e06d      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f12:	4b8e      	ldr	r3, [pc, #568]	; (800214c <HAL_ADC_ConfigChannel+0x488>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	0691      	lsls	r1, r2, #26
 8001f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f2a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f2c:	e05c      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f34:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_ADC_ConfigChannel+0x488>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	0691      	lsls	r1, r2, #26
 8001f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f40:	430a      	orrs	r2, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f4c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f4e:	e04b      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f72:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	069b      	lsls	r3, r3, #26
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f96:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	069b      	lsls	r3, r3, #26
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fe0:	e001      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001fe6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x344>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x344>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_ADC_ConfigChannel+0x346>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 8131 	bne.w	8002272 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d00f      	beq.n	8002038 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002036:	e049      	b.n	80020cc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	409a      	lsls	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b09      	cmp	r3, #9
 8002058:	d91c      	bls.n	8002094 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6999      	ldr	r1, [r3, #24]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	3b1b      	subs	r3, #27
 800206c:	2207      	movs	r2, #7
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	4019      	ands	r1, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6898      	ldr	r0, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1b      	subs	r3, #27
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	619a      	str	r2, [r3, #24]
 8002092:	e01b      	b.n	80020cc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	2207      	movs	r2, #7
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6898      	ldr	r0, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	fa00 f203 	lsl.w	r2, r0, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x41c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_ADC_ConfigChannel+0x48c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x420>
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_ADC_ConfigChannel+0x490>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x422>
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_ADC_ConfigChannel+0x494>)
 80020e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002100:	2b11      	cmp	r3, #17
 8002102:	d105      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002114:	2b12      	cmp	r3, #18
 8002116:	f040 80ac 	bne.w	8002272 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800211a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80a5 	bne.w	8002272 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d102      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x474>
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_ADC_ConfigChannel+0x48c>)
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e023      	b.n	8002180 <HAL_ADC_ConfigChannel+0x4bc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_ADC_ConfigChannel+0x48c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10c      	bne.n	800215c <HAL_ADC_ConfigChannel+0x498>
 8002142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e01a      	b.n	8002180 <HAL_ADC_ConfigChannel+0x4bc>
 800214a:	bf00      	nop
 800214c:	83fff000 	.word	0x83fff000
 8002150:	50000100 	.word	0x50000100
 8002154:	50000300 	.word	0x50000300
 8002158:	50000700 	.word	0x50000700
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4a      	ldr	r2, [pc, #296]	; (800228c <HAL_ADC_ConfigChannel+0x5c8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d102      	bne.n	800216c <HAL_ADC_ConfigChannel+0x4a8>
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_ADC_ConfigChannel+0x5cc>)
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e009      	b.n	8002180 <HAL_ADC_ConfigChannel+0x4bc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a47      	ldr	r2, [pc, #284]	; (8002290 <HAL_ADC_ConfigChannel+0x5cc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d102      	bne.n	800217c <HAL_ADC_ConfigChannel+0x4b8>
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_ADC_ConfigChannel+0x5c8>)
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e001      	b.n	8002180 <HAL_ADC_ConfigChannel+0x4bc>
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x4dc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x4dc>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x4de>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d150      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x504>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x504>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_ADC_ConfigChannel+0x506>
 80021c8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d13c      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d11d      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x54e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021de:	d118      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_ADC_ConfigChannel+0x5d0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <HAL_ADC_ConfigChannel+0x5d4>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002202:	e002      	b.n	800220a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3b01      	subs	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002210:	e02e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b11      	cmp	r3, #17
 8002218:	d10b      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x56e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002222:	d106      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800222c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002230:	e01e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d11a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800223a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002244:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002246:	e013      	b.n	8002270 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800225a:	e00a      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002270:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800227a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800227e:	4618      	mov	r0, r3
 8002280:	376c      	adds	r7, #108	; 0x6c
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	50000400 	.word	0x50000400
 8002290:	50000500 	.word	0x50000500
 8002294:	20000000 	.word	0x20000000
 8002298:	431bde83 	.word	0x431bde83

0800229c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800229c:	b480      	push	{r7}
 800229e:	b099      	sub	sp, #100	; 0x64
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b4:	d102      	bne.n	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	e01a      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d103      	bne.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80022c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	e011      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d102      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022d8:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	e009      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	e001      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b0      	b.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002306:	2302      	movs	r3, #2
 8002308:	e0a9      	b.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 808d 	bne.w	800243c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8086 	bne.w	800243c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002338:	d004      	beq.n	8002344 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002346:	e000      	b.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800234a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d040      	beq.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002366:	035b      	lsls	r3, r3, #13
 8002368:	430b      	orrs	r3, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800236e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d15c      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d14b      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023c0:	f023 030f 	bic.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	6811      	ldr	r1, [r2, #0]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6892      	ldr	r2, [r2, #8]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d4:	e03c      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d123      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002424:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	d112      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800242a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002432:	f023 030f 	bic.w	r3, r3, #15
 8002436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002438:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800243a:	e009      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800244e:	e000      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002450:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800245a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800245e:	4618      	mov	r0, r3
 8002460:	3764      	adds	r7, #100	; 0x64
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	50000100 	.word	0x50000100
 8002470:	50000400 	.word	0x50000400
 8002474:	50000500 	.word	0x50000500
 8002478:	50000300 	.word	0x50000300
 800247c:	50000700 	.word	0x50000700

08002480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <ADC_Enable+0x2c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <ADC_Enable+0x2c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <ADC_Enable+0x2e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d13c      	bne.n	800252c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <ADC_Enable+0xb8>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e028      	b.n	800252e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024ec:	f7fe fd4e 	bl	8000f8c <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f2:	e014      	b.n	800251e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024f4:	f7fe fd4a 	bl	8000f8c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d90d      	bls.n	800251e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e007      	b.n	800252e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d1e3      	bne.n	80024f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	8000003f 	.word	0x8000003f

0800253c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <ADC_Disable+0x2c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <ADC_Disable+0x2c>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <ADC_Disable+0x2e>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d040      	beq.n	80025f0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030d 	and.w	r3, r3, #13
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10f      	bne.n	800259c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0202 	orr.w	r2, r2, #2
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2203      	movs	r2, #3
 8002592:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002594:	f7fe fcfa 	bl	8000f8c <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800259a:	e022      	b.n	80025e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01c      	b.n	80025f2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025b8:	f7fe fce8 	bl	8000f8c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d90d      	bls.n	80025e2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e007      	b.n	80025f2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d0e3      	beq.n	80025b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff29 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff3e 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff31 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa2 	bl	8002758 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e160      	b.n	8002af2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8152 	beq.w	8002aec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d00b      	beq.n	8002868 <HAL_GPIO_Init+0x48>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285c:	2b11      	cmp	r3, #17
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0201 	and.w	r2, r3, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0xea>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b12      	cmp	r3, #18
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ac 	beq.w	8002aec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a5d      	ldr	r2, [pc, #372]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a59      	ldr	r2, [pc, #356]	; (8002b14 <HAL_GPIO_Init+0x2f4>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d6:	d025      	beq.n	8002a24 <HAL_GPIO_Init+0x204>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_GPIO_Init+0x2f8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01f      	beq.n	8002a20 <HAL_GPIO_Init+0x200>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_GPIO_Init+0x2fc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d019      	beq.n	8002a1c <HAL_GPIO_Init+0x1fc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x300>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1f8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_GPIO_Init+0x304>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1f4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_GPIO_Init+0x308>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1f0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1ec>
 8002a08:	2306      	movs	r3, #6
 8002a0a:	e00c      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	e00a      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a10:	2305      	movs	r3, #5
 8002a12:	e008      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e004      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e002      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_GPIO_Init+0x206>
 8002a24:	2300      	movs	r3, #0
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	f002 0203 	and.w	r2, r2, #3
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a36:	4937      	ldr	r1, [pc, #220]	; (8002b14 <HAL_GPIO_Init+0x2f4>)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a68:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a92:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f ae97 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010000 	.word	0x40010000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	48000c00 	.word	0x48000c00
 8002b24:	48001000 	.word	0x48001000
 8002b28:	48001400 	.word	0x48001400
 8002b2c:	48001800 	.word	0x48001800
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f000 bf01 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8160 	beq.w	8002e4e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b8e:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b9a:	4bab      	ldr	r3, [pc, #684]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d159      	bne.n	8002c5a <HAL_RCC_OscConfig+0xf6>
 8002ba6:	4ba8      	ldr	r3, [pc, #672]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d152      	bne.n	8002c5a <HAL_RCC_OscConfig+0xf6>
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x82>
 8002be0:	4b99      	ldr	r3, [pc, #612]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0xae>
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c0e:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c16:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002c1a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002c26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8102 	beq.w	8002e4c <HAL_RCC_OscConfig+0x2e8>
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 80fc 	bne.w	8002e4c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f000 be93 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x110>
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e030      	b.n	8002cd6 <HAL_RCC_OscConfig+0x172>
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x134>
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a71      	ldr	r2, [pc, #452]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01e      	b.n	8002cd6 <HAL_RCC_OscConfig+0x172>
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x15a>
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x172>
 8002cbe:	4b62      	ldr	r3, [pc, #392]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b5f      	ldr	r3, [pc, #380]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5e      	ldr	r2, [pc, #376]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d059      	beq.n	8002d94 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f954 	bl	8000f8c <HAL_GetTick>
 8002ce4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cea:	f7fe f94f 	bl	8000f8c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	f000 be40 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
 8002d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002d14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0x1ce>
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x1fa>
 8002d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d6a:	fa92 f2a2 	rbit	r2, r2
 8002d6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ab      	beq.n	8002cea <HAL_RCC_OscConfig+0x186>
 8002d92:	e05c      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe f8fa 	bl	8000f8c <HAL_GetTick>
 8002d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f8f5 	bl	8000f8c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d902      	bls.n	8002db4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f000 bde6 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
 8002db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002dc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x282>
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x2ae>
 8002de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_RCC_OscConfig+0x2e4>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002e1a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002e26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ab      	bne.n	8002d9e <HAL_RCC_OscConfig+0x23a>
 8002e46:	e002      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8170 	beq.w	800313e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e5e:	4bd0      	ldr	r3, [pc, #832]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e6a:	4bcd      	ldr	r3, [pc, #820]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d16d      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3ee>
 8002e76:	4bca      	ldr	r3, [pc, #808]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e82:	d166      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3ee>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x350>
 8002eae:	4bbc      	ldr	r3, [pc, #752]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	e013      	b.n	8002edc <HAL_RCC_OscConfig+0x378>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ecc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ed8:	4bb1      	ldr	r3, [pc, #708]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2202      	movs	r2, #2
 8002ede:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002ee2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ee6:	fa92 f2a2 	rbit	r2, r2
 8002eea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002eee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ef2:	fab2 f282 	clz	r2, r2
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f042 0220 	orr.w	r2, r2, #32
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f002 021f 	and.w	r2, r2, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3ba>
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f000 bd31 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4ba0      	ldr	r3, [pc, #640]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	21f8      	movs	r1, #248	; 0xf8
 8002f2e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002f36:	fa91 f1a1 	rbit	r1, r1
 8002f3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002f3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f42:	fab1 f181 	clz	r1, r1
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	408b      	lsls	r3, r1
 8002f4a:	4995      	ldr	r1, [pc, #596]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f50:	e0f5      	b.n	800313e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8085 	beq.w	8003068 <HAL_RCC_OscConfig+0x504>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	461a      	mov	r2, r3
 8002f86:	2301      	movs	r3, #1
 8002f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fd ffff 	bl	8000f8c <HAL_GetTick>
 8002f8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fd fffa 	bl	8000f8c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f000 bceb 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
 8002faa:	2302      	movs	r3, #2
 8002fac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002fbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_OscConfig+0x476>
 8002fd4:	4b72      	ldr	r3, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	e013      	b.n	8003002 <HAL_RCC_OscConfig+0x49e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ff2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ffe:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2202      	movs	r2, #2
 8003004:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003008:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003014:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f002 021f 	and.w	r2, r2, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0af      	beq.n	8002f94 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	21f8      	movs	r1, #248	; 0xf8
 8003044:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800304c:	fa91 f1a1 	rbit	r1, r1
 8003050:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003054:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003058:	fab1 f181 	clz	r1, r1
 800305c:	b2c9      	uxtb	r1, r1
 800305e:	408b      	lsls	r3, r1
 8003060:	494f      	ldr	r1, [pc, #316]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
 8003066:	e06a      	b.n	800313e <HAL_RCC_OscConfig+0x5da>
 8003068:	2301      	movs	r3, #1
 800306a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800307a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fd ff7a 	bl	8000f8c <HAL_GetTick>
 8003098:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309e:	f7fd ff75 	bl	8000f8c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	f000 bc66 	b.w	8003980 <HAL_RCC_OscConfig+0xe1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80030c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0x580>
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e013      	b.n	800310c <HAL_RCC_OscConfig+0x5a8>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_OscConfig+0x63c>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2202      	movs	r2, #2
 800310e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003112:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003116:	fa92 f2a2 	rbit	r2, r2
 800311a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800311e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003122:	fab2 f282 	clz	r2, r2
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	f002 021f 	and.w	r2, r2, #31
 8003132:	2101      	movs	r1, #1
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1af      	bne.n	800309e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80da 	beq.w	8003302 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d069      	beq.n	800322c <HAL_RCC_OscConfig+0x6c8>
 8003158:	2301      	movs	r3, #1
 800315a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800316a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x640>)
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	461a      	mov	r2, r3
 800317e:	2301      	movs	r3, #1
 8003180:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fd ff03 	bl	8000f8c <HAL_GetTick>
 8003186:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e00d      	b.n	80031a8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fd fefe 	bl	8000f8c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d905      	bls.n	80031a8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e3ef      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	10908120 	.word	0x10908120
 80031a8:	2302      	movs	r3, #2
 80031aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80031ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ec:	4ba4      	ldr	r3, [pc, #656]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80031ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80031f4:	2102      	movs	r1, #2
 80031f6:	6019      	str	r1, [r3, #0]
 80031f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f1a3 	rbit	r1, r3
 8003202:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003206:	6019      	str	r1, [r3, #0]
  return result;
 8003208:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0b0      	beq.n	800318c <HAL_RCC_OscConfig+0x628>
 800322a:	e06a      	b.n	8003302 <HAL_RCC_OscConfig+0x79e>
 800322c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003242:	601a      	str	r2, [r3, #0]
  return result;
 8003244:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003248:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x920>)
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fd fe95 	bl	8000f8c <HAL_GetTick>
 8003262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003266:	e009      	b.n	800327c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fd fe90 	bl	8000f8c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e381      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 800327c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003280:	2202      	movs	r2, #2
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003298:	2202      	movs	r2, #2
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032b0:	2202      	movs	r2, #2
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	fa93 f2a3 	rbit	r2, r3
 80032be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032cc:	2102      	movs	r1, #2
 80032ce:	6019      	str	r1, [r3, #0]
 80032d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f1a3 	rbit	r1, r3
 80032da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032de:	6019      	str	r1, [r3, #0]
  return result;
 80032e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1b2      	bne.n	8003268 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8157 	beq.w	80035c0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d112      	bne.n	800334a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4a55      	ldr	r2, [pc, #340]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332e:	61d3      	str	r3, [r2, #28]
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b4f      	ldr	r3, [pc, #316]	; (8003488 <HAL_RCC_OscConfig+0x924>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <HAL_RCC_OscConfig+0x924>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_RCC_OscConfig+0x924>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fd fe13 	bl	8000f8c <HAL_GetTick>
 8003366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e009      	b.n	8003380 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fd fe0e 	bl	8000f8c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e2ff      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_OscConfig+0x924>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x840>
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	e02f      	b.n	8003404 <HAL_RCC_OscConfig+0x8a0>
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x864>
 80033ae:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a30      	ldr	r2, [pc, #192]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0x8a0>
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x888>
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a2a      	ldr	r2, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x8a0>
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6213      	str	r3, [r2, #32]
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d06a      	beq.n	80034e4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fd fdbd 	bl	8000f8c <HAL_GetTick>
 8003412:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fd fdb8 	bl	8000f8c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e2a7      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 8003430:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003434:	2202      	movs	r2, #2
 8003436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800345e:	601a      	str	r2, [r3, #0]
  return result;
 8003460:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003464:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d108      	bne.n	800348c <HAL_RCC_OscConfig+0x928>
 800347a:	4b01      	ldr	r3, [pc, #4]	; (8003480 <HAL_RCC_OscConfig+0x91c>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	e013      	b.n	80034a8 <HAL_RCC_OscConfig+0x944>
 8003480:	40021000 	.word	0x40021000
 8003484:	10908120 	.word	0x10908120
 8003488:	40007000 	.word	0x40007000
 800348c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003490:	2202      	movs	r2, #2
 8003492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	4bc0      	ldr	r3, [pc, #768]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80034ac:	2102      	movs	r1, #2
 80034ae:	6011      	str	r1, [r2, #0]
 80034b0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	fa92 f1a2 	rbit	r1, r2
 80034ba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034be:	6011      	str	r1, [r2, #0]
  return result;
 80034c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f002 021f 	and.w	r2, r2, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d09a      	beq.n	8003418 <HAL_RCC_OscConfig+0x8b4>
 80034e2:	e063      	b.n	80035ac <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fd fd52 	bl	8000f8c <HAL_GetTick>
 80034e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd fd4d 	bl	8000f8c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e23c      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 8003506:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800350a:	2202      	movs	r2, #2
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003534:	601a      	str	r2, [r3, #0]
  return result;
 8003536:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800353a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d102      	bne.n	8003556 <HAL_RCC_OscConfig+0x9f2>
 8003550:	4b95      	ldr	r3, [pc, #596]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	e00d      	b.n	8003572 <HAL_RCC_OscConfig+0xa0e>
 8003556:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800355a:	2202      	movs	r2, #2
 800355c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	fa93 f2a3 	rbit	r2, r3
 8003568:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003576:	2102      	movs	r1, #2
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	fa92 f1a2 	rbit	r1, r2
 8003584:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003588:	6011      	str	r1, [r2, #0]
  return result;
 800358a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1a0      	bne.n	80034ee <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 81d9 	beq.w	800397e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035cc:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	f000 81a6 	beq.w	8003926 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	f040 811e 	bne.w	8003822 <HAL_RCC_OscConfig+0xcbe>
 80035e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80035ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035fe:	601a      	str	r2, [r3, #0]
  return result;
 8003600:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003604:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fd fcb6 	bl	8000f8c <HAL_GetTick>
 8003620:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	e009      	b.n	800363a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003626:	f7fd fcb1 	bl	8000f8c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1a2      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 800363a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800363e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003652:	601a      	str	r2, [r3, #0]
  return result;
 8003654:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_RCC_OscConfig+0xb10>
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0xb48>
 8003674:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80036b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	fa92 f1a2 	rbit	r1, r2
 80036c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036c4:	6011      	str	r1, [r2, #0]
  return result;
 80036c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d19e      	bne.n	8003626 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f023 020f 	bic.w	r2, r3, #15
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a19      	ldr	r1, [r3, #32]
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	430b      	orrs	r3, r1
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
 8003718:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800371c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003730:	601a      	str	r2, [r3, #0]
  return result;
 8003732:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003736:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003742:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fd fc1d 	bl	8000f8c <HAL_GetTick>
 8003752:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003756:	e009      	b.n	800376c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd fc18 	bl	8000f8c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e109      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 800376c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003784:	601a      	str	r2, [r3, #0]
  return result;
 8003786:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800378a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <HAL_RCC_OscConfig+0xc48>
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <HAL_RCC_OscConfig+0xc44>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	e01e      	b.n	80037e4 <HAL_RCC_OscConfig+0xc80>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0xe28>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80037e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037ec:	6011      	str	r1, [r2, #0]
 80037ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	fa92 f1a2 	rbit	r1, r2
 80037f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037fc:	6011      	str	r1, [r2, #0]
  return result;
 80037fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d09b      	beq.n	8003758 <HAL_RCC_OscConfig+0xbf4>
 8003820:	e0ad      	b.n	800397e <HAL_RCC_OscConfig+0xe1a>
 8003822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003826:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800383a:	601a      	str	r2, [r3, #0]
  return result;
 800383c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003840:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd fb98 	bl	8000f8c <HAL_GetTick>
 800385c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	e009      	b.n	8003876 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fd fb93 	bl	8000f8c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e084      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
 8003876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_OscConfig+0xd4c>
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_RCC_OscConfig+0xe28>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e01b      	b.n	80038e8 <HAL_RCC_OscConfig+0xd84>
 80038b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f107 0320 	add.w	r3, r7, #32
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f107 031c 	add.w	r3, r7, #28
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f107 0318 	add.w	r3, r7, #24
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0xe28>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f107 0214 	add.w	r2, r7, #20
 80038ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	f107 0214 	add.w	r2, r7, #20
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fa92 f1a2 	rbit	r1, r2
 80038fc:	f107 0210 	add.w	r2, r7, #16
 8003900:	6011      	str	r1, [r2, #0]
  return result;
 8003902:	f107 0210 	add.w	r2, r7, #16
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f042 0220 	orr.w	r2, r2, #32
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f002 021f 	and.w	r2, r2, #31
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d19e      	bne.n	8003862 <HAL_RCC_OscConfig+0xcfe>
 8003924:	e02b      	b.n	800397e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e025      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0xe28>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCC_OscConfig+0xe28>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003944:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003948:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	429a      	cmp	r2, r3
 8003954:	d111      	bne.n	800397a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003956:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800395a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003964:	429a      	cmp	r2, r3
 8003966:	d108      	bne.n	800397a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396c:	f003 020f 	and.w	r2, r3, #15
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b09e      	sub	sp, #120	; 0x78
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e162      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b90      	ldr	r3, [pc, #576]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d910      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	498b      	ldr	r1, [pc, #556]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e14a      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	497f      	ldr	r1, [pc, #508]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80dc 	beq.w	8003bbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d13c      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xf6>
 8003a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xa6>
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	e00f      	b.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
 8003a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	667b      	str	r3, [r7, #100]	; 0x64
 8003a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a48:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a52:	4b67      	ldr	r3, [pc, #412]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f042 0220 	orr.w	r2, r2, #32
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f002 021f 	and.w	r2, r2, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d17b      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0f3      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d13c      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x178>
 8003a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x128>
 8003ab2:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e00f      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
 8003ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aca:	643b      	str	r3, [r7, #64]	; 0x40
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003adc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f042 0220 	orr.w	r2, r2, #32
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f002 021f 	and.w	r2, r2, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d13a      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0b2      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1a0>
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	e00d      	b.n	8003b4c <HAL_RCC_ClockConfig+0x1bc>
 8003b30:	2302      	movs	r3, #2
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	61ba      	str	r2, [r7, #24]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	fa92 f2a2 	rbit	r2, r2
 8003b56:	617a      	str	r2, [r7, #20]
  return result;
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f042 0220 	orr.w	r2, r2, #32
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f002 021f 	and.w	r2, r2, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e079      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f023 0203 	bic.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b8c:	f7fd f9fe 	bl	8000f8c <HAL_GetTick>
 8003b90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b94:	f7fd f9fa 	bl	8000f8c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e061      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 020c 	and.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1eb      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d214      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4906      	ldr	r1, [pc, #24]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e040      	b.n	8003c6e <HAL_RCC_ClockConfig+0x2de>
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCC_ClockConfig+0x2e8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	491a      	ldr	r1, [pc, #104]	; (8003c78 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x2e8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4912      	ldr	r1, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c32:	f000 f829 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c36:	4601      	mov	r1, r0
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCC_ClockConfig+0x2e8>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c40:	22f0      	movs	r2, #240	; 0xf0
 8003c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	fa92 f2a2 	rbit	r2, r2
 8003c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	fab2 f282 	clz	r2, r2
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	40d3      	lsrs	r3, r2
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x2ec>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_RCC_ClockConfig+0x2f0>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RCC_ClockConfig+0x2f4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f94c 	bl	8000f04 <HAL_InitTick>
  
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3778      	adds	r7, #120	; 0x78
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	0800420c 	.word	0x0800420c
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b08b      	sub	sp, #44	; 0x2c
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x36>
 8003cb6:	e03f      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cba:	623b      	str	r3, [r7, #32]
      break;
 8003cbc:	e03f      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	fa92 f2a2 	rbit	r2, r2
 8003cd0:	607a      	str	r2, [r7, #4]
  return result;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	fab2 f282 	clz	r2, r2
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	40d3      	lsrs	r3, r2
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	220f      	movs	r2, #15
 8003cec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	fa92 f2a2 	rbit	r2, r2
 8003cf4:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	fab2 f282 	clz	r2, r2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	40d3      	lsrs	r3, r2
 8003d00:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d10:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d20:	e007      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	623b      	str	r3, [r7, #32]
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	372c      	adds	r7, #44	; 0x2c
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	01e84800 	.word	0x01e84800
 8003d54:	0800421c 	.word	0x0800421c
 8003d58:	0800422c 	.word	0x0800422c
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b092      	sub	sp, #72	; 0x48
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80d4 	beq.w	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d84:	4b4e      	ldr	r3, [pc, #312]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10e      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	61d3      	str	r3, [r2, #28]
 8003d9c:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d118      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dba:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a41      	ldr	r2, [pc, #260]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd f8e1 	bl	8000f8c <HAL_GetTick>
 8003dca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fd f8dd 	bl	8000f8c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d901      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1d6      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8084 	beq.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d07c      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	461a      	mov	r2, r3
 8003e36:	2301      	movs	r3, #1
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d04b      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fd f88d 	bl	8000f8c <HAL_GetTick>
 8003e72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f889 	bl	8000f8c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e180      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
 8003e98:	2302      	movs	r3, #2
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d108      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003eba:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	e00d      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	10908100 	.word	0x10908100
 8003ecc:	2302      	movs	r3, #2
 8003ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	4ba0      	ldr	r3, [pc, #640]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2202      	movs	r2, #2
 8003ede:	613a      	str	r2, [r7, #16]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	fa92 f2a2 	rbit	r2, r2
 8003ee6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	fab2 f282 	clz	r2, r2
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f002 021f 	and.w	r2, r2, #31
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f202 	lsl.w	r2, r1, r2
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0b7      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f06:	4b95      	ldr	r3, [pc, #596]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4992      	ldr	r1, [pc, #584]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b8e      	ldr	r3, [pc, #568]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a8d      	ldr	r2, [pc, #564]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f023 0203 	bic.w	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4985      	ldr	r1, [pc, #532]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	497e      	ldr	r1, [pc, #504]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f74:	4b79      	ldr	r3, [pc, #484]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4976      	ldr	r1, [pc, #472]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f92:	4b72      	ldr	r3, [pc, #456]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f023 0210 	bic.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	496f      	ldr	r1, [pc, #444]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	4967      	ldr	r1, [pc, #412]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fce:	4b63      	ldr	r3, [pc, #396]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f023 0220 	bic.w	r2, r3, #32
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4960      	ldr	r1, [pc, #384]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fec:	4b5b      	ldr	r3, [pc, #364]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	4958      	ldr	r1, [pc, #352]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800400a:	4b54      	ldr	r3, [pc, #336]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	4951      	ldr	r1, [pc, #324]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004028:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4949      	ldr	r1, [pc, #292]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004046:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4942      	ldr	r1, [pc, #264]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004064:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	493a      	ldr	r1, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	4933      	ldr	r1, [pc, #204]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040a0:	4b2e      	ldr	r3, [pc, #184]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	492b      	ldr	r1, [pc, #172]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4924      	ldr	r1, [pc, #144]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	491c      	ldr	r1, [pc, #112]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	4915      	ldr	r1, [pc, #84]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	490d      	ldr	r1, [pc, #52]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004142:	4906      	ldr	r1, [pc, #24]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004154:	4b01      	ldr	r3, [pc, #4]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	e002      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800416a:	4313      	orrs	r3, r2
 800416c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004188:	4313      	orrs	r3, r2
 800418a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3748      	adds	r7, #72	; 0x48
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 f820 	bl	80041f4 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	0800423c 	.word	0x0800423c
 80041d8:	0800423c 	.word	0x0800423c
 80041dc:	0800423c 	.word	0x0800423c
 80041e0:	08004240 	.word	0x08004240

080041e4 <memset>:
 80041e4:	4402      	add	r2, r0
 80041e6:	4603      	mov	r3, r0
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	f803 1b01 	strb.w	r1, [r3], #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
