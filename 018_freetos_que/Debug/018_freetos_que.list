
018_freetos_que.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006184  08006184  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006184  08006184  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800618c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  20000074  08006200  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000112c  08006200  0002112c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e07  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310c  00000000  00000000  00035eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00038fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021da2  00000000  00000000  0003b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014539  00000000  00000000  0005cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d20c8  00000000  00000000  000714eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001435b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d6c  00000000  00000000  00143608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800607c 	.word	0x0800607c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800607c 	.word	0x0800607c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000090 	.word	0x20000090
 80002b0:	200000e4 	.word	0x200000e4

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b092      	sub	sp, #72	; 0x48
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fafb 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f847 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8d3 	bl	800046c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c6:	f000 f8a1 	bl	800040c <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <main+0x84>)
 80002cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80002d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 f8d5 	bl	800348c <osMessageCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <main+0x88>)
 80002e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <main+0x8c>)
 80002ea:	f107 041c 	add.w	r4, r7, #28
 80002ee:	461d      	mov	r5, r3
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002fc:	f107 031c 	add.w	r3, r7, #28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 f876 	bl	80033f4 <osThreadCreate>
 8000308:	4603      	mov	r3, r0
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <main+0x90>)
 800030c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <main+0x94>)
 8000310:	463c      	mov	r4, r7
 8000312:	461d      	mov	r5, r3
 8000314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800031c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000320:	463b      	mov	r3, r7
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f003 f865 	bl	80033f4 <osThreadCreate>
 800032a:	4603      	mov	r3, r0
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <main+0x98>)
 800032e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000330:	f003 f859 	bl	80033e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	e7fe      	b.n	8000334 <main+0x80>
 8000336:	bf00      	nop
 8000338:	080060ac 	.word	0x080060ac
 800033c:	20001044 	.word	0x20001044
 8000340:	080060bc 	.word	0x080060bc
 8000344:	2000103c 	.word	0x2000103c
 8000348:	080060d8 	.word	0x080060d8
 800034c:	20001040 	.word	0x20001040

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b0a6      	sub	sp, #152	; 0x98
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f005 fa64 	bl	800582c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2258      	movs	r2, #88	; 0x58
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f005 fa56 	bl	800582c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000380:	2301      	movs	r3, #1
 8000382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fd5e 	bl	8000e70 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ba:	f000 f923 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fc5e 	bl	8001c9c <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 f90d 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 feb9 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000400:	f000 f900 	bl	8000604 <Error_Handler>
  }
}
 8000404:	bf00      	nop
 8000406:	3798      	adds	r7, #152	; 0x98
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <MX_USART2_UART_Init+0x5c>)
 8000414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000418:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800041c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_USART2_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_USART2_UART_Init+0x58>)
 8000450:	f002 fb80 	bl	8002b54 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800045a:	f000 f8d3 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20001048 	.word	0x20001048
 8000468:	40004400 	.word	0x40004400

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000482:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_GPIO_Init+0xc4>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a2a      	ldr	r2, [pc, #168]	; (8000530 <MX_GPIO_Init+0xc4>)
 8000488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_GPIO_Init+0xc4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <MX_GPIO_Init+0xc4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a24      	ldr	r2, [pc, #144]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a18      	ldr	r2, [pc, #96]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_GPIO_Init+0xc4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f000 fca9 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_GPIO_Init+0xc8>)
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	4619      	mov	r1, r3
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <MX_GPIO_Init+0xcc>)
 8000504:	f000 fb12 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000508:	2320      	movs	r3, #32
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000522:	f000 fb03 	bl	8000b2c <HAL_GPIO_Init>

}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	; 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	10210000 	.word	0x10210000
 8000538:	48000800 	.word	0x48000800

0800053c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	osEvent evt;
	char buffer[15];
  /* Infinite loop */
  for(;;)
  {
	 evt=osMessageGet(myQueue01Handle, 1000);
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <StartDefaultTask+0x64>)
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f803 	bl	800355c <osMessageGet>
	 if(evt.status==osEventMessage)
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	2b10      	cmp	r3, #16
 800055a:	d113      	bne.n	8000584 <StartDefaultTask+0x48>
	 {
		 sprintf(buffer,"veri geldi:%d\n",(int)evt.value.p);
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	461a      	mov	r2, r3
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	490f      	ldr	r1, [pc, #60]	; (80005a4 <StartDefaultTask+0x68>)
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f968 	bl	800583c <siprintf>
		 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800056c:	f107 0108 	add.w	r1, r7, #8
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	220f      	movs	r2, #15
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <StartDefaultTask+0x6c>)
 8000578:	f002 fb3a 	bl	8002bf0 <HAL_UART_Transmit>
		 HAL_Delay(100);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f000 f9cf 	bl	8000920 <HAL_Delay>
 8000582:	e7df      	b.n	8000544 <StartDefaultTask+0x8>
	 }
	 else
	 {
		 char* data="veri yok";
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <StartDefaultTask+0x70>)
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
		 HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	2204      	movs	r2, #4
 800058e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <StartDefaultTask+0x6c>)
 8000592:	f002 fb2d 	bl	8002bf0 <HAL_UART_Transmit>
		 HAL_Delay(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 f9c2 	bl	8000920 <HAL_Delay>
	 evt=osMessageGet(myQueue01Handle, 1000);
 800059c:	e7d2      	b.n	8000544 <StartDefaultTask+0x8>
 800059e:	bf00      	nop
 80005a0:	20001044 	.word	0x20001044
 80005a4:	080060f4 	.word	0x080060f4
 80005a8:	20001048 	.word	0x20001048
 80005ac:	08006104 	.word	0x08006104

080005b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint16_t veri=0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  veri++;
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	3301      	adds	r3, #1
 80005c0:	81fb      	strh	r3, [r7, #14]
	  osMessagePut(myQueue01Handle,(uint16_t)veri, 100);
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <StartTask02+0x2c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	89f9      	ldrh	r1, [r7, #14]
 80005c8:	2264      	movs	r2, #100	; 0x64
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff86 	bl	80034dc <osMessagePut>
	  HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 f9a4 	bl	8000920 <HAL_Delay>
	  veri++;
 80005d8:	e7f0      	b.n	80005bc <StartTask02+0xc>
 80005da:	bf00      	nop
 80005dc:	20001044 	.word	0x20001044

080005e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f2:	f000 f975 	bl	80008e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012c00 	.word	0x40012c00

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_MspInit+0x4c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <HAL_MspInit+0x4c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_MspInit+0x4c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_MspInit+0x4c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_MspInit+0x4c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_MspInit+0x4c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	210f      	movs	r1, #15
 800064a:	f06f 0001 	mvn.w	r0, #1
 800064e:	f000 fa43 	bl	8000ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_UART_MspInit+0x7c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d128      	bne.n	80006d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x80>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_UART_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_UART_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b2:	230c      	movs	r3, #12
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c2:	2307      	movs	r3, #7
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 fa2c 	bl	8000b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40004400 	.word	0x40004400
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	2019      	movs	r0, #25
 80006fa:	f000 f9ed 	bl	8000ad8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006fe:	2019      	movs	r0, #25
 8000700:	f000 fa06 	bl	8000b10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <HAL_InitTick+0x9c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <HAL_InitTick+0x9c>)
 800070a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <HAL_InitTick+0x9c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800071c:	f107 0210 	add.w	r2, r7, #16
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fcee 	bl	8002108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800072c:	f001 fcca 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8000730:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <HAL_InitTick+0xa0>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	0c9b      	lsrs	r3, r3, #18
 800073c:	3b01      	subs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_InitTick+0xa4>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_InitTick+0xa8>)
 8000744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_InitTick+0xa4>)
 8000748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_InitTick+0xa4>)
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_InitTick+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_InitTick+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <HAL_InitTick+0xa4>)
 8000762:	f001 ff21 	bl	80025a8 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <HAL_InitTick+0xa4>)
 800076e:	f001 ff7d 	bl	800266c <HAL_TIM_Base_Start_IT>
 8000772:	4603      	mov	r3, r0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3730      	adds	r7, #48	; 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	431bde83 	.word	0x431bde83
 8000788:	200010cc 	.word	0x200010cc
 800078c:	40012c00 	.word	0x40012c00

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80007c2:	f001 ffc3 	bl	800274c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200010cc 	.word	0x200010cc

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f004 ffdc 	bl	80057bc <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20010000 	.word	0x20010000
 8000830:	00000400 	.word	0x00000400
 8000834:	200002e4 	.word	0x200002e4
 8000838:	20001130 	.word	0x20001130

0800083c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f004 ff9b 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000892:	f7ff fd0f 	bl	80002b4 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000898:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008a4:	0800618c 	.word	0x0800618c
  ldr r2, =_sbss
 80008a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008ac:	2000112c 	.word	0x2000112c

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f8fc 	bl	8000ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ff0a 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe9e 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	20001118 	.word	0x20001118

08000908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;  
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20001118 	.word	0x20001118

08000920 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff ffee 	bl	8000908 <HAL_GetTick>
 800092c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000946:	bf00      	nop
 8000948:	f7ff ffde 	bl	8000908 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4907      	ldr	r1, [pc, #28]	; (8000a04 <__NVIC_EnableIRQ+0x38>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff4c 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aea:	f7ff ff61 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000aee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	6978      	ldr	r0, [r7, #20]
 8000af6:	f7ff ffb1 	bl	8000a5c <NVIC_EncodePriority>
 8000afa:	4602      	mov	r2, r0
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff80 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff54 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e160      	b.n	8000dfe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8152 	beq.w	8000df8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d00b      	beq.n	8000b74 <HAL_GPIO_Init+0x48>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d007      	beq.n	8000b74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b68:	2b11      	cmp	r3, #17
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b12      	cmp	r3, #18
 8000b72:	d130      	bne.n	8000bd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 0201 	and.w	r2, r3, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0xea>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d123      	bne.n	8000c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	08da      	lsrs	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3208      	adds	r2, #8
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	6939      	ldr	r1, [r7, #16]
 8000c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0203 	and.w	r2, r3, #3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80ac 	beq.w	8000df8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	4b5e      	ldr	r3, [pc, #376]	; (8000e1c <HAL_GPIO_Init+0x2f0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a5d      	ldr	r2, [pc, #372]	; (8000e1c <HAL_GPIO_Init+0x2f0>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <HAL_GPIO_Init+0x2f0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <HAL_GPIO_Init+0x2f4>)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ce2:	d025      	beq.n	8000d30 <HAL_GPIO_Init+0x204>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2f8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d01f      	beq.n	8000d2c <HAL_GPIO_Init+0x200>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4e      	ldr	r2, [pc, #312]	; (8000e28 <HAL_GPIO_Init+0x2fc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d019      	beq.n	8000d28 <HAL_GPIO_Init+0x1fc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4d      	ldr	r2, [pc, #308]	; (8000e2c <HAL_GPIO_Init+0x300>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d013      	beq.n	8000d24 <HAL_GPIO_Init+0x1f8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00d      	beq.n	8000d20 <HAL_GPIO_Init+0x1f4>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <HAL_GPIO_Init+0x308>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4a      	ldr	r2, [pc, #296]	; (8000e38 <HAL_GPIO_Init+0x30c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000d14:	2306      	movs	r3, #6
 8000d16:	e00c      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d18:	2307      	movs	r3, #7
 8000d1a:	e00a      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	e008      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_Init+0x206>
 8000d30:	2300      	movs	r3, #0
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d42:	4937      	ldr	r1, [pc, #220]	; (8000e20 <HAL_GPIO_Init+0x2f4>)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d74:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d9e:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f47f ae97 	bne.w	8000b3c <HAL_GPIO_Init+0x10>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	48000c00 	.word	0x48000c00
 8000e30:	48001000 	.word	0x48001000
 8000e34:	48001400 	.word	0x48001400
 8000e38:	48001800 	.word	0x48001800
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f000 bf01 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8160 	beq.w	800115a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e9a:	4bae      	ldr	r3, [pc, #696]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d00c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea6:	4bab      	ldr	r3, [pc, #684]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d159      	bne.n	8000f66 <HAL_RCC_OscConfig+0xf6>
 8000eb2:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d152      	bne.n	8000f66 <HAL_RCC_OscConfig+0xf6>
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ed4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x82>
 8000eec:	4b99      	ldr	r3, [pc, #612]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e015      	b.n	8000f1e <HAL_RCC_OscConfig+0xae>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f1a:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f22:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8102 	beq.w	8001158 <HAL_RCC_OscConfig+0x2e8>
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 80fc 	bne.w	8001158 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f000 be93 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x110>
 8000f72:	4b78      	ldr	r3, [pc, #480]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a77      	ldr	r2, [pc, #476]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e030      	b.n	8000fe2 <HAL_RCC_OscConfig+0x172>
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x134>
 8000f8a:	4b72      	ldr	r3, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a71      	ldr	r2, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a6e      	ldr	r2, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e01e      	b.n	8000fe2 <HAL_RCC_OscConfig+0x172>
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fae:	d10c      	bne.n	8000fca <HAL_RCC_OscConfig+0x15a>
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a67      	ldr	r2, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a64      	ldr	r2, [pc, #400]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x172>
 8000fca:	4b62      	ldr	r3, [pc, #392]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a61      	ldr	r2, [pc, #388]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a5e      	ldr	r2, [pc, #376]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8000fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d059      	beq.n	80010a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc8c 	bl	8000908 <HAL_GetTick>
 8000ff0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fc87 	bl	8000908 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d902      	bls.n	800100c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	f000 be40 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001020:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <HAL_RCC_OscConfig+0x1ce>
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	e015      	b.n	800106a <HAL_RCC_OscConfig+0x1fa>
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001056:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800105a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001072:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001076:	fa92 f2a2 	rbit	r2, r2
 800107a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800107e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001082:	fab2 f282 	clz	r2, r2
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	f042 0220 	orr.w	r2, r2, #32
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	f002 021f 	and.w	r2, r2, #31
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0ab      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x186>
 800109e:	e05c      	b.n	800115a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc32 	bl	8000908 <HAL_GetTick>
 80010a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a8:	e00a      	b.n	80010c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010aa:	f7ff fc2d 	bl	8000908 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d902      	bls.n	80010c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	f000 bde6 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
 80010c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <HAL_RCC_OscConfig+0x282>
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x2ae>
 80010f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800110e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_RCC_OscConfig+0x2e4>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001122:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001126:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001132:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1ab      	bne.n	80010aa <HAL_RCC_OscConfig+0x23a>
 8001152:	e002      	b.n	800115a <HAL_RCC_OscConfig+0x2ea>
 8001154:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8170 	beq.w	800144a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116a:	4bd0      	ldr	r3, [pc, #832]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00c      	beq.n	8001190 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001176:	4bcd      	ldr	r3, [pc, #820]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b08      	cmp	r3, #8
 8001180:	d16d      	bne.n	800125e <HAL_RCC_OscConfig+0x3ee>
 8001182:	4bca      	ldr	r3, [pc, #808]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800118a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800118e:	d166      	bne.n	800125e <HAL_RCC_OscConfig+0x3ee>
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80011a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_RCC_OscConfig+0x350>
 80011ba:	4bbc      	ldr	r3, [pc, #752]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	e013      	b.n	80011e8 <HAL_RCC_OscConfig+0x378>
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011e4:	4bb1      	ldr	r3, [pc, #708]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011f2:	fa92 f2a2 	rbit	r2, r2
 80011f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	f042 0220 	orr.w	r2, r2, #32
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	f002 021f 	and.w	r2, r2, #31
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_RCC_OscConfig+0x3ba>
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d002      	beq.n	800122a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	f000 bd31 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	21f8      	movs	r1, #248	; 0xf8
 800123a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001242:	fa91 f1a1 	rbit	r1, r1
 8001246:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800124a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800124e:	fab1 f181 	clz	r1, r1
 8001252:	b2c9      	uxtb	r1, r1
 8001254:	408b      	lsls	r3, r1
 8001256:	4995      	ldr	r1, [pc, #596]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	e0f5      	b.n	800144a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8085 	beq.w	8001374 <HAL_RCC_OscConfig+0x504>
 800126a:	2301      	movs	r3, #1
 800126c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800127c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800128a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	461a      	mov	r2, r3
 8001292:	2301      	movs	r3, #1
 8001294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fb37 	bl	8000908 <HAL_GetTick>
 800129a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fb32 	bl	8000908 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d902      	bls.n	80012b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f000 bceb 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x476>
 80012e0:	4b72      	ldr	r3, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	e013      	b.n	800130e <HAL_RCC_OscConfig+0x49e>
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800130a:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	2202      	movs	r2, #2
 8001310:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001314:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001318:	fa92 f2a2 	rbit	r2, r2
 800131c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001320:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001324:	fab2 f282 	clz	r2, r2
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f002 021f 	and.w	r2, r2, #31
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0af      	beq.n	80012a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	21f8      	movs	r1, #248	; 0xf8
 8001350:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001358:	fa91 f1a1 	rbit	r1, r1
 800135c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001360:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001364:	fab1 f181 	clz	r1, r1
 8001368:	b2c9      	uxtb	r1, r1
 800136a:	408b      	lsls	r3, r1
 800136c:	494f      	ldr	r1, [pc, #316]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
 8001372:	e06a      	b.n	800144a <HAL_RCC_OscConfig+0x5da>
 8001374:	2301      	movs	r3, #1
 8001376:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001386:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	461a      	mov	r2, r3
 800139c:	2300      	movs	r3, #0
 800139e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fab2 	bl	8000908 <HAL_GetTick>
 80013a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff faad 	bl	8000908 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d902      	bls.n	80013c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f000 bc66 	b.w	8001c8c <HAL_RCC_OscConfig+0xe1c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	095b      	lsrs	r3, r3, #5
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <HAL_RCC_OscConfig+0x580>
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	e013      	b.n	8001418 <HAL_RCC_OscConfig+0x5a8>
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001408:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_RCC_OscConfig+0x63c>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2202      	movs	r2, #2
 800141a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800141e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001422:	fa92 f2a2 	rbit	r2, r2
 8001426:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800142a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800142e:	fab2 f282 	clz	r2, r2
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f002 021f 	and.w	r2, r2, #31
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1af      	bne.n	80013aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80da 	beq.w	800160e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d069      	beq.n	8001538 <HAL_RCC_OscConfig+0x6c8>
 8001464:	2301      	movs	r3, #1
 8001466:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001476:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x640>)
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	461a      	mov	r2, r3
 800148a:	2301      	movs	r3, #1
 800148c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fa3b 	bl	8000908 <HAL_GetTick>
 8001492:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e00d      	b.n	80014b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fa36 	bl	8000908 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d905      	bls.n	80014b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e3ef      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	10908120 	.word	0x10908120
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014e4:	2202      	movs	r2, #2
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f8:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80014fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001500:	2102      	movs	r1, #2
 8001502:	6019      	str	r1, [r3, #0]
 8001504:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f1a3 	rbit	r1, r3
 800150e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001512:	6019      	str	r1, [r3, #0]
  return result;
 8001514:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0b0      	beq.n	8001498 <HAL_RCC_OscConfig+0x628>
 8001536:	e06a      	b.n	800160e <HAL_RCC_OscConfig+0x79e>
 8001538:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800154e:	601a      	str	r2, [r3, #0]
  return result;
 8001550:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001554:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x920>)
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	2300      	movs	r3, #0
 8001568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff f9cd 	bl	8000908 <HAL_GetTick>
 800156e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	e009      	b.n	8001588 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff f9c8 	bl	8000908 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e381      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 8001588:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015a4:	2202      	movs	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f2a3 	rbit	r2, r3
 80015b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f2a3 	rbit	r2, r3
 80015ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b6e      	ldr	r3, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80015d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015d8:	2102      	movs	r1, #2
 80015da:	6019      	str	r1, [r3, #0]
 80015dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f1a3 	rbit	r1, r3
 80015e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ea:	6019      	str	r1, [r3, #0]
  return result;
 80015ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1b2      	bne.n	8001574 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8157 	beq.w	80018cc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	61d3      	str	r3, [r2, #28]
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001650:	2301      	movs	r3, #1
 8001652:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <HAL_RCC_OscConfig+0x924>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11a      	bne.n	8001698 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x924>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_RCC_OscConfig+0x924>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff f94b 	bl	8000908 <HAL_GetTick>
 8001672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e009      	b.n	800168c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff f946 	bl	8000908 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e2ff      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_OscConfig+0x924>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ef      	beq.n	8001678 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_OscConfig+0x840>
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a39      	ldr	r2, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	e02f      	b.n	8001710 <HAL_RCC_OscConfig+0x8a0>
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x864>
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a33      	ldr	r2, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a30      	ldr	r2, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0x8a0>
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x888>
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a2a      	ldr	r2, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a27      	ldr	r2, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x8a0>
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06a      	beq.n	80017f0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f8f5 	bl	8000908 <HAL_GetTick>
 800171e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff f8f0 	bl	8000908 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e2a7      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 800173c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f2a3 	rbit	r2, r3
 800174e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001758:	2202      	movs	r2, #2
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f2a3 	rbit	r2, r3
 8001766:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800176a:	601a      	str	r2, [r3, #0]
  return result;
 800176c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x928>
 8001786:	4b01      	ldr	r3, [pc, #4]	; (800178c <HAL_RCC_OscConfig+0x91c>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x944>
 800178c:	40021000 	.word	0x40021000
 8001790:	10908120 	.word	0x10908120
 8001794:	40007000 	.word	0x40007000
 8001798:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4bc0      	ldr	r3, [pc, #768]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017b8:	2102      	movs	r1, #2
 80017ba:	6011      	str	r1, [r2, #0]
 80017bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fa92 f1a2 	rbit	r1, r2
 80017c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017ca:	6011      	str	r1, [r2, #0]
  return result;
 80017cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	fab2 f282 	clz	r2, r2
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f002 021f 	and.w	r2, r2, #31
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d09a      	beq.n	8001724 <HAL_RCC_OscConfig+0x8b4>
 80017ee:	e063      	b.n	80018b8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff f88a 	bl	8000908 <HAL_GetTick>
 80017f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff f885 	bl	8000908 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e23c      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 8001812:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001816:	2202      	movs	r2, #2
 8001818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001840:	601a      	str	r2, [r3, #0]
  return result;
 8001842:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001846:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d102      	bne.n	8001862 <HAL_RCC_OscConfig+0x9f2>
 800185c:	4b95      	ldr	r3, [pc, #596]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	e00d      	b.n	800187e <HAL_RCC_OscConfig+0xa0e>
 8001862:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001882:	2102      	movs	r1, #2
 8001884:	6011      	str	r1, [r2, #0]
 8001886:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	fa92 f1a2 	rbit	r1, r2
 8001890:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001894:	6011      	str	r1, [r2, #0]
  return result;
 8001896:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f002 021f 	and.w	r2, r2, #31
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1a0      	bne.n	80017fa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a7b      	ldr	r2, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 81d9 	beq.w	8001c8a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f000 81a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 811e 	bne.w	8001b2e <HAL_RCC_OscConfig+0xcbe>
 80018f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800190a:	601a      	str	r2, [r3, #0]
  return result;
 800190c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001910:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	461a      	mov	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe ffee 	bl	8000908 <HAL_GetTick>
 800192c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7fe ffe9 	bl	8000908 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1a2      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 8001946:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800194a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001964:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0xb10>
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e01b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb48>
 8001980:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800199e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c0:	6011      	str	r1, [r2, #0]
 80019c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019d0:	6011      	str	r1, [r2, #0]
  return result;
 80019d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	fab2 f282 	clz	r2, r2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f002 021f 	and.w	r2, r2, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d19e      	bne.n	8001932 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f023 020f 	bic.w	r2, r3, #15
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a19      	ldr	r1, [r3, #32]
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	4925      	ldr	r1, [pc, #148]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
 8001a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3c:	601a      	str	r2, [r3, #0]
  return result;
 8001a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	2301      	movs	r3, #1
 8001a58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ff55 	bl	8000908 <HAL_GetTick>
 8001a5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7fe ff50 	bl	8000908 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e109      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 8001a78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a90:	601a      	str	r2, [r3, #0]
  return result;
 8001a92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xc48>
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <HAL_RCC_OscConfig+0xc44>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e01e      	b.n	8001af0 <HAL_RCC_OscConfig+0xc80>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0xe28>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af8:	6011      	str	r1, [r2, #0]
 8001afa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	fa92 f1a2 	rbit	r1, r2
 8001b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b08:	6011      	str	r1, [r2, #0]
  return result;
 8001b0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f002 021f 	and.w	r2, r2, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d09b      	beq.n	8001a64 <HAL_RCC_OscConfig+0xbf4>
 8001b2c:	e0ad      	b.n	8001c8a <HAL_RCC_OscConfig+0xe1a>
 8001b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fed0 	bl	8000908 <HAL_GetTick>
 8001b68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe fecb 	bl	8000908 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e084      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
 8001b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	601a      	str	r2, [r3, #0]
  return result;
 8001b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0xd4c>
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_RCC_OscConfig+0xe28>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e01b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd84>
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_RCC_OscConfig+0xe28>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f107 0214 	add.w	r2, r7, #20
 8001bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f107 0214 	add.w	r2, r7, #20
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f107 0210 	add.w	r2, r7, #16
 8001c0c:	6011      	str	r1, [r2, #0]
  return result;
 8001c0e:	f107 0210 	add.w	r2, r7, #16
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d19e      	bne.n	8001b6e <HAL_RCC_OscConfig+0xcfe>
 8001c30:	e02b      	b.n	8001c8a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e025      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0xe28>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_RCC_OscConfig+0xe28>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d111      	bne.n	8001c86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d108      	bne.n	8001c86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b09e      	sub	sp, #120	; 0x78
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e162      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	498b      	ldr	r1, [pc, #556]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e14a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	497f      	ldr	r1, [pc, #508]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80dc 	beq.w	8001ec8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d13c      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xf6>
 8001d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xa6>
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e00f      	b.n	8001d62 <HAL_RCC_ClockConfig+0xc6>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
 8001d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d17b      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0f3      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d13c      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x178>
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x128>
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_ClockConfig+0x148>
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13a      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b2      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x1a0>
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00d      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1bc>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	61ba      	str	r2, [r7, #24]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	fa92 f2a2 	rbit	r2, r2
 8001e62:	617a      	str	r2, [r7, #20]
  return result;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e079      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fd36 	bl	8000908 <HAL_GetTick>
 8001e9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe fd32 	bl	8000908 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e061      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d214      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e040      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	491a      	ldr	r1, [pc, #104]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f3e:	f000 f829 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	22f0      	movs	r2, #240	; 0xf0
 8001f4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	fa92 f2a2 	rbit	r2, r2
 8001f56:	60fa      	str	r2, [r7, #12]
  return result;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	40d3      	lsrs	r3, r2
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x2ec>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_ClockConfig+0x2f0>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_ClockConfig+0x2f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fbb6 	bl	80006e4 <HAL_InitTick>
  
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3778      	adds	r7, #120	; 0x78
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08006118 	.word	0x08006118
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x36>
 8001fc2:	e03f      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fc6:	623b      	str	r3, [r7, #32]
      break;
 8001fc8:	e03f      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	607a      	str	r2, [r7, #4]
  return result;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	40d3      	lsrs	r3, r2
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	60fa      	str	r2, [r7, #12]
  return result;
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	40d3      	lsrs	r3, r2
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <HAL_RCC_GetSysClockFreq+0xd0>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	fbb2 f2f3 	udiv	r2, r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e007      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fbb2 f2f3 	udiv	r2, r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	623b      	str	r3, [r7, #32]
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002046:	623b      	str	r3, [r7, #32]
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	6a3b      	ldr	r3, [r7, #32]
}
 800204c:	4618      	mov	r0, r3
 800204e:	372c      	adds	r7, #44	; 0x2c
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	08006130 	.word	0x08006130
 8002064:	08006140 	.word	0x08006140

08002068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002086:	f7ff ffef 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 800208a:	4601      	mov	r1, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002094:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	603a      	str	r2, [r7, #0]
  return result;
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	40d3      	lsrs	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08006128 	.word	0x08006128

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020ca:	f7ff ffcd 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	603a      	str	r2, [r7, #0]
  return result;
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	40d3      	lsrs	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08006128 	.word	0x08006128

08002108 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	220f      	movs	r2, #15
 8002116:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_GetClockConfig+0x5c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_RCC_GetClockConfig+0x60>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b092      	sub	sp, #72	; 0x48
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80d4 	beq.w	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002190:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10e      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a6:	61d3      	str	r3, [r2, #28]
 80021a8:	4b48      	ldr	r3, [pc, #288]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fb99 	bl	8000908 <HAL_GetTick>
 80021d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7fe fb95 	bl	8000908 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	; 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1d6      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8084 	beq.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002214:	429a      	cmp	r2, r3
 8002216:	d07c      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2301      	movs	r3, #1
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d04b      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fb45 	bl	8000908 <HAL_GetTick>
 800227e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fb41 	bl	8000908 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e180      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	61fb      	str	r3, [r7, #28]
  return result;
 80022b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d108      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022c6:	4b01      	ldr	r3, [pc, #4]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	e00d      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	10908100 	.word	0x10908100
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	4ba0      	ldr	r3, [pc, #640]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2202      	movs	r2, #2
 80022ea:	613a      	str	r2, [r7, #16]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	60fa      	str	r2, [r7, #12]
  return result;
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f002 021f 	and.w	r2, r2, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0b7      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002312:	4b95      	ldr	r3, [pc, #596]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4992      	ldr	r1, [pc, #584]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002324:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b8e      	ldr	r3, [pc, #568]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a8d      	ldr	r2, [pc, #564]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f023 0203 	bic.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4985      	ldr	r1, [pc, #532]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	497e      	ldr	r1, [pc, #504]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002380:	4b79      	ldr	r3, [pc, #484]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4976      	ldr	r1, [pc, #472]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f023 0210 	bic.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	496f      	ldr	r1, [pc, #444]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	4967      	ldr	r1, [pc, #412]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f023 0220 	bic.w	r2, r3, #32
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4960      	ldr	r1, [pc, #384]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f8:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	4958      	ldr	r1, [pc, #352]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4951      	ldr	r1, [pc, #324]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4949      	ldr	r1, [pc, #292]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002452:	4b45      	ldr	r3, [pc, #276]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4942      	ldr	r1, [pc, #264]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	493a      	ldr	r1, [pc, #232]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	4933      	ldr	r1, [pc, #204]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	492b      	ldr	r1, [pc, #172]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4924      	ldr	r1, [pc, #144]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	491c      	ldr	r1, [pc, #112]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	4915      	ldr	r1, [pc, #84]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	490d      	ldr	r1, [pc, #52]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254e:	4906      	ldr	r1, [pc, #24]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002560:	4b01      	ldr	r3, [pc, #4]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	e002      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002576:	4313      	orrs	r3, r2
 8002578:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002594:	4313      	orrs	r3, r2
 8002596:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3748      	adds	r7, #72	; 0x48
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e049      	b.n	800264e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f841 	bl	8002656 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f000 f9f8 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e04f      	b.n	8002724 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a23      	ldr	r2, [pc, #140]	; (8002730 <HAL_TIM_Base_Start_IT+0xc4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d018      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_TIM_Base_Start_IT+0xc8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_TIM_Base_Start_IT+0xcc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_TIM_Base_Start_IT+0xd0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_TIM_Base_Start_IT+0xd4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x76>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_TIM_Base_Start_IT+0xd8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d115      	bne.n	800270e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_TIM_Base_Start_IT+0xdc>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d015      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0xb4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fa:	d011      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	e008      	b.n	8002720 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e000      	b.n	8002722 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002720:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800
 800273c:	40013400 	.word	0x40013400
 8002740:	40014000 	.word	0x40014000
 8002744:	40015000 	.word	0x40015000
 8002748:	00010007 	.word	0x00010007

0800274c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f905 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8f7 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f908 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0204 	mvn.w	r2, #4
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8db 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8cd 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8de 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b08      	cmp	r3, #8
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b08      	cmp	r3, #8
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0208 	mvn.w	r2, #8
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8b1 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8a3 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8b4 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b10      	cmp	r3, #16
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b10      	cmp	r3, #16
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0210 	mvn.w	r2, #16
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2208      	movs	r2, #8
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f887 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f879 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f88a 	bl	80029b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10e      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd fe88 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f918 	bl	8002b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290a:	d10e      	bne.n	800292a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d107      	bne.n	800292a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f90b 	bl	8002b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d10e      	bne.n	8002956 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d107      	bne.n	8002956 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f838 	bl	80029c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d10e      	bne.n	8002982 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d107      	bne.n	8002982 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0220 	mvn.w	r2, #32
 800297a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8cb 	bl	8002b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <TIM_Base_SetConfig+0x11c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <TIM_Base_SetConfig+0x120>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3e      	ldr	r2, [pc, #248]	; (8002b00 <TIM_Base_SetConfig+0x124>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	; (8002b04 <TIM_Base_SetConfig+0x128>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <TIM_Base_SetConfig+0x12c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a31      	ldr	r2, [pc, #196]	; (8002af8 <TIM_Base_SetConfig+0x11c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d01b      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <TIM_Base_SetConfig+0x120>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d017      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <TIM_Base_SetConfig+0x124>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <TIM_Base_SetConfig+0x128>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <TIM_Base_SetConfig+0x130>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <TIM_Base_SetConfig+0x134>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <TIM_Base_SetConfig+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <TIM_Base_SetConfig+0x12c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <TIM_Base_SetConfig+0x11c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <TIM_Base_SetConfig+0x100>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <TIM_Base_SetConfig+0x128>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00f      	beq.n	8002adc <TIM_Base_SetConfig+0x100>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <TIM_Base_SetConfig+0x130>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0x100>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <TIM_Base_SetConfig+0x134>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0x100>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <TIM_Base_SetConfig+0x138>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0x100>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <TIM_Base_SetConfig+0x12c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40013400 	.word	0x40013400
 8002b08:	40015000 	.word	0x40015000
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800

08002b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e040      	b.n	8002be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fd72 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8c0 	bl	8002d18 <UART_SetConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e022      	b.n	8002be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa8a 	bl	80030c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fb11 	bl	8003208 <UART_CheckIdleState>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	f040 8082 	bne.w	8002d0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_UART_Transmit+0x26>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07a      	b.n	8002d10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x38>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e073      	b.n	8002d10 <HAL_UART_Transmit+0x120>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3e:	f7fd fe63 	bl	8000908 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d108      	bne.n	8002c70 <HAL_UART_Transmit+0x80>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e003      	b.n	8002c78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c80:	e02d      	b.n	8002cde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb04 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e039      	b.n	8002d10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10b      	bne.n	8002cba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e008      	b.n	8002ccc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1cb      	bne.n	8002c82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2140      	movs	r1, #64	; 0x40
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fad0 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e005      	b.n	8002d10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4bab      	ldr	r3, [pc, #684]	; (8002ff0 <UART_SetConfig+0x2d8>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a99      	ldr	r2, [pc, #612]	; (8002ff4 <UART_SetConfig+0x2dc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d120      	bne.n	8002dd6 <UART_SetConfig+0xbe>
 8002d94:	4b98      	ldr	r3, [pc, #608]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d817      	bhi.n	8002dd0 <UART_SetConfig+0xb8>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <UART_SetConfig+0x90>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc5 	.word	0x08002dc5
 8002db0:	08002dcb 	.word	0x08002dcb
 8002db4:	08002dbf 	.word	0x08002dbf
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e0b5      	b.n	8002f2a <UART_SetConfig+0x212>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e0b2      	b.n	8002f2a <UART_SetConfig+0x212>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e0af      	b.n	8002f2a <UART_SetConfig+0x212>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e0ac      	b.n	8002f2a <UART_SetConfig+0x212>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e0a9      	b.n	8002f2a <UART_SetConfig+0x212>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a88      	ldr	r2, [pc, #544]	; (8002ffc <UART_SetConfig+0x2e4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d124      	bne.n	8002e2a <UART_SetConfig+0x112>
 8002de0:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dec:	d011      	beq.n	8002e12 <UART_SetConfig+0xfa>
 8002dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002df2:	d817      	bhi.n	8002e24 <UART_SetConfig+0x10c>
 8002df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002df8:	d011      	beq.n	8002e1e <UART_SetConfig+0x106>
 8002dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dfe:	d811      	bhi.n	8002e24 <UART_SetConfig+0x10c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <UART_SetConfig+0xf4>
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d006      	beq.n	8002e18 <UART_SetConfig+0x100>
 8002e0a:	e00b      	b.n	8002e24 <UART_SetConfig+0x10c>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e08b      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e12:	2302      	movs	r3, #2
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e088      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e085      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e082      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e24:	2310      	movs	r3, #16
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e07f      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a74      	ldr	r2, [pc, #464]	; (8003000 <UART_SetConfig+0x2e8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d124      	bne.n	8002e7e <UART_SetConfig+0x166>
 8002e34:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e40:	d011      	beq.n	8002e66 <UART_SetConfig+0x14e>
 8002e42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e46:	d817      	bhi.n	8002e78 <UART_SetConfig+0x160>
 8002e48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e4c:	d011      	beq.n	8002e72 <UART_SetConfig+0x15a>
 8002e4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e52:	d811      	bhi.n	8002e78 <UART_SetConfig+0x160>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <UART_SetConfig+0x148>
 8002e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e5c:	d006      	beq.n	8002e6c <UART_SetConfig+0x154>
 8002e5e:	e00b      	b.n	8002e78 <UART_SetConfig+0x160>
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e061      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e66:	2302      	movs	r3, #2
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e05e      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e05b      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e72:	2308      	movs	r3, #8
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e058      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e055      	b.n	8002f2a <UART_SetConfig+0x212>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a60      	ldr	r2, [pc, #384]	; (8003004 <UART_SetConfig+0x2ec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d124      	bne.n	8002ed2 <UART_SetConfig+0x1ba>
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e94:	d011      	beq.n	8002eba <UART_SetConfig+0x1a2>
 8002e96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e9a:	d817      	bhi.n	8002ecc <UART_SetConfig+0x1b4>
 8002e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea0:	d011      	beq.n	8002ec6 <UART_SetConfig+0x1ae>
 8002ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea6:	d811      	bhi.n	8002ecc <UART_SetConfig+0x1b4>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <UART_SetConfig+0x19c>
 8002eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb0:	d006      	beq.n	8002ec0 <UART_SetConfig+0x1a8>
 8002eb2:	e00b      	b.n	8002ecc <UART_SetConfig+0x1b4>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e037      	b.n	8002f2a <UART_SetConfig+0x212>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e034      	b.n	8002f2a <UART_SetConfig+0x212>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e031      	b.n	8002f2a <UART_SetConfig+0x212>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e02e      	b.n	8002f2a <UART_SetConfig+0x212>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e02b      	b.n	8002f2a <UART_SetConfig+0x212>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4c      	ldr	r2, [pc, #304]	; (8003008 <UART_SetConfig+0x2f0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d124      	bne.n	8002f26 <UART_SetConfig+0x20e>
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ee4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee8:	d011      	beq.n	8002f0e <UART_SetConfig+0x1f6>
 8002eea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eee:	d817      	bhi.n	8002f20 <UART_SetConfig+0x208>
 8002ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef4:	d011      	beq.n	8002f1a <UART_SetConfig+0x202>
 8002ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002efa:	d811      	bhi.n	8002f20 <UART_SetConfig+0x208>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <UART_SetConfig+0x1f0>
 8002f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f04:	d006      	beq.n	8002f14 <UART_SetConfig+0x1fc>
 8002f06:	e00b      	b.n	8002f20 <UART_SetConfig+0x208>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e00d      	b.n	8002f2a <UART_SetConfig+0x212>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e00a      	b.n	8002f2a <UART_SetConfig+0x212>
 8002f14:	2304      	movs	r3, #4
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e007      	b.n	8002f2a <UART_SetConfig+0x212>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	77fb      	strb	r3, [r7, #31]
 8002f1e:	e004      	b.n	8002f2a <UART_SetConfig+0x212>
 8002f20:	2310      	movs	r3, #16
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e001      	b.n	8002f2a <UART_SetConfig+0x212>
 8002f26:	2310      	movs	r3, #16
 8002f28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f32:	d16d      	bne.n	8003010 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d827      	bhi.n	8002f8a <UART_SetConfig+0x272>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <UART_SetConfig+0x228>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f65 	.word	0x08002f65
 8002f44:	08002f6d 	.word	0x08002f6d
 8002f48:	08002f75 	.word	0x08002f75
 8002f4c:	08002f8b 	.word	0x08002f8b
 8002f50:	08002f7b 	.word	0x08002f7b
 8002f54:	08002f8b 	.word	0x08002f8b
 8002f58:	08002f8b 	.word	0x08002f8b
 8002f5c:	08002f8b 	.word	0x08002f8b
 8002f60:	08002f83 	.word	0x08002f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f64:	f7ff f88c 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002f68:	61b8      	str	r0, [r7, #24]
        break;
 8002f6a:	e013      	b.n	8002f94 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f6c:	f7ff f8aa 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8002f70:	61b8      	str	r0, [r7, #24]
        break;
 8002f72:	e00f      	b.n	8002f94 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <UART_SetConfig+0x2f4>)
 8002f76:	61bb      	str	r3, [r7, #24]
        break;
 8002f78:	e00c      	b.n	8002f94 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7a:	f7ff f80b 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002f7e:	61b8      	str	r0, [r7, #24]
        break;
 8002f80:	e008      	b.n	8002f94 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f86:	61bb      	str	r3, [r7, #24]
        break;
 8002f88:	e004      	b.n	8002f94 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77bb      	strb	r3, [r7, #30]
        break;
 8002f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8086 	beq.w	80030a8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	005a      	lsls	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	d916      	bls.n	8002fe8 <UART_SetConfig+0x2d0>
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc0:	d212      	bcs.n	8002fe8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f023 030f 	bic.w	r3, r3, #15
 8002fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	89fa      	ldrh	r2, [r7, #14]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e05f      	b.n	80030a8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77bb      	strb	r3, [r7, #30]
 8002fec:	e05c      	b.n	80030a8 <UART_SetConfig+0x390>
 8002fee:	bf00      	nop
 8002ff0:	efff69f3 	.word	0xefff69f3
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40004400 	.word	0x40004400
 8003000:	40004800 	.word	0x40004800
 8003004:	40004c00 	.word	0x40004c00
 8003008:	40005000 	.word	0x40005000
 800300c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d827      	bhi.n	8003066 <UART_SetConfig+0x34e>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0x304>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7ff f81e 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003044:	61b8      	str	r0, [r7, #24]
        break;
 8003046:	e013      	b.n	8003070 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff f83c 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 800304c:	61b8      	str	r0, [r7, #24]
        break;
 800304e:	e00f      	b.n	8003070 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <UART_SetConfig+0x3a8>)
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e00c      	b.n	8003070 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7fe ff9d 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 800305a:	61b8      	str	r0, [r7, #24]
        break;
 800305c:	e008      	b.n	8003070 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e004      	b.n	8003070 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77bb      	strb	r3, [r7, #30]
        break;
 800306e:	bf00      	nop
    }

    if (pclk != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	085a      	lsrs	r2, r3, #1
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	b29b      	uxth	r3, r3
 800308a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d908      	bls.n	80030a4 <UART_SetConfig+0x38c>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d204      	bcs.n	80030a4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e001      	b.n	80030a8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	007a1200 	.word	0x007a1200

080030c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01a      	beq.n	80031da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c2:	d10a      	bne.n	80031da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003218:	f7fd fb76 	bl	8000908 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b08      	cmp	r3, #8
 800322a:	d10e      	bne.n	800324a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f82d 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e023      	b.n	8003292 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d10e      	bne.n	8003276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f817 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e00d      	b.n	8003292 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	e05e      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d05a      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7fd fb28 	bl	8000908 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <UART_WaitOnFlagUntilTimeout+0x30>
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d11b      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e043      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02c      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d124      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d091      	beq.n	80032ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a4:	2b84      	cmp	r3, #132	; 0x84
 80033a6:	d005      	beq.n	80033b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	3303      	adds	r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c8:	f3ef 8305 	mrs	r3, IPSR
 80033cc:	607b      	str	r3, [r7, #4]
  return(result);
 80033ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033ea:	f001 f8ab 	bl	8004544 <vTaskStartScheduler>
  
  return osOK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af04      	add	r7, sp, #16
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <osThreadCreate+0x54>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01c      	beq.n	8003448 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685c      	ldr	r4, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681d      	ldr	r5, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691e      	ldr	r6, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ffb6 	bl	8003392 <makeFreeRtosPriority>
 8003426:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003430:	9202      	str	r2, [sp, #8]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	9100      	str	r1, [sp, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	4632      	mov	r2, r6
 800343a:	4629      	mov	r1, r5
 800343c:	4620      	mov	r0, r4
 800343e:	f000 fef7 	bl	8004230 <xTaskCreateStatic>
 8003442:	4603      	mov	r3, r0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e01c      	b.n	8003482 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685c      	ldr	r4, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003454:	b29e      	uxth	r6, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff98 	bl	8003392 <makeFreeRtosPriority>
 8003462:	4602      	mov	r2, r0
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	9200      	str	r2, [sp, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4632      	mov	r2, r6
 8003470:	4629      	mov	r1, r5
 8003472:	4620      	mov	r0, r4
 8003474:	f000 ff38 	bl	80042e8 <xTaskCreate>
 8003478:	4603      	mov	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800348c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af02      	add	r7, sp, #8
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d011      	beq.n	80034c2 <osMessageCreate+0x36>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2400      	movs	r4, #0
 80034b8:	9400      	str	r4, [sp, #0]
 80034ba:	f000 f9df 	bl	800387c <xQueueGenericCreateStatic>
 80034be:	4603      	mov	r3, r0
 80034c0:	e008      	b.n	80034d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	4619      	mov	r1, r3
 80034ce:	f000 fa4c 	bl	800396a <xQueueGenericCreate>
 80034d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <osMessagePut+0x1e>
    ticks = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80034fa:	f7ff ff62 	bl	80033c2 <inHandlerMode>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d018      	beq.n	8003536 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003504:	f107 0210 	add.w	r2, r7, #16
 8003508:	f107 0108 	add.w	r1, r7, #8
 800350c:	2300      	movs	r3, #0
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fb86 	bl	8003c20 <xQueueGenericSendFromISR>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <osMessagePut+0x42>
      return osErrorOS;
 800351a:	23ff      	movs	r3, #255	; 0xff
 800351c:	e018      	b.n	8003550 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d014      	beq.n	800354e <osMessagePut+0x72>
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <osMessagePut+0x7c>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	e00b      	b.n	800354e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003536:	f107 0108 	add.w	r1, r7, #8
 800353a:	2300      	movs	r3, #0
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fa70 	bl	8003a24 <xQueueGenericSend>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <osMessagePut+0x72>
      return osErrorOS;
 800354a:	23ff      	movs	r3, #255	; 0xff
 800354c:	e000      	b.n	8003550 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	617b      	str	r3, [r7, #20]
    return event;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	461c      	mov	r4, r3
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800358a:	e054      	b.n	8003636 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d103      	bne.n	80035a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	e009      	b.n	80035b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <osMessageGet+0x5c>
      ticks = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80035b8:	f7ff ff03 	bl	80033c2 <inHandlerMode>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01c      	beq.n	80035fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80035c2:	f107 0220 	add.w	r2, r7, #32
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f000 fc9e 	bl	8003f10 <xQueueReceiveFromISR>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80035da:	2310      	movs	r3, #16
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e001      	b.n	80035e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01d      	beq.n	8003626 <osMessageGet+0xca>
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <osMessageGet+0xe4>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	e014      	b.n	8003626 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	3304      	adds	r3, #4
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	4619      	mov	r1, r3
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f000 fba2 	bl	8003d50 <xQueueReceive>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003612:	2310      	movs	r3, #16
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e006      	b.n	8003626 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <osMessageGet+0xc6>
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <osMessageGet+0xc8>
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	461c      	mov	r4, r3
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	372c      	adds	r7, #44	; 0x2c
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	bf00      	nop
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 0208 	add.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0208 	add.w	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f103 0208 	add.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d103      	bne.n	8003706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e00c      	b.n	8003720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3308      	adds	r3, #8
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e002      	b.n	8003714 <vListInsert+0x2e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d2f6      	bcs.n	800370e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6852      	ldr	r2, [r2, #4]
 8003778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d103      	bne.n	800378c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037d6:	f001 fcf5 	bl	80051c4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	441a      	add	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	3b01      	subs	r3, #1
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	441a      	add	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d114      	bne.n	8003856 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01a      	beq.n	800386a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3310      	adds	r3, #16
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f8cb 	bl	80049d4 <xTaskRemoveFromEventList>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <xQueueGenericReset+0xcc>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	e009      	b.n	800386a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3310      	adds	r3, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fef2 	bl	8003644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff feed 	bl	8003644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800386a:	f001 fcdb 	bl	8005224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800386e:	2301      	movs	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	; 0x38
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <xQueueGenericCreateStatic+0x52>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <xQueueGenericCreateStatic+0x56>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <xQueueGenericCreateStatic+0x58>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	623b      	str	r3, [r7, #32]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <xQueueGenericCreateStatic+0x7e>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <xQueueGenericCreateStatic+0x82>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericCreateStatic+0x84>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	61fb      	str	r3, [r7, #28]
}
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800391a:	2348      	movs	r3, #72	; 0x48
 800391c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b48      	cmp	r3, #72	; 0x48
 8003922:	d00a      	beq.n	800393a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	61bb      	str	r3, [r7, #24]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800394c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f843 	bl	80039e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3730      	adds	r7, #48	; 0x30
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af02      	add	r7, sp, #8
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xQueueGenericCreate+0x2a>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	613b      	str	r3, [r7, #16]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e004      	b.n	80039aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3348      	adds	r3, #72	; 0x48
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fd2a 	bl	8005408 <pvPortMalloc>
 80039b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00f      	beq.n	80039dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	3348      	adds	r3, #72	; 0x48
 80039c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039ca:	79fa      	ldrb	r2, [r7, #7]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f805 	bl	80039e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039dc:	69bb      	ldr	r3, [r7, #24]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e002      	b.n	8003a08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a14:	2101      	movs	r1, #1
 8003a16:	69b8      	ldr	r0, [r7, #24]
 8003a18:	f7ff fec8 	bl	80037ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueGenericSend+0x32>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <xQueueGenericSend+0x40>
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xQueueGenericSend+0x44>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <xQueueGenericSend+0x46>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <xQueueGenericSend+0x60>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d103      	bne.n	8003a92 <xQueueGenericSend+0x6e>
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <xQueueGenericSend+0x72>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueGenericSend+0x74>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	623b      	str	r3, [r7, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ab2:	f001 f951 	bl	8004d58 <xTaskGetSchedulerState>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xQueueGenericSend+0x9e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueGenericSend+0xa2>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueGenericSend+0xa4>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	61fb      	str	r3, [r7, #28]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ae2:	f001 fb6f 	bl	80051c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <xQueueGenericSend+0xd4>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d129      	bne.n	8003b4c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afe:	f000 fa87 	bl	8004010 <prvCopyDataToQueue>
 8003b02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	3324      	adds	r3, #36	; 0x24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 ff5f 	bl	80049d4 <xTaskRemoveFromEventList>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b1c:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <xQueueGenericSend+0x1f8>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	e00a      	b.n	8003b44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <xQueueGenericSend+0x1f8>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b44:	f001 fb6e 	bl	8005224 <vPortExitCritical>
				return pdPASS;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e063      	b.n	8003c14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b52:	f001 fb67 	bl	8005224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e05c      	b.n	8003c14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ff97 	bl	8004a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b6e:	f001 fb59 	bl	8005224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b72:	f000 fd47 	bl	8004604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b76:	f001 fb25 	bl	80051c4 <vPortEnterCritical>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d103      	bne.n	8003b90 <xQueueGenericSend+0x16c>
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x182>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba6:	f001 fb3d 	bl	8005224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003baa:	1d3a      	adds	r2, r7, #4
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 ff86 	bl	8004ac4 <xTaskCheckForTimeOut>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d124      	bne.n	8003c08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc0:	f000 fb1e 	bl	8004200 <prvIsQueueFull>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d018      	beq.n	8003bfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	3310      	adds	r3, #16
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 feda 	bl	800498c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bda:	f000 faa9 	bl	8004130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bde:	f000 fd1f 	bl	8004620 <xTaskResumeAll>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f af7c 	bne.w	8003ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <xQueueGenericSend+0x1f8>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	e772      	b.n	8003ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfe:	f000 fa97 	bl	8004130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c02:	f000 fd0d 	bl	8004620 <xTaskResumeAll>
 8003c06:	e76c      	b.n	8003ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c0a:	f000 fa91 	bl	8004130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c0e:	f000 fd07 	bl	8004620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c12:	2300      	movs	r3, #0
		}
	}
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3738      	adds	r7, #56	; 0x38
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <xQueueGenericSendFromISR+0x3c>
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <xQueueGenericSendFromISR+0x40>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <xQueueGenericSendFromISR+0x42>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	623b      	str	r3, [r7, #32]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d103      	bne.n	8003c8a <xQueueGenericSendFromISR+0x6a>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <xQueueGenericSendFromISR+0x6e>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueGenericSendFromISR+0x70>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61fb      	str	r3, [r7, #28]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003caa:	f001 fb6d 	bl	8005388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cae:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	61ba      	str	r2, [r7, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <xQueueGenericSendFromISR+0xbc>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d12c      	bne.n	8003d36 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cec:	f000 f990 	bl	8004010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d112      	bne.n	8003d20 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	3324      	adds	r3, #36	; 0x24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fe64 	bl	80049d4 <xTaskRemoveFromEventList>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	b25a      	sxtb	r2, r3
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d34:	e001      	b.n	8003d3a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3738      	adds	r7, #56	; 0x38
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <xQueueReceive+0x30>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	623b      	str	r3, [r7, #32]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <xQueueReceive+0x3e>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <xQueueReceive+0x42>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <xQueueReceive+0x44>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xQueueReceive+0x5e>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61fb      	str	r3, [r7, #28]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dae:	f000 ffd3 	bl	8004d58 <xTaskGetSchedulerState>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <xQueueReceive+0x6e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <xQueueReceive+0x72>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <xQueueReceive+0x74>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xQueueReceive+0x8e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	61bb      	str	r3, [r7, #24]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dde:	f001 f9f1 	bl	80051c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01f      	beq.n	8003e2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df2:	f000 f977 	bl	80040e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00f      	beq.n	8003e26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	3310      	adds	r3, #16
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fde2 	bl	80049d4 <xTaskRemoveFromEventList>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <xQueueReceive+0x1bc>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e26:	f001 f9fd 	bl	8005224 <vPortExitCritical>
				return pdPASS;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e069      	b.n	8003f02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e34:	f001 f9f6 	bl	8005224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e062      	b.n	8003f02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fe26 	bl	8004a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e50:	f001 f9e8 	bl	8005224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e54:	f000 fbd6 	bl	8004604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e58:	f001 f9b4 	bl	80051c4 <vPortEnterCritical>
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d103      	bne.n	8003e72 <xQueueReceive+0x122>
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0x138>
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e88:	f001 f9cc 	bl	8005224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e8c:	1d3a      	adds	r2, r7, #4
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe15 	bl	8004ac4 <xTaskCheckForTimeOut>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d123      	bne.n	8003ee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea2:	f000 f997 	bl	80041d4 <prvIsQueueEmpty>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	3324      	adds	r3, #36	; 0x24
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fd69 	bl	800498c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebc:	f000 f938 	bl	8004130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec0:	f000 fbae 	bl	8004620 <xTaskResumeAll>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d189      	bne.n	8003dde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <xQueueReceive+0x1bc>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	e780      	b.n	8003dde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ede:	f000 f927 	bl	8004130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee2:	f000 fb9d 	bl	8004620 <xTaskResumeAll>
 8003ee6:	e77a      	b.n	8003dde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eea:	f000 f921 	bl	8004130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eee:	f000 fb97 	bl	8004620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f000 f96e 	bl	80041d4 <prvIsQueueEmpty>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f43f af6f 	beq.w	8003dde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3730      	adds	r7, #48	; 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	623b      	str	r3, [r7, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <xQueueReceiveFromISR+0x3a>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <xQueueReceiveFromISR+0x3e>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueReceiveFromISR+0x40>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	61fb      	str	r3, [r7, #28]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f6a:	f001 fa0d 	bl	8005388 <vPortValidateInterruptPriority>
	__asm volatile
 8003f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	61ba      	str	r2, [r7, #24]
 8003f84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02f      	beq.n	8003ff6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa4:	f000 f89e 	bl	80040e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d112      	bne.n	8003fe0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	3310      	adds	r3, #16
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd04 	bl	80049d4 <xTaskRemoveFromEventList>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	b25a      	sxtb	r2, r3
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff4:	e001      	b.n	8003ffa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f383 8811 	msr	BASEPRI, r3
}
 8004004:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004008:	4618      	mov	r0, r3
 800400a:	3738      	adds	r7, #56	; 0x38
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d14d      	bne.n	80040d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 feaa 	bl	8004d94 <xTaskPriorityDisinherit>
 8004040:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	e043      	b.n	80040d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d119      	bne.n	8004084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6898      	ldr	r0, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	461a      	mov	r2, r3
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f001 fbd8 	bl	8005810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	441a      	add	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d32b      	bcc.n	80040d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	e026      	b.n	80040d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68d8      	ldr	r0, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	461a      	mov	r2, r3
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	f001 fbbe 	bl	8005810 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	425b      	negs	r3, r3
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d207      	bcs.n	80040c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	425b      	negs	r3, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d105      	bne.n	80040d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040da:	697b      	ldr	r3, [r7, #20]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d303      	bcc.n	8004118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	461a      	mov	r2, r3
 8004122:	6838      	ldr	r0, [r7, #0]
 8004124:	f001 fb74 	bl	8005810 <memcpy>
	}
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004138:	f001 f844 	bl	80051c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004144:	e011      	b.n	800416a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fc3e 	bl	80049d4 <xTaskRemoveFromEventList>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800415e:	f000 fd13 	bl	8004b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	3b01      	subs	r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dce9      	bgt.n	8004146 <prvUnlockQueue+0x16>
 8004172:	e000      	b.n	8004176 <prvUnlockQueue+0x46>
					break;
 8004174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800417e:	f001 f851 	bl	8005224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004182:	f001 f81f 	bl	80051c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800418e:	e011      	b.n	80041b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3310      	adds	r3, #16
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fc19 	bl	80049d4 <xTaskRemoveFromEventList>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a8:	f000 fcee 	bl	8004b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	dce9      	bgt.n	8004190 <prvUnlockQueue+0x60>
 80041bc:	e000      	b.n	80041c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041c8:	f001 f82c 	bl	8005224 <vPortExitCritical>
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041dc:	f000 fff2 	bl	80051c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 f817 	bl	8005224 <vPortExitCritical>

	return xReturn;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004208:	f000 ffdc 	bl	80051c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	429a      	cmp	r2, r3
 8004216:	d102      	bne.n	800421e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e001      	b.n	8004222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004222:	f000 ffff 	bl	8005224 <vPortExitCritical>

	return xReturn;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af04      	add	r7, sp, #16
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	623b      	str	r3, [r7, #32]
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xTaskCreateStatic+0x46>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61fb      	str	r3, [r7, #28]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004276:	2354      	movs	r3, #84	; 0x54
 8004278:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b54      	cmp	r3, #84	; 0x54
 800427e:	d00a      	beq.n	8004296 <xTaskCreateStatic+0x66>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	61bb      	str	r3, [r7, #24]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01e      	beq.n	80042da <xTaskCreateStatic+0xaa>
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042b4:	2300      	movs	r3, #0
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f850 	bl	8004372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d4:	f000 f8cc 	bl	8004470 <prvAddNewTaskToReadyList>
 80042d8:	e001      	b.n	80042de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042de:	697b      	ldr	r3, [r7, #20]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3728      	adds	r7, #40	; 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f883 	bl	8005408 <pvPortMalloc>
 8004302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800430a:	2054      	movs	r0, #84	; 0x54
 800430c:	f001 f87c 	bl	8005408 <pvPortMalloc>
 8004310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
 800431e:	e005      	b.n	800432c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f001 f935 	bl	8005590 <vPortFree>
 8004326:	e001      	b.n	800432c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d017      	beq.n	8004362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	2300      	movs	r3, #0
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f80e 	bl	8004372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004356:	69f8      	ldr	r0, [r7, #28]
 8004358:	f000 f88a 	bl	8004470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e002      	b.n	8004368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004368:	69bb      	ldr	r3, [r7, #24]
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800438a:	3b01      	subs	r3, #1
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f023 0307 	bic.w	r3, r3, #7
 8004398:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	617b      	str	r3, [r7, #20]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e012      	b.n	80043e6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	7819      	ldrb	r1, [r3, #0]
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	3334      	adds	r3, #52	; 0x34
 80043d0:	460a      	mov	r2, r1
 80043d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b0f      	cmp	r3, #15
 80043ea:	d9e9      	bls.n	80043c0 <prvInitialiseNewTask+0x4e>
 80043ec:	e000      	b.n	80043f0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80043ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d901      	bls.n	8004402 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043fe:	2306      	movs	r3, #6
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2200      	movs	r2, #0
 8004412:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff f933 	bl	8003684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f92e 	bl	8003684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f1c3 0207 	rsb	r2, r3, #7
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	69b8      	ldr	r0, [r7, #24]
 8004452:	f000 fd8b 	bl	8004f6c <pxPortInitialiseStack>
 8004456:	4602      	mov	r2, r0
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004468:	bf00      	nop
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004478:	f000 fea4 	bl	80051c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	4a29      	ldr	r2, [pc, #164]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 8004484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800448e:	4a27      	ldr	r2, [pc, #156]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <prvAddNewTaskToReadyList+0xb8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d110      	bne.n	80044be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800449c:	f000 fb98 	bl	8004bd0 <prvInitialiseTaskLists>
 80044a0:	e00d      	b.n	80044be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <prvAddNewTaskToReadyList+0xc0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d802      	bhi.n	80044be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <prvAddNewTaskToReadyList+0xc4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <prvAddNewTaskToReadyList+0xc4>)
 80044c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <prvAddNewTaskToReadyList+0xc8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <prvAddNewTaskToReadyList+0xc8>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <prvAddNewTaskToReadyList+0xcc>)
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7ff f8d4 	bl	800369e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044f6:	f000 fe95 	bl	8005224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <prvAddNewTaskToReadyList+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvAddNewTaskToReadyList+0xbc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d207      	bcs.n	8004520 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <prvAddNewTaskToReadyList+0xd0>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200003e8 	.word	0x200003e8
 800452c:	200002e8 	.word	0x200002e8
 8004530:	200003f4 	.word	0x200003f4
 8004534:	20000404 	.word	0x20000404
 8004538:	200003f0 	.word	0x200003f0
 800453c:	200002ec 	.word	0x200002ec
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004552:	463a      	mov	r2, r7
 8004554:	1d39      	adds	r1, r7, #4
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4618      	mov	r0, r3
 800455c:	f7fb fe90 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	9202      	str	r2, [sp, #8]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	2300      	movs	r3, #0
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	460a      	mov	r2, r1
 8004572:	491e      	ldr	r1, [pc, #120]	; (80045ec <vTaskStartScheduler+0xa8>)
 8004574:	481e      	ldr	r0, [pc, #120]	; (80045f0 <vTaskStartScheduler+0xac>)
 8004576:	f7ff fe5b 	bl	8004230 <xTaskCreateStatic>
 800457a:	4603      	mov	r3, r0
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <vTaskStartScheduler+0xb0>)
 800457e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <vTaskStartScheduler+0xb0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	e001      	b.n	8004592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d116      	bne.n	80045c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	613b      	str	r3, [r7, #16]
}
 80045aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045ac:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <vTaskStartScheduler+0xb4>)
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <vTaskStartScheduler+0xb8>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <vTaskStartScheduler+0xbc>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045c0:	f000 fd5e 	bl	8005080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045c4:	e00e      	b.n	80045e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d10a      	bne.n	80045e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60fb      	str	r3, [r7, #12]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <vTaskStartScheduler+0x9e>
}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	08006110 	.word	0x08006110
 80045f0:	08004ba1 	.word	0x08004ba1
 80045f4:	2000040c 	.word	0x2000040c
 80045f8:	20000408 	.word	0x20000408
 80045fc:	200003f4 	.word	0x200003f4
 8004600:	200003ec 	.word	0x200003ec

08004604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <vTaskSuspendAll+0x18>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	4a03      	ldr	r2, [pc, #12]	; (800461c <vTaskSuspendAll+0x18>)
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000410 	.word	0x20000410

08004620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <xTaskResumeAll+0x114>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xTaskResumeAll+0x2c>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	603b      	str	r3, [r7, #0]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800464c:	f000 fdba 	bl	80051c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004650:	4b38      	ldr	r3, [pc, #224]	; (8004734 <xTaskResumeAll+0x114>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	4a37      	ldr	r2, [pc, #220]	; (8004734 <xTaskResumeAll+0x114>)
 8004658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <xTaskResumeAll+0x114>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d161      	bne.n	8004726 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004662:	4b35      	ldr	r3, [pc, #212]	; (8004738 <xTaskResumeAll+0x118>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d05d      	beq.n	8004726 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800466a:	e02e      	b.n	80046ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <xTaskResumeAll+0x11c>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3318      	adds	r3, #24
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f86d 	bl	8003758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3304      	adds	r3, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f868 	bl	8003758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <xTaskResumeAll+0x120>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4313      	orrs	r3, r2
 8004696:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <xTaskResumeAll+0x120>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a27      	ldr	r2, [pc, #156]	; (8004744 <xTaskResumeAll+0x124>)
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe fff4 	bl	800369e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <xTaskResumeAll+0x128>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <xTaskResumeAll+0x12c>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <xTaskResumeAll+0x11c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1cc      	bne.n	800466c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046d8:	f000 fb18 	bl	8004d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <xTaskResumeAll+0x130>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d010      	beq.n	800470a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046e8:	f000 f836 	bl	8004758 <xTaskIncrementTick>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <xTaskResumeAll+0x12c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f1      	bne.n	80046e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <xTaskResumeAll+0x130>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <xTaskResumeAll+0x12c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <xTaskResumeAll+0x134>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004726:	f000 fd7d 	bl	8005224 <vPortExitCritical>

	return xAlreadyYielded;
 800472a:	68bb      	ldr	r3, [r7, #8]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000410 	.word	0x20000410
 8004738:	200003e8 	.word	0x200003e8
 800473c:	200003a8 	.word	0x200003a8
 8004740:	200003f0 	.word	0x200003f0
 8004744:	200002ec 	.word	0x200002ec
 8004748:	200002e8 	.word	0x200002e8
 800474c:	200003fc 	.word	0x200003fc
 8004750:	200003f8 	.word	0x200003f8
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <xTaskIncrementTick+0x150>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 808d 	bne.w	8004886 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <xTaskIncrementTick+0x154>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004774:	4a4d      	ldr	r2, [pc, #308]	; (80048ac <xTaskIncrementTick+0x154>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d120      	bne.n	80047c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004780:	4b4b      	ldr	r3, [pc, #300]	; (80048b0 <xTaskIncrementTick+0x158>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xTaskIncrementTick+0x46>
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <xTaskIncrementTick+0x15c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a41      	ldr	r2, [pc, #260]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <xTaskIncrementTick+0x15c>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <xTaskIncrementTick+0x160>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <xTaskIncrementTick+0x160>)
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	f000 faa5 	bl	8004d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c2:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <xTaskIncrementTick+0x164>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d34d      	bcc.n	8004868 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047cc:	4b38      	ldr	r3, [pc, #224]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <xTaskIncrementTick+0x82>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xTaskIncrementTick+0x84>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e0:	4b36      	ldr	r3, [pc, #216]	; (80048bc <xTaskIncrementTick+0x164>)
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	601a      	str	r2, [r3, #0]
					break;
 80047e8:	e03e      	b.n	8004868 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d203      	bcs.n	800480a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004802:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <xTaskIncrementTick+0x164>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6013      	str	r3, [r2, #0]
						break;
 8004808:	e02e      	b.n	8004868 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe ffa2 	bl	8003758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe ff99 	bl	8003758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	2201      	movs	r2, #1
 800482c:	409a      	lsls	r2, r3
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004846:	441a      	add	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7fe ff25 	bl	800369e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <xTaskIncrementTick+0x170>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	429a      	cmp	r2, r3
 8004860:	d3b4      	bcc.n	80047cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004866:	e7b1      	b.n	80047cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <xTaskIncrementTick+0x170>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4915      	ldr	r1, [pc, #84]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d907      	bls.n	8004890 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e004      	b.n	8004890 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <xTaskIncrementTick+0x174>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <xTaskIncrementTick+0x174>)
 800488e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <xTaskIncrementTick+0x178>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800489c:	697b      	ldr	r3, [r7, #20]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000410 	.word	0x20000410
 80048ac:	200003ec 	.word	0x200003ec
 80048b0:	200003a0 	.word	0x200003a0
 80048b4:	200003a4 	.word	0x200003a4
 80048b8:	20000400 	.word	0x20000400
 80048bc:	20000408 	.word	0x20000408
 80048c0:	200003f0 	.word	0x200003f0
 80048c4:	200002ec 	.word	0x200002ec
 80048c8:	200002e8 	.word	0x200002e8
 80048cc:	200003f8 	.word	0x200003f8
 80048d0:	200003fc 	.word	0x200003fc

080048d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <vTaskSwitchContext+0xa4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <vTaskSwitchContext+0xa8>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048e8:	e03f      	b.n	800496a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <vTaskSwitchContext+0xa8>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048f0:	4b23      	ldr	r3, [pc, #140]	; (8004980 <vTaskSwitchContext+0xac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	f1c3 031f 	rsb	r3, r3, #31
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	491f      	ldr	r1, [pc, #124]	; (8004984 <vTaskSwitchContext+0xb0>)
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <vTaskSwitchContext+0x5c>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	607b      	str	r3, [r7, #4]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <vTaskSwitchContext+0x5a>
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <vTaskSwitchContext+0xb0>)
 800493c:	4413      	add	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3308      	adds	r3, #8
 8004952:	429a      	cmp	r2, r3
 8004954:	d104      	bne.n	8004960 <vTaskSwitchContext+0x8c>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <vTaskSwitchContext+0xb4>)
 8004968:	6013      	str	r3, [r2, #0]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000410 	.word	0x20000410
 800497c:	200003fc 	.word	0x200003fc
 8004980:	200003f0 	.word	0x200003f0
 8004984:	200002ec 	.word	0x200002ec
 8004988:	200002e8 	.word	0x200002e8

0800498c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60fb      	str	r3, [r7, #12]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <vTaskPlaceOnEventList+0x44>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3318      	adds	r3, #24
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe fe93 	bl	80036e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049c0:	2101      	movs	r1, #1
 80049c2:	6838      	ldr	r0, [r7, #0]
 80049c4:	f000 fa6c 	bl	8004ea0 <prvAddCurrentTaskToDelayedList>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200002e8 	.word	0x200002e8

080049d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3318      	adds	r3, #24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fea7 	bl	8003758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <xTaskRemoveFromEventList+0xac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11c      	bne.n	8004a4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fe9e 	bl	8003758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <xTaskRemoveFromEventList+0xb0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <xTaskRemoveFromEventList+0xb0>)
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <xTaskRemoveFromEventList+0xb4>)
 8004a3c:	441a      	add	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f7fe fe2a 	bl	800369e <vListInsertEnd>
 8004a4a:	e005      	b.n	8004a58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	4619      	mov	r1, r3
 8004a52:	480e      	ldr	r0, [pc, #56]	; (8004a8c <xTaskRemoveFromEventList+0xb8>)
 8004a54:	f7fe fe23 	bl	800369e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <xTaskRemoveFromEventList+0xbc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d905      	bls.n	8004a72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <xTaskRemoveFromEventList+0xc0>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e001      	b.n	8004a76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004a76:	697b      	ldr	r3, [r7, #20]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000410 	.word	0x20000410
 8004a84:	200003f0 	.word	0x200003f0
 8004a88:	200002ec 	.word	0x200002ec
 8004a8c:	200003a8 	.word	0x200003a8
 8004a90:	200002e8 	.word	0x200002e8
 8004a94:	200003fc 	.word	0x200003fc

08004a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <vTaskInternalSetTimeOutState+0x24>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <vTaskInternalSetTimeOutState+0x28>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000400 	.word	0x20000400
 8004ac0:	200003ec 	.word	0x200003ec

08004ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	613b      	str	r3, [r7, #16]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b06:	f000 fb5d 	bl	80051c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <xTaskCheckForTimeOut+0xbc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d102      	bne.n	8004b2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e023      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <xTaskCheckForTimeOut+0xc0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d007      	beq.n	8004b46 <xTaskCheckForTimeOut+0x82>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e015      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d20b      	bcs.n	8004b68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff9b 	bl	8004a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e004      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b72:	f000 fb57 	bl	8005224 <vPortExitCritical>

	return xReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200003ec 	.word	0x200003ec
 8004b84:	20000400 	.word	0x20000400

08004b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <vTaskMissedYield+0x14>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	200003fc 	.word	0x200003fc

08004ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ba8:	f000 f852 	bl	8004c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <prvIdleTask+0x28>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d9f9      	bls.n	8004ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <prvIdleTask+0x2c>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc4:	e7f0      	b.n	8004ba8 <prvIdleTask+0x8>
 8004bc6:	bf00      	nop
 8004bc8:	200002ec 	.word	0x200002ec
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e00c      	b.n	8004bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <prvInitialiseTaskLists+0x60>)
 8004be8:	4413      	add	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fd2a 	bl	8003644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d9ef      	bls.n	8004bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bfc:	480d      	ldr	r0, [pc, #52]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004bfe:	f7fe fd21 	bl	8003644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c02:	480d      	ldr	r0, [pc, #52]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c04:	f7fe fd1e 	bl	8003644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c08:	480c      	ldr	r0, [pc, #48]	; (8004c3c <prvInitialiseTaskLists+0x6c>)
 8004c0a:	f7fe fd1b 	bl	8003644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <prvInitialiseTaskLists+0x70>)
 8004c10:	f7fe fd18 	bl	8003644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <prvInitialiseTaskLists+0x74>)
 8004c16:	f7fe fd15 	bl	8003644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvInitialiseTaskLists+0x78>)
 8004c1c:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <prvInitialiseTaskLists+0x7c>)
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200002ec 	.word	0x200002ec
 8004c34:	20000378 	.word	0x20000378
 8004c38:	2000038c 	.word	0x2000038c
 8004c3c:	200003a8 	.word	0x200003a8
 8004c40:	200003bc 	.word	0x200003bc
 8004c44:	200003d4 	.word	0x200003d4
 8004c48:	200003a0 	.word	0x200003a0
 8004c4c:	200003a4 	.word	0x200003a4

08004c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c56:	e019      	b.n	8004c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c58:	f000 fab4 	bl	80051c4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <prvCheckTasksWaitingTermination+0x50>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fd75 	bl	8003758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c82:	f000 facf 	bl	8005224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f810 	bl	8004cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e1      	bne.n	8004c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200003bc 	.word	0x200003bc
 8004ca4:	200003e8 	.word	0x200003e8
 8004ca8:	200003d0 	.word	0x200003d0

08004cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fc64 	bl	8005590 <vPortFree>
				vPortFree( pxTCB );
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fc61 	bl	8005590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cce:	e018      	b.n	8004d02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d103      	bne.n	8004ce2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fc58 	bl	8005590 <vPortFree>
	}
 8004ce0:	e00f      	b.n	8004d02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d00a      	beq.n	8004d02 <prvDeleteTCB+0x56>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvDeleteTCB+0x54>
	}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d12:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <prvResetNextTaskUnblockTime+0x44>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <prvResetNextTaskUnblockTime+0x14>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <prvResetNextTaskUnblockTime+0x16>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <prvResetNextTaskUnblockTime+0x48>)
 8004d28:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d2e:	e008      	b.n	8004d42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvResetNextTaskUnblockTime+0x44>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <prvResetNextTaskUnblockTime+0x48>)
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	200003a0 	.word	0x200003a0
 8004d54:	20000408 	.word	0x20000408

08004d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <xTaskGetSchedulerState+0x34>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d66:	2301      	movs	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e008      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <xTaskGetSchedulerState+0x38>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d74:	2302      	movs	r3, #2
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e001      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d7e:	687b      	ldr	r3, [r7, #4]
	}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	200003f4 	.word	0x200003f4
 8004d90:	20000410 	.word	0x20000410

08004d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06e      	beq.n	8004e88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <xTaskPriorityDisinherit+0x100>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d00a      	beq.n	8004dca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60bb      	str	r3, [r7, #8]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d044      	beq.n	8004e88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d140      	bne.n	8004e88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fca4 	bl	8003758 <uxListRemove>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d115      	bne.n	8004e42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	491f      	ldr	r1, [pc, #124]	; (8004e98 <xTaskPriorityDisinherit+0x104>)
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xTaskPriorityDisinherit+0xae>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	2201      	movs	r2, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43da      	mvns	r2, r3
 8004e38:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <xTaskPriorityDisinherit+0x108>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <xTaskPriorityDisinherit+0x108>)
 8004e40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f1c3 0207 	rsb	r2, r3, #7
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <xTaskPriorityDisinherit+0x108>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <xTaskPriorityDisinherit+0x108>)
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <xTaskPriorityDisinherit+0x104>)
 8004e76:	441a      	add	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fe fc0d 	bl	800369e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e88:	697b      	ldr	r3, [r7, #20]
	}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200002e8 	.word	0x200002e8
 8004e98:	200002ec 	.word	0x200002ec
 8004e9c:	200003f0 	.word	0x200003f0

08004ea0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004eaa:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb0:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fc4e 	bl	8003758 <uxListRemove>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	2201      	movs	r2, #1
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43da      	mvns	r2, r3
 8004ed0:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ed8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d10a      	bne.n	8004ef8 <prvAddCurrentTaskToDelayedList+0x58>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	481a      	ldr	r0, [pc, #104]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ef2:	f7fe fbd4 	bl	800369e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ef6:	e026      	b.n	8004f46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d209      	bcs.n	8004f24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f7fe fbe2 	bl	80036e6 <vListInsert>
}
 8004f22:	e010      	b.n	8004f46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7fe fbd8 	bl	80036e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d202      	bcs.n	8004f46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f40:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6013      	str	r3, [r2, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200003ec 	.word	0x200003ec
 8004f54:	200002e8 	.word	0x200002e8
 8004f58:	200003f0 	.word	0x200003f0
 8004f5c:	200003d4 	.word	0x200003d4
 8004f60:	200003a4 	.word	0x200003a4
 8004f64:	200003a0 	.word	0x200003a0
 8004f68:	20000408 	.word	0x20000408

08004f6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b04      	subs	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f9c:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <pxPortInitialiseStack+0x64>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3b14      	subs	r3, #20
 8004fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b04      	subs	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f06f 0202 	mvn.w	r2, #2
 8004fba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b20      	subs	r3, #32
 8004fc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	08004fd5 	.word	0x08004fd5

08004fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <prvTaskExitError+0x54>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d00a      	beq.n	8004ffe <prvTaskExitError+0x2a>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60fb      	str	r3, [r7, #12]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <prvTaskExitError+0x28>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
}
 8005010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005012:	bf00      	nop
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0fc      	beq.n	8005014 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	2000000c 	.word	0x2000000c
 800502c:	00000000 	.word	0x00000000

08005030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <pxCurrentTCBConst2>)
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	f380 8809 	msr	PSP, r0
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8811 	msr	BASEPRI, r0
 800504a:	4770      	bx	lr
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst2>:
 8005050:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005058:	4808      	ldr	r0, [pc, #32]	; (800507c <prvPortStartFirstTask+0x24>)
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f380 8808 	msr	MSP, r0
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8814 	msr	CONTROL, r0
 800506a:	b662      	cpsie	i
 800506c:	b661      	cpsie	f
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	df00      	svc	0
 8005078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800507a:	bf00      	nop
 800507c:	e000ed08 	.word	0xe000ed08

08005080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005086:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <xPortStartScheduler+0x120>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a46      	ldr	r2, [pc, #280]	; (80051a4 <xPortStartScheduler+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10a      	bne.n	80050a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050a6:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <xPortStartScheduler+0x120>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <xPortStartScheduler+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10a      	bne.n	80050c6 <xPortStartScheduler+0x46>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <xPortStartScheduler+0x12c>)
 80050c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <xPortStartScheduler+0x130>)
 80050ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <xPortStartScheduler+0x134>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050f4:	e009      	b.n	800510a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050f6:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <xPortStartScheduler+0x134>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <xPortStartScheduler+0x134>)
 80050fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d0ef      	beq.n	80050f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <xPortStartScheduler+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1c3 0307 	rsb	r3, r3, #7
 800511e:	2b04      	cmp	r3, #4
 8005120:	d00a      	beq.n	8005138 <xPortStartScheduler+0xb8>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005138:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <xPortStartScheduler+0x134>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <xPortStartScheduler+0x134>)
 8005140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xPortStartScheduler+0x134>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <xPortStartScheduler+0x134>)
 800514c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <xPortStartScheduler+0x138>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <xPortStartScheduler+0x138>)
 800515c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <xPortStartScheduler+0x138>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <xPortStartScheduler+0x138>)
 8005168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800516c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800516e:	f000 f8dd 	bl	800532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <xPortStartScheduler+0x13c>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005178:	f000 f8fc 	bl	8005374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <xPortStartScheduler+0x140>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <xPortStartScheduler+0x140>)
 8005182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005188:	f7ff ff66 	bl	8005058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800518c:	f7ff fba2 	bl	80048d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005190:	f7ff ff20 	bl	8004fd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	410fc271 	.word	0x410fc271
 80051a8:	410fc270 	.word	0x410fc270
 80051ac:	e000e400 	.word	0xe000e400
 80051b0:	20000414 	.word	0x20000414
 80051b4:	20000418 	.word	0x20000418
 80051b8:	e000ed20 	.word	0xe000ed20
 80051bc:	2000000c 	.word	0x2000000c
 80051c0:	e000ef34 	.word	0xe000ef34

080051c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	607b      	str	r3, [r7, #4]
}
 80051dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <vPortEnterCritical+0x58>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <vPortEnterCritical+0x58>)
 80051e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <vPortEnterCritical+0x58>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10f      	bne.n	8005210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <vPortEnterCritical+0x5c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <vPortEnterCritical+0x4c>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	603b      	str	r3, [r7, #0]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vPortEnterCritical+0x4a>
	}
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <vPortExitCritical+0x50>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <vPortExitCritical+0x24>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <vPortExitCritical+0x50>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3b01      	subs	r3, #1
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <vPortExitCritical+0x50>)
 8005250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <vPortExitCritical+0x50>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <vPortExitCritical+0x42>
 800525a:	2300      	movs	r3, #0
 800525c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f383 8811 	msr	BASEPRI, r3
}
 8005264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c
	...

08005280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005280:	f3ef 8009 	mrs	r0, PSP
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <pxCurrentTCBConst>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f01e 0f10 	tst.w	lr, #16
 8005290:	bf08      	it	eq
 8005292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052a4:	f380 8811 	msr	BASEPRI, r0
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f7ff fb10 	bl	80048d4 <vTaskSwitchContext>
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f380 8811 	msr	BASEPRI, r0
 80052bc:	bc09      	pop	{r0, r3}
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6808      	ldr	r0, [r1, #0]
 80052c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c6:	f01e 0f10 	tst.w	lr, #16
 80052ca:	bf08      	it	eq
 80052cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052d0:	f380 8809 	msr	PSP, r0
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst>:
 80052e0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005302:	f7ff fa29 	bl	8004758 <xTaskIncrementTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SysTick_Handler+0x40>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <vPortSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <vPortSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <vPortSetupTimerInterrupt+0x40>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <vPortSetupTimerInterrupt+0x44>)
 800534a:	3b01      	subs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000000 	.word	0x20000000
 800536c:	10624dd3 	.word	0x10624dd3
 8005370:	e000e014 	.word	0xe000e014

08005374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005384 <vPortEnableVFP+0x10>
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800537e:	6001      	str	r1, [r0, #0]
 8005380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005382:	bf00      	nop
 8005384:	e000ed88 	.word	0xe000ed88

08005388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d914      	bls.n	80053c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <vPortValidateInterruptPriority+0x70>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053a4:	4b15      	ldr	r3, [pc, #84]	; (80053fc <vPortValidateInterruptPriority+0x74>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20a      	bcs.n	80053c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <vPortValidateInterruptPriority+0x78>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <vPortValidateInterruptPriority+0x7c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d90a      	bls.n	80053ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	603b      	str	r3, [r7, #0]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <vPortValidateInterruptPriority+0x60>
	}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000e3f0 	.word	0xe000e3f0
 80053fc:	20000414 	.word	0x20000414
 8005400:	e000ed0c 	.word	0xe000ed0c
 8005404:	20000418 	.word	0x20000418

08005408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005414:	f7ff f8f6 	bl	8004604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005418:	4b58      	ldr	r3, [pc, #352]	; (800557c <pvPortMalloc+0x174>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005420:	f000 f910 	bl	8005644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005424:	4b56      	ldr	r3, [pc, #344]	; (8005580 <pvPortMalloc+0x178>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	f040 808e 	bne.w	800554e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01d      	beq.n	8005474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005438:	2208      	movs	r2, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d014      	beq.n	8005474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f023 0307 	bic.w	r3, r3, #7
 8005450:	3308      	adds	r3, #8
 8005452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <pvPortMalloc+0x6c>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	617b      	str	r3, [r7, #20]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d069      	beq.n	800554e <pvPortMalloc+0x146>
 800547a:	4b42      	ldr	r3, [pc, #264]	; (8005584 <pvPortMalloc+0x17c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d864      	bhi.n	800554e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <pvPortMalloc+0x180>)
 8005486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005488:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <pvPortMalloc+0x180>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548e:	e004      	b.n	800549a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d903      	bls.n	80054ac <pvPortMalloc+0xa4>
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f1      	bne.n	8005490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054ac:	4b33      	ldr	r3, [pc, #204]	; (800557c <pvPortMalloc+0x174>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d04b      	beq.n	800554e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2208      	movs	r2, #8
 80054bc:	4413      	add	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	2308      	movs	r3, #8
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d91f      	bls.n	8005518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <pvPortMalloc+0xf8>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	613b      	str	r3, [r7, #16]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005512:	69b8      	ldr	r0, [r7, #24]
 8005514:	f000 f8f8 	bl	8005708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <pvPortMalloc+0x17c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	4a18      	ldr	r2, [pc, #96]	; (8005584 <pvPortMalloc+0x17c>)
 8005524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005526:	4b17      	ldr	r3, [pc, #92]	; (8005584 <pvPortMalloc+0x17c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <pvPortMalloc+0x184>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d203      	bcs.n	800553a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <pvPortMalloc+0x17c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a15      	ldr	r2, [pc, #84]	; (800558c <pvPortMalloc+0x184>)
 8005538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <pvPortMalloc+0x178>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	431a      	orrs	r2, r3
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800554e:	f7ff f867 	bl	8004620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <pvPortMalloc+0x16a>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <pvPortMalloc+0x168>
	return pvReturn;
 8005572:	69fb      	ldr	r3, [r7, #28]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20001024 	.word	0x20001024
 8005580:	20001030 	.word	0x20001030
 8005584:	20001028 	.word	0x20001028
 8005588:	2000101c 	.word	0x2000101c
 800558c:	2000102c 	.word	0x2000102c

08005590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d048      	beq.n	8005634 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a2:	2308      	movs	r3, #8
 80055a4:	425b      	negs	r3, r3
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b21      	ldr	r3, [pc, #132]	; (800563c <vPortFree+0xac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <vPortFree+0x44>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <vPortFree+0x62>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60bb      	str	r3, [r7, #8]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b11      	ldr	r3, [pc, #68]	; (800563c <vPortFree+0xac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d019      	beq.n	8005634 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d115      	bne.n	8005634 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <vPortFree+0xac>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005618:	f7fe fff4 	bl	8004604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <vPortFree+0xb0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4413      	add	r3, r2
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <vPortFree+0xb0>)
 8005628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562a:	6938      	ldr	r0, [r7, #16]
 800562c:	f000 f86c 	bl	8005708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005630:	f7fe fff6 	bl	8004620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005634:	bf00      	nop
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20001030 	.word	0x20001030
 8005640:	20001028 	.word	0x20001028

08005644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800564e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <prvHeapInit+0xac>)
 8005652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3307      	adds	r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvHeapInit+0xac>)
 8005674:	4413      	add	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <prvHeapInit+0xb0>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <prvHeapInit+0xb0>)
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005690:	2208      	movs	r2, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <prvHeapInit+0xb4>)
 80056a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <prvHeapInit+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <prvHeapInit+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvHeapInit+0xb4>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <prvHeapInit+0xb8>)
 80056d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <prvHeapInit+0xbc>)
 80056da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <prvHeapInit+0xc0>)
 80056de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	2000041c 	.word	0x2000041c
 80056f4:	2000101c 	.word	0x2000101c
 80056f8:	20001024 	.word	0x20001024
 80056fc:	2000102c 	.word	0x2000102c
 8005700:	20001028 	.word	0x20001028
 8005704:	20001030 	.word	0x20001030

08005708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <prvInsertBlockIntoFreeList+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <prvInsertBlockIntoFreeList+0x14>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8f7      	bhi.n	8005716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d108      	bne.n	800574a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d118      	bne.n	8005790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00d      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e008      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e003      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d002      	beq.n	80057a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	2000101c 	.word	0x2000101c
 80057b8:	20001024 	.word	0x20001024

080057bc <__errno>:
 80057bc:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <__errno+0x8>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000010 	.word	0x20000010

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f000 fc4e 	bl	800607c <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08006184 	.word	0x08006184
 8005804:	08006184 	.word	0x08006184
 8005808:	08006184 	.word	0x08006184
 800580c:	08006188 	.word	0x08006188

08005810 <memcpy>:
 8005810:	440a      	add	r2, r1
 8005812:	4291      	cmp	r1, r2
 8005814:	f100 33ff 	add.w	r3, r0, #4294967295
 8005818:	d100      	bne.n	800581c <memcpy+0xc>
 800581a:	4770      	bx	lr
 800581c:	b510      	push	{r4, lr}
 800581e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005826:	4291      	cmp	r1, r2
 8005828:	d1f9      	bne.n	800581e <memcpy+0xe>
 800582a:	bd10      	pop	{r4, pc}

0800582c <memset>:
 800582c:	4402      	add	r2, r0
 800582e:	4603      	mov	r3, r0
 8005830:	4293      	cmp	r3, r2
 8005832:	d100      	bne.n	8005836 <memset+0xa>
 8005834:	4770      	bx	lr
 8005836:	f803 1b01 	strb.w	r1, [r3], #1
 800583a:	e7f9      	b.n	8005830 <memset+0x4>

0800583c <siprintf>:
 800583c:	b40e      	push	{r1, r2, r3}
 800583e:	b500      	push	{lr}
 8005840:	b09c      	sub	sp, #112	; 0x70
 8005842:	ab1d      	add	r3, sp, #116	; 0x74
 8005844:	9002      	str	r0, [sp, #8]
 8005846:	9006      	str	r0, [sp, #24]
 8005848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800584c:	4809      	ldr	r0, [pc, #36]	; (8005874 <siprintf+0x38>)
 800584e:	9107      	str	r1, [sp, #28]
 8005850:	9104      	str	r1, [sp, #16]
 8005852:	4909      	ldr	r1, [pc, #36]	; (8005878 <siprintf+0x3c>)
 8005854:	f853 2b04 	ldr.w	r2, [r3], #4
 8005858:	9105      	str	r1, [sp, #20]
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	a902      	add	r1, sp, #8
 8005860:	f000 f868 	bl	8005934 <_svfiprintf_r>
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	b01c      	add	sp, #112	; 0x70
 800586c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005870:	b003      	add	sp, #12
 8005872:	4770      	bx	lr
 8005874:	20000010 	.word	0x20000010
 8005878:	ffff0208 	.word	0xffff0208

0800587c <__ssputs_r>:
 800587c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	688e      	ldr	r6, [r1, #8]
 8005882:	429e      	cmp	r6, r3
 8005884:	4682      	mov	sl, r0
 8005886:	460c      	mov	r4, r1
 8005888:	4690      	mov	r8, r2
 800588a:	461f      	mov	r7, r3
 800588c:	d838      	bhi.n	8005900 <__ssputs_r+0x84>
 800588e:	898a      	ldrh	r2, [r1, #12]
 8005890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005894:	d032      	beq.n	80058fc <__ssputs_r+0x80>
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	6909      	ldr	r1, [r1, #16]
 800589a:	eba5 0901 	sub.w	r9, r5, r1
 800589e:	6965      	ldr	r5, [r4, #20]
 80058a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058a8:	3301      	adds	r3, #1
 80058aa:	444b      	add	r3, r9
 80058ac:	106d      	asrs	r5, r5, #1
 80058ae:	429d      	cmp	r5, r3
 80058b0:	bf38      	it	cc
 80058b2:	461d      	movcc	r5, r3
 80058b4:	0553      	lsls	r3, r2, #21
 80058b6:	d531      	bpl.n	800591c <__ssputs_r+0xa0>
 80058b8:	4629      	mov	r1, r5
 80058ba:	f000 fb39 	bl	8005f30 <_malloc_r>
 80058be:	4606      	mov	r6, r0
 80058c0:	b950      	cbnz	r0, 80058d8 <__ssputs_r+0x5c>
 80058c2:	230c      	movs	r3, #12
 80058c4:	f8ca 3000 	str.w	r3, [sl]
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d8:	6921      	ldr	r1, [r4, #16]
 80058da:	464a      	mov	r2, r9
 80058dc:	f7ff ff98 	bl	8005810 <memcpy>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	6126      	str	r6, [r4, #16]
 80058ee:	6165      	str	r5, [r4, #20]
 80058f0:	444e      	add	r6, r9
 80058f2:	eba5 0509 	sub.w	r5, r5, r9
 80058f6:	6026      	str	r6, [r4, #0]
 80058f8:	60a5      	str	r5, [r4, #8]
 80058fa:	463e      	mov	r6, r7
 80058fc:	42be      	cmp	r6, r7
 80058fe:	d900      	bls.n	8005902 <__ssputs_r+0x86>
 8005900:	463e      	mov	r6, r7
 8005902:	4632      	mov	r2, r6
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	4641      	mov	r1, r8
 8005908:	f000 faa8 	bl	8005e5c <memmove>
 800590c:	68a3      	ldr	r3, [r4, #8]
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	1b9b      	subs	r3, r3, r6
 8005912:	4432      	add	r2, r6
 8005914:	60a3      	str	r3, [r4, #8]
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	2000      	movs	r0, #0
 800591a:	e7db      	b.n	80058d4 <__ssputs_r+0x58>
 800591c:	462a      	mov	r2, r5
 800591e:	f000 fb61 	bl	8005fe4 <_realloc_r>
 8005922:	4606      	mov	r6, r0
 8005924:	2800      	cmp	r0, #0
 8005926:	d1e1      	bne.n	80058ec <__ssputs_r+0x70>
 8005928:	6921      	ldr	r1, [r4, #16]
 800592a:	4650      	mov	r0, sl
 800592c:	f000 fab0 	bl	8005e90 <_free_r>
 8005930:	e7c7      	b.n	80058c2 <__ssputs_r+0x46>
	...

08005934 <_svfiprintf_r>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	4698      	mov	r8, r3
 800593a:	898b      	ldrh	r3, [r1, #12]
 800593c:	061b      	lsls	r3, r3, #24
 800593e:	b09d      	sub	sp, #116	; 0x74
 8005940:	4607      	mov	r7, r0
 8005942:	460d      	mov	r5, r1
 8005944:	4614      	mov	r4, r2
 8005946:	d50e      	bpl.n	8005966 <_svfiprintf_r+0x32>
 8005948:	690b      	ldr	r3, [r1, #16]
 800594a:	b963      	cbnz	r3, 8005966 <_svfiprintf_r+0x32>
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	f000 faef 	bl	8005f30 <_malloc_r>
 8005952:	6028      	str	r0, [r5, #0]
 8005954:	6128      	str	r0, [r5, #16]
 8005956:	b920      	cbnz	r0, 8005962 <_svfiprintf_r+0x2e>
 8005958:	230c      	movs	r3, #12
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e0d1      	b.n	8005b06 <_svfiprintf_r+0x1d2>
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	616b      	str	r3, [r5, #20]
 8005966:	2300      	movs	r3, #0
 8005968:	9309      	str	r3, [sp, #36]	; 0x24
 800596a:	2320      	movs	r3, #32
 800596c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005970:	f8cd 800c 	str.w	r8, [sp, #12]
 8005974:	2330      	movs	r3, #48	; 0x30
 8005976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b20 <_svfiprintf_r+0x1ec>
 800597a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800597e:	f04f 0901 	mov.w	r9, #1
 8005982:	4623      	mov	r3, r4
 8005984:	469a      	mov	sl, r3
 8005986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598a:	b10a      	cbz	r2, 8005990 <_svfiprintf_r+0x5c>
 800598c:	2a25      	cmp	r2, #37	; 0x25
 800598e:	d1f9      	bne.n	8005984 <_svfiprintf_r+0x50>
 8005990:	ebba 0b04 	subs.w	fp, sl, r4
 8005994:	d00b      	beq.n	80059ae <_svfiprintf_r+0x7a>
 8005996:	465b      	mov	r3, fp
 8005998:	4622      	mov	r2, r4
 800599a:	4629      	mov	r1, r5
 800599c:	4638      	mov	r0, r7
 800599e:	f7ff ff6d 	bl	800587c <__ssputs_r>
 80059a2:	3001      	adds	r0, #1
 80059a4:	f000 80aa 	beq.w	8005afc <_svfiprintf_r+0x1c8>
 80059a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059aa:	445a      	add	r2, fp
 80059ac:	9209      	str	r2, [sp, #36]	; 0x24
 80059ae:	f89a 3000 	ldrb.w	r3, [sl]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80a2 	beq.w	8005afc <_svfiprintf_r+0x1c8>
 80059b8:	2300      	movs	r3, #0
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c2:	f10a 0a01 	add.w	sl, sl, #1
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ce:	931a      	str	r3, [sp, #104]	; 0x68
 80059d0:	4654      	mov	r4, sl
 80059d2:	2205      	movs	r2, #5
 80059d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d8:	4851      	ldr	r0, [pc, #324]	; (8005b20 <_svfiprintf_r+0x1ec>)
 80059da:	f7fa fc01 	bl	80001e0 <memchr>
 80059de:	9a04      	ldr	r2, [sp, #16]
 80059e0:	b9d8      	cbnz	r0, 8005a1a <_svfiprintf_r+0xe6>
 80059e2:	06d0      	lsls	r0, r2, #27
 80059e4:	bf44      	itt	mi
 80059e6:	2320      	movmi	r3, #32
 80059e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ec:	0711      	lsls	r1, r2, #28
 80059ee:	bf44      	itt	mi
 80059f0:	232b      	movmi	r3, #43	; 0x2b
 80059f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f6:	f89a 3000 	ldrb.w	r3, [sl]
 80059fa:	2b2a      	cmp	r3, #42	; 0x2a
 80059fc:	d015      	beq.n	8005a2a <_svfiprintf_r+0xf6>
 80059fe:	9a07      	ldr	r2, [sp, #28]
 8005a00:	4654      	mov	r4, sl
 8005a02:	2000      	movs	r0, #0
 8005a04:	f04f 0c0a 	mov.w	ip, #10
 8005a08:	4621      	mov	r1, r4
 8005a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a0e:	3b30      	subs	r3, #48	; 0x30
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d94e      	bls.n	8005ab2 <_svfiprintf_r+0x17e>
 8005a14:	b1b0      	cbz	r0, 8005a44 <_svfiprintf_r+0x110>
 8005a16:	9207      	str	r2, [sp, #28]
 8005a18:	e014      	b.n	8005a44 <_svfiprintf_r+0x110>
 8005a1a:	eba0 0308 	sub.w	r3, r0, r8
 8005a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	46a2      	mov	sl, r4
 8005a28:	e7d2      	b.n	80059d0 <_svfiprintf_r+0x9c>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9103      	str	r1, [sp, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfbb      	ittet	lt
 8005a36:	425b      	neglt	r3, r3
 8005a38:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3c:	9307      	strge	r3, [sp, #28]
 8005a3e:	9307      	strlt	r3, [sp, #28]
 8005a40:	bfb8      	it	lt
 8005a42:	9204      	strlt	r2, [sp, #16]
 8005a44:	7823      	ldrb	r3, [r4, #0]
 8005a46:	2b2e      	cmp	r3, #46	; 0x2e
 8005a48:	d10c      	bne.n	8005a64 <_svfiprintf_r+0x130>
 8005a4a:	7863      	ldrb	r3, [r4, #1]
 8005a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4e:	d135      	bne.n	8005abc <_svfiprintf_r+0x188>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	9203      	str	r2, [sp, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bfb8      	it	lt
 8005a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a60:	3402      	adds	r4, #2
 8005a62:	9305      	str	r3, [sp, #20]
 8005a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b30 <_svfiprintf_r+0x1fc>
 8005a68:	7821      	ldrb	r1, [r4, #0]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	f7fa fbb7 	bl	80001e0 <memchr>
 8005a72:	b140      	cbz	r0, 8005a86 <_svfiprintf_r+0x152>
 8005a74:	2340      	movs	r3, #64	; 0x40
 8005a76:	eba0 000a 	sub.w	r0, r0, sl
 8005a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	4303      	orrs	r3, r0
 8005a82:	3401      	adds	r4, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	4826      	ldr	r0, [pc, #152]	; (8005b24 <_svfiprintf_r+0x1f0>)
 8005a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a90:	2206      	movs	r2, #6
 8005a92:	f7fa fba5 	bl	80001e0 <memchr>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d038      	beq.n	8005b0c <_svfiprintf_r+0x1d8>
 8005a9a:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <_svfiprintf_r+0x1f4>)
 8005a9c:	bb1b      	cbnz	r3, 8005ae6 <_svfiprintf_r+0x1b2>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	f023 0307 	bic.w	r3, r3, #7
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	9303      	str	r3, [sp, #12]
 8005aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aac:	4433      	add	r3, r6
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	e767      	b.n	8005982 <_svfiprintf_r+0x4e>
 8005ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	2001      	movs	r0, #1
 8005aba:	e7a5      	b.n	8005a08 <_svfiprintf_r+0xd4>
 8005abc:	2300      	movs	r3, #0
 8005abe:	3401      	adds	r4, #1
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f04f 0c0a 	mov.w	ip, #10
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ace:	3a30      	subs	r2, #48	; 0x30
 8005ad0:	2a09      	cmp	r2, #9
 8005ad2:	d903      	bls.n	8005adc <_svfiprintf_r+0x1a8>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0c5      	beq.n	8005a64 <_svfiprintf_r+0x130>
 8005ad8:	9105      	str	r1, [sp, #20]
 8005ada:	e7c3      	b.n	8005a64 <_svfiprintf_r+0x130>
 8005adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7f0      	b.n	8005ac8 <_svfiprintf_r+0x194>
 8005ae6:	ab03      	add	r3, sp, #12
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462a      	mov	r2, r5
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <_svfiprintf_r+0x1f8>)
 8005aee:	a904      	add	r1, sp, #16
 8005af0:	4638      	mov	r0, r7
 8005af2:	f3af 8000 	nop.w
 8005af6:	1c42      	adds	r2, r0, #1
 8005af8:	4606      	mov	r6, r0
 8005afa:	d1d6      	bne.n	8005aaa <_svfiprintf_r+0x176>
 8005afc:	89ab      	ldrh	r3, [r5, #12]
 8005afe:	065b      	lsls	r3, r3, #25
 8005b00:	f53f af2c 	bmi.w	800595c <_svfiprintf_r+0x28>
 8005b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b06:	b01d      	add	sp, #116	; 0x74
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	ab03      	add	r3, sp, #12
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	462a      	mov	r2, r5
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <_svfiprintf_r+0x1f8>)
 8005b14:	a904      	add	r1, sp, #16
 8005b16:	4638      	mov	r0, r7
 8005b18:	f000 f87a 	bl	8005c10 <_printf_i>
 8005b1c:	e7eb      	b.n	8005af6 <_svfiprintf_r+0x1c2>
 8005b1e:	bf00      	nop
 8005b20:	08006150 	.word	0x08006150
 8005b24:	0800615a 	.word	0x0800615a
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	0800587d 	.word	0x0800587d
 8005b30:	08006156 	.word	0x08006156

08005b34 <_printf_common>:
 8005b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	4616      	mov	r6, r2
 8005b3a:	4699      	mov	r9, r3
 8005b3c:	688a      	ldr	r2, [r1, #8]
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bfb8      	it	lt
 8005b48:	4613      	movlt	r3, r2
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b50:	4607      	mov	r7, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	b10a      	cbz	r2, 8005b5a <_printf_common+0x26>
 8005b56:	3301      	adds	r3, #1
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	0699      	lsls	r1, r3, #26
 8005b5e:	bf42      	ittt	mi
 8005b60:	6833      	ldrmi	r3, [r6, #0]
 8005b62:	3302      	addmi	r3, #2
 8005b64:	6033      	strmi	r3, [r6, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	f015 0506 	ands.w	r5, r5, #6
 8005b6c:	d106      	bne.n	8005b7c <_printf_common+0x48>
 8005b6e:	f104 0a19 	add.w	sl, r4, #25
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	6832      	ldr	r2, [r6, #0]
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dc26      	bgt.n	8005bca <_printf_common+0x96>
 8005b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b80:	1e13      	subs	r3, r2, #0
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	0692      	lsls	r2, r2, #26
 8005b8a:	d42b      	bmi.n	8005be4 <_printf_common+0xb0>
 8005b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b90:	4649      	mov	r1, r9
 8005b92:	4638      	mov	r0, r7
 8005b94:	47c0      	blx	r8
 8005b96:	3001      	adds	r0, #1
 8005b98:	d01e      	beq.n	8005bd8 <_printf_common+0xa4>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	68e5      	ldr	r5, [r4, #12]
 8005b9e:	6832      	ldr	r2, [r6, #0]
 8005ba0:	f003 0306 	and.w	r3, r3, #6
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	bf08      	it	eq
 8005ba8:	1aad      	subeq	r5, r5, r2
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	6922      	ldr	r2, [r4, #16]
 8005bae:	bf0c      	ite	eq
 8005bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb4:	2500      	movne	r5, #0
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bfc4      	itt	gt
 8005bba:	1a9b      	subgt	r3, r3, r2
 8005bbc:	18ed      	addgt	r5, r5, r3
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	341a      	adds	r4, #26
 8005bc2:	42b5      	cmp	r5, r6
 8005bc4:	d11a      	bne.n	8005bfc <_printf_common+0xc8>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e008      	b.n	8005bdc <_printf_common+0xa8>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	47c0      	blx	r8
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d103      	bne.n	8005be0 <_printf_common+0xac>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7c6      	b.n	8005b72 <_printf_common+0x3e>
 8005be4:	18e1      	adds	r1, r4, r3
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	2030      	movs	r0, #48	; 0x30
 8005bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bee:	4422      	add	r2, r4
 8005bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	e7c7      	b.n	8005b8c <_printf_common+0x58>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d0e6      	beq.n	8005bd8 <_printf_common+0xa4>
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7d9      	b.n	8005bc2 <_printf_common+0x8e>
	...

08005c10 <_printf_i>:
 8005c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	460c      	mov	r4, r1
 8005c16:	4691      	mov	r9, r2
 8005c18:	7e27      	ldrb	r7, [r4, #24]
 8005c1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c1c:	2f78      	cmp	r7, #120	; 0x78
 8005c1e:	4680      	mov	r8, r0
 8005c20:	469a      	mov	sl, r3
 8005c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c26:	d807      	bhi.n	8005c38 <_printf_i+0x28>
 8005c28:	2f62      	cmp	r7, #98	; 0x62
 8005c2a:	d80a      	bhi.n	8005c42 <_printf_i+0x32>
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	f000 80d8 	beq.w	8005de2 <_printf_i+0x1d2>
 8005c32:	2f58      	cmp	r7, #88	; 0x58
 8005c34:	f000 80a3 	beq.w	8005d7e <_printf_i+0x16e>
 8005c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c40:	e03a      	b.n	8005cb8 <_printf_i+0xa8>
 8005c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c46:	2b15      	cmp	r3, #21
 8005c48:	d8f6      	bhi.n	8005c38 <_printf_i+0x28>
 8005c4a:	a001      	add	r0, pc, #4	; (adr r0, 8005c50 <_printf_i+0x40>)
 8005c4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c50:	08005ca9 	.word	0x08005ca9
 8005c54:	08005cbd 	.word	0x08005cbd
 8005c58:	08005c39 	.word	0x08005c39
 8005c5c:	08005c39 	.word	0x08005c39
 8005c60:	08005c39 	.word	0x08005c39
 8005c64:	08005c39 	.word	0x08005c39
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c39 	.word	0x08005c39
 8005c70:	08005c39 	.word	0x08005c39
 8005c74:	08005c39 	.word	0x08005c39
 8005c78:	08005c39 	.word	0x08005c39
 8005c7c:	08005dc9 	.word	0x08005dc9
 8005c80:	08005ced 	.word	0x08005ced
 8005c84:	08005dab 	.word	0x08005dab
 8005c88:	08005c39 	.word	0x08005c39
 8005c8c:	08005c39 	.word	0x08005c39
 8005c90:	08005deb 	.word	0x08005deb
 8005c94:	08005c39 	.word	0x08005c39
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c39 	.word	0x08005c39
 8005ca0:	08005c39 	.word	0x08005c39
 8005ca4:	08005db3 	.word	0x08005db3
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	600a      	str	r2, [r1, #0]
 8005cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0a3      	b.n	8005e04 <_printf_i+0x1f4>
 8005cbc:	6825      	ldr	r5, [r4, #0]
 8005cbe:	6808      	ldr	r0, [r1, #0]
 8005cc0:	062e      	lsls	r6, r5, #24
 8005cc2:	f100 0304 	add.w	r3, r0, #4
 8005cc6:	d50a      	bpl.n	8005cde <_printf_i+0xce>
 8005cc8:	6805      	ldr	r5, [r0, #0]
 8005cca:	600b      	str	r3, [r1, #0]
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	da03      	bge.n	8005cd8 <_printf_i+0xc8>
 8005cd0:	232d      	movs	r3, #45	; 0x2d
 8005cd2:	426d      	negs	r5, r5
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	485e      	ldr	r0, [pc, #376]	; (8005e54 <_printf_i+0x244>)
 8005cda:	230a      	movs	r3, #10
 8005cdc:	e019      	b.n	8005d12 <_printf_i+0x102>
 8005cde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ce2:	6805      	ldr	r5, [r0, #0]
 8005ce4:	600b      	str	r3, [r1, #0]
 8005ce6:	bf18      	it	ne
 8005ce8:	b22d      	sxthne	r5, r5
 8005cea:	e7ef      	b.n	8005ccc <_printf_i+0xbc>
 8005cec:	680b      	ldr	r3, [r1, #0]
 8005cee:	6825      	ldr	r5, [r4, #0]
 8005cf0:	1d18      	adds	r0, r3, #4
 8005cf2:	6008      	str	r0, [r1, #0]
 8005cf4:	0628      	lsls	r0, r5, #24
 8005cf6:	d501      	bpl.n	8005cfc <_printf_i+0xec>
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <_printf_i+0xf2>
 8005cfc:	0669      	lsls	r1, r5, #25
 8005cfe:	d5fb      	bpl.n	8005cf8 <_printf_i+0xe8>
 8005d00:	881d      	ldrh	r5, [r3, #0]
 8005d02:	4854      	ldr	r0, [pc, #336]	; (8005e54 <_printf_i+0x244>)
 8005d04:	2f6f      	cmp	r7, #111	; 0x6f
 8005d06:	bf0c      	ite	eq
 8005d08:	2308      	moveq	r3, #8
 8005d0a:	230a      	movne	r3, #10
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d12:	6866      	ldr	r6, [r4, #4]
 8005d14:	60a6      	str	r6, [r4, #8]
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	bfa2      	ittt	ge
 8005d1a:	6821      	ldrge	r1, [r4, #0]
 8005d1c:	f021 0104 	bicge.w	r1, r1, #4
 8005d20:	6021      	strge	r1, [r4, #0]
 8005d22:	b90d      	cbnz	r5, 8005d28 <_printf_i+0x118>
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d04d      	beq.n	8005dc4 <_printf_i+0x1b4>
 8005d28:	4616      	mov	r6, r2
 8005d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d32:	5dc7      	ldrb	r7, [r0, r7]
 8005d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d38:	462f      	mov	r7, r5
 8005d3a:	42bb      	cmp	r3, r7
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	d9f4      	bls.n	8005d2a <_printf_i+0x11a>
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d10b      	bne.n	8005d5c <_printf_i+0x14c>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07df      	lsls	r7, r3, #31
 8005d48:	d508      	bpl.n	8005d5c <_printf_i+0x14c>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6861      	ldr	r1, [r4, #4]
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	bfde      	ittt	le
 8005d52:	2330      	movle	r3, #48	; 0x30
 8005d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d5c:	1b92      	subs	r2, r2, r6
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	f8cd a000 	str.w	sl, [sp]
 8005d64:	464b      	mov	r3, r9
 8005d66:	aa03      	add	r2, sp, #12
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7ff fee2 	bl	8005b34 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d14c      	bne.n	8005e0e <_printf_i+0x1fe>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b004      	add	sp, #16
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	4835      	ldr	r0, [pc, #212]	; (8005e54 <_printf_i+0x244>)
 8005d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	680e      	ldr	r6, [r1, #0]
 8005d88:	061f      	lsls	r7, r3, #24
 8005d8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d8e:	600e      	str	r6, [r1, #0]
 8005d90:	d514      	bpl.n	8005dbc <_printf_i+0x1ac>
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	bf44      	itt	mi
 8005d96:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9a:	6023      	strmi	r3, [r4, #0]
 8005d9c:	b91d      	cbnz	r5, 8005da6 <_printf_i+0x196>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f023 0320 	bic.w	r3, r3, #32
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	2310      	movs	r3, #16
 8005da8:	e7b0      	b.n	8005d0c <_printf_i+0xfc>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	f043 0320 	orr.w	r3, r3, #32
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	2378      	movs	r3, #120	; 0x78
 8005db4:	4828      	ldr	r0, [pc, #160]	; (8005e58 <_printf_i+0x248>)
 8005db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dba:	e7e3      	b.n	8005d84 <_printf_i+0x174>
 8005dbc:	065e      	lsls	r6, r3, #25
 8005dbe:	bf48      	it	mi
 8005dc0:	b2ad      	uxthmi	r5, r5
 8005dc2:	e7e6      	b.n	8005d92 <_printf_i+0x182>
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	e7bb      	b.n	8005d40 <_printf_i+0x130>
 8005dc8:	680b      	ldr	r3, [r1, #0]
 8005dca:	6826      	ldr	r6, [r4, #0]
 8005dcc:	6960      	ldr	r0, [r4, #20]
 8005dce:	1d1d      	adds	r5, r3, #4
 8005dd0:	600d      	str	r5, [r1, #0]
 8005dd2:	0635      	lsls	r5, r6, #24
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0x1cc>
 8005dd8:	6018      	str	r0, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0x1d2>
 8005ddc:	0671      	lsls	r1, r6, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0x1c8>
 8005de0:	8018      	strh	r0, [r3, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	4616      	mov	r6, r2
 8005de8:	e7ba      	b.n	8005d60 <_printf_i+0x150>
 8005dea:	680b      	ldr	r3, [r1, #0]
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	600a      	str	r2, [r1, #0]
 8005df0:	681e      	ldr	r6, [r3, #0]
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	2100      	movs	r1, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7fa f9f2 	bl	80001e0 <memchr>
 8005dfc:	b108      	cbz	r0, 8005e02 <_printf_i+0x1f2>
 8005dfe:	1b80      	subs	r0, r0, r6
 8005e00:	6060      	str	r0, [r4, #4]
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	2300      	movs	r3, #0
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0c:	e7a8      	b.n	8005d60 <_printf_i+0x150>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	4632      	mov	r2, r6
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	47d0      	blx	sl
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0ab      	beq.n	8005d74 <_printf_i+0x164>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	d413      	bmi.n	8005e4a <_printf_i+0x23a>
 8005e22:	68e0      	ldr	r0, [r4, #12]
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	4298      	cmp	r0, r3
 8005e28:	bfb8      	it	lt
 8005e2a:	4618      	movlt	r0, r3
 8005e2c:	e7a4      	b.n	8005d78 <_printf_i+0x168>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4632      	mov	r2, r6
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d09b      	beq.n	8005d74 <_printf_i+0x164>
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	9903      	ldr	r1, [sp, #12]
 8005e42:	1a5b      	subs	r3, r3, r1
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dcf2      	bgt.n	8005e2e <_printf_i+0x21e>
 8005e48:	e7eb      	b.n	8005e22 <_printf_i+0x212>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	f104 0619 	add.w	r6, r4, #25
 8005e50:	e7f5      	b.n	8005e3e <_printf_i+0x22e>
 8005e52:	bf00      	nop
 8005e54:	08006161 	.word	0x08006161
 8005e58:	08006172 	.word	0x08006172

08005e5c <memmove>:
 8005e5c:	4288      	cmp	r0, r1
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	eb01 0402 	add.w	r4, r1, r2
 8005e64:	d902      	bls.n	8005e6c <memmove+0x10>
 8005e66:	4284      	cmp	r4, r0
 8005e68:	4623      	mov	r3, r4
 8005e6a:	d807      	bhi.n	8005e7c <memmove+0x20>
 8005e6c:	1e43      	subs	r3, r0, #1
 8005e6e:	42a1      	cmp	r1, r4
 8005e70:	d008      	beq.n	8005e84 <memmove+0x28>
 8005e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e7a:	e7f8      	b.n	8005e6e <memmove+0x12>
 8005e7c:	4402      	add	r2, r0
 8005e7e:	4601      	mov	r1, r0
 8005e80:	428a      	cmp	r2, r1
 8005e82:	d100      	bne.n	8005e86 <memmove+0x2a>
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e8e:	e7f7      	b.n	8005e80 <memmove+0x24>

08005e90 <_free_r>:
 8005e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d048      	beq.n	8005f28 <_free_r+0x98>
 8005e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9a:	9001      	str	r0, [sp, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ea2:	bfb8      	it	lt
 8005ea4:	18e4      	addlt	r4, r4, r3
 8005ea6:	f000 f8d3 	bl	8006050 <__malloc_lock>
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <_free_r+0x9c>)
 8005eac:	9801      	ldr	r0, [sp, #4]
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	b933      	cbnz	r3, 8005ec2 <_free_r+0x32>
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6014      	str	r4, [r2, #0]
 8005eb8:	b003      	add	sp, #12
 8005eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ebe:	f000 b8cd 	b.w	800605c <__malloc_unlock>
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	d90b      	bls.n	8005ede <_free_r+0x4e>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	1862      	adds	r2, r4, r1
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	bf04      	itt	eq
 8005ece:	681a      	ldreq	r2, [r3, #0]
 8005ed0:	685b      	ldreq	r3, [r3, #4]
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	bf04      	itt	eq
 8005ed6:	1852      	addeq	r2, r2, r1
 8005ed8:	6022      	streq	r2, [r4, #0]
 8005eda:	602c      	str	r4, [r5, #0]
 8005edc:	e7ec      	b.n	8005eb8 <_free_r+0x28>
 8005ede:	461a      	mov	r2, r3
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b10b      	cbz	r3, 8005ee8 <_free_r+0x58>
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	d9fa      	bls.n	8005ede <_free_r+0x4e>
 8005ee8:	6811      	ldr	r1, [r2, #0]
 8005eea:	1855      	adds	r5, r2, r1
 8005eec:	42a5      	cmp	r5, r4
 8005eee:	d10b      	bne.n	8005f08 <_free_r+0x78>
 8005ef0:	6824      	ldr	r4, [r4, #0]
 8005ef2:	4421      	add	r1, r4
 8005ef4:	1854      	adds	r4, r2, r1
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	6011      	str	r1, [r2, #0]
 8005efa:	d1dd      	bne.n	8005eb8 <_free_r+0x28>
 8005efc:	681c      	ldr	r4, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	6053      	str	r3, [r2, #4]
 8005f02:	4421      	add	r1, r4
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	e7d7      	b.n	8005eb8 <_free_r+0x28>
 8005f08:	d902      	bls.n	8005f10 <_free_r+0x80>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	6003      	str	r3, [r0, #0]
 8005f0e:	e7d3      	b.n	8005eb8 <_free_r+0x28>
 8005f10:	6825      	ldr	r5, [r4, #0]
 8005f12:	1961      	adds	r1, r4, r5
 8005f14:	428b      	cmp	r3, r1
 8005f16:	bf04      	itt	eq
 8005f18:	6819      	ldreq	r1, [r3, #0]
 8005f1a:	685b      	ldreq	r3, [r3, #4]
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	bf04      	itt	eq
 8005f20:	1949      	addeq	r1, r1, r5
 8005f22:	6021      	streq	r1, [r4, #0]
 8005f24:	6054      	str	r4, [r2, #4]
 8005f26:	e7c7      	b.n	8005eb8 <_free_r+0x28>
 8005f28:	b003      	add	sp, #12
 8005f2a:	bd30      	pop	{r4, r5, pc}
 8005f2c:	20001034 	.word	0x20001034

08005f30 <_malloc_r>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	1ccd      	adds	r5, r1, #3
 8005f34:	f025 0503 	bic.w	r5, r5, #3
 8005f38:	3508      	adds	r5, #8
 8005f3a:	2d0c      	cmp	r5, #12
 8005f3c:	bf38      	it	cc
 8005f3e:	250c      	movcc	r5, #12
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	4606      	mov	r6, r0
 8005f44:	db01      	blt.n	8005f4a <_malloc_r+0x1a>
 8005f46:	42a9      	cmp	r1, r5
 8005f48:	d903      	bls.n	8005f52 <_malloc_r+0x22>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	6033      	str	r3, [r6, #0]
 8005f4e:	2000      	movs	r0, #0
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f52:	f000 f87d 	bl	8006050 <__malloc_lock>
 8005f56:	4921      	ldr	r1, [pc, #132]	; (8005fdc <_malloc_r+0xac>)
 8005f58:	680a      	ldr	r2, [r1, #0]
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	b99c      	cbnz	r4, 8005f86 <_malloc_r+0x56>
 8005f5e:	4f20      	ldr	r7, [pc, #128]	; (8005fe0 <_malloc_r+0xb0>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b923      	cbnz	r3, 8005f6e <_malloc_r+0x3e>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	f000 f862 	bl	8006030 <_sbrk_r>
 8005f6c:	6038      	str	r0, [r7, #0]
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4630      	mov	r0, r6
 8005f72:	f000 f85d 	bl	8006030 <_sbrk_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d123      	bne.n	8005fc2 <_malloc_r+0x92>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	6033      	str	r3, [r6, #0]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f86c 	bl	800605c <__malloc_unlock>
 8005f84:	e7e3      	b.n	8005f4e <_malloc_r+0x1e>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	1b5b      	subs	r3, r3, r5
 8005f8a:	d417      	bmi.n	8005fbc <_malloc_r+0x8c>
 8005f8c:	2b0b      	cmp	r3, #11
 8005f8e:	d903      	bls.n	8005f98 <_malloc_r+0x68>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	441c      	add	r4, r3
 8005f94:	6025      	str	r5, [r4, #0]
 8005f96:	e004      	b.n	8005fa2 <_malloc_r+0x72>
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	42a2      	cmp	r2, r4
 8005f9c:	bf0c      	ite	eq
 8005f9e:	600b      	streq	r3, [r1, #0]
 8005fa0:	6053      	strne	r3, [r2, #4]
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 f85a 	bl	800605c <__malloc_unlock>
 8005fa8:	f104 000b 	add.w	r0, r4, #11
 8005fac:	1d23      	adds	r3, r4, #4
 8005fae:	f020 0007 	bic.w	r0, r0, #7
 8005fb2:	1ac2      	subs	r2, r0, r3
 8005fb4:	d0cc      	beq.n	8005f50 <_malloc_r+0x20>
 8005fb6:	1a1b      	subs	r3, r3, r0
 8005fb8:	50a3      	str	r3, [r4, r2]
 8005fba:	e7c9      	b.n	8005f50 <_malloc_r+0x20>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	6864      	ldr	r4, [r4, #4]
 8005fc0:	e7cc      	b.n	8005f5c <_malloc_r+0x2c>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d0e3      	beq.n	8005f94 <_malloc_r+0x64>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f000 f82e 	bl	8006030 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d1dd      	bne.n	8005f94 <_malloc_r+0x64>
 8005fd8:	e7cf      	b.n	8005f7a <_malloc_r+0x4a>
 8005fda:	bf00      	nop
 8005fdc:	20001034 	.word	0x20001034
 8005fe0:	20001038 	.word	0x20001038

08005fe4 <_realloc_r>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	4614      	mov	r4, r2
 8005fea:	460e      	mov	r6, r1
 8005fec:	b921      	cbnz	r1, 8005ff8 <_realloc_r+0x14>
 8005fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	f7ff bf9c 	b.w	8005f30 <_malloc_r>
 8005ff8:	b922      	cbnz	r2, 8006004 <_realloc_r+0x20>
 8005ffa:	f7ff ff49 	bl	8005e90 <_free_r>
 8005ffe:	4625      	mov	r5, r4
 8006000:	4628      	mov	r0, r5
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006004:	f000 f830 	bl	8006068 <_malloc_usable_size_r>
 8006008:	42a0      	cmp	r0, r4
 800600a:	d20f      	bcs.n	800602c <_realloc_r+0x48>
 800600c:	4621      	mov	r1, r4
 800600e:	4638      	mov	r0, r7
 8006010:	f7ff ff8e 	bl	8005f30 <_malloc_r>
 8006014:	4605      	mov	r5, r0
 8006016:	2800      	cmp	r0, #0
 8006018:	d0f2      	beq.n	8006000 <_realloc_r+0x1c>
 800601a:	4631      	mov	r1, r6
 800601c:	4622      	mov	r2, r4
 800601e:	f7ff fbf7 	bl	8005810 <memcpy>
 8006022:	4631      	mov	r1, r6
 8006024:	4638      	mov	r0, r7
 8006026:	f7ff ff33 	bl	8005e90 <_free_r>
 800602a:	e7e9      	b.n	8006000 <_realloc_r+0x1c>
 800602c:	4635      	mov	r5, r6
 800602e:	e7e7      	b.n	8006000 <_realloc_r+0x1c>

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	; (800604c <_sbrk_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fbc8 	bl	80007d0 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	2000111c 	.word	0x2000111c

08006050 <__malloc_lock>:
 8006050:	4801      	ldr	r0, [pc, #4]	; (8006058 <__malloc_lock+0x8>)
 8006052:	f000 b811 	b.w	8006078 <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	20001124 	.word	0x20001124

0800605c <__malloc_unlock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_unlock+0x8>)
 800605e:	f000 b80c 	b.w	800607a <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	20001124 	.word	0x20001124

08006068 <_malloc_usable_size_r>:
 8006068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800606c:	1f18      	subs	r0, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfbc      	itt	lt
 8006072:	580b      	ldrlt	r3, [r1, r0]
 8006074:	18c0      	addlt	r0, r0, r3
 8006076:	4770      	bx	lr

08006078 <__retarget_lock_acquire_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_release_recursive>:
 800607a:	4770      	bx	lr

0800607c <_init>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr

08006088 <_fini>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	bf00      	nop
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr
