
020_freetos_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f04  08005f04  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005f04  08005f04  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f04  08005f04  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001630  20000010  08005f1c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  08005f1c  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bb4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  00036bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c5d  00000000  00000000  0003c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d89  00000000  00000000  0005de25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d232e  00000000  00000000  00072bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144edc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d2c  00000000  00000000  00144f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e10 	.word	0x08005e10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005e10 	.word	0x08005e10

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <vApplicationGetTimerTaskMemory+0x2c>)
 8000224:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <vApplicationGetTimerTaskMemory+0x30>)
 800022a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	20000280 	.word	0x20000280
 8000244:	200002d4 	.word	0x200002d4

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b5b0      	push	{r4, r5, r7, lr}
 800024a:	b092      	sub	sp, #72	; 0x48
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fae1 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f857 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f8e3 	bl	8000420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f8b1 	bl	80003c0 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <main+0x9c>)
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f8c4 	bl	80033fc <osTimerCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <main+0xa0>)
 8000278:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <main+0xa4>)
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
 800027e:	2300      	movs	r3, #0
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerOnce, NULL);
 8000282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000286:	2200      	movs	r2, #0
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 f8b6 	bl	80033fc <osTimerCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <main+0xa8>)
 8000294:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0xac>)
 8000298:	f107 041c 	add.w	r4, r7, #28
 800029c:	461d      	mov	r5, r3
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 f843 	bl	800333c <osThreadCreate>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <main+0xb0>)
 80002ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 128);
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <main+0xb4>)
 80002be:	463c      	mov	r4, r7
 80002c0:	461d      	mov	r5, r3
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002ce:	463b      	mov	r3, r7
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 f832 	bl	800333c <osThreadCreate>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a09      	ldr	r2, [pc, #36]	; (8000300 <main+0xb8>)
 80002dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002de:	f003 f826 	bl	800332e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <main+0x9a>
 80002e4:	0800056d 	.word	0x0800056d
 80002e8:	20001528 	.word	0x20001528
 80002ec:	08000591 	.word	0x08000591
 80002f0:	20001520 	.word	0x20001520
 80002f4:	08005e40 	.word	0x08005e40
 80002f8:	2000151c 	.word	0x2000151c
 80002fc:	08005e5c 	.word	0x08005e5c
 8000300:	20001524 	.word	0x20001524

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b0a6      	sub	sp, #152	; 0x98
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f005 fd74 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2258      	movs	r2, #88	; 0x58
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f005 fd66 	bl	8005e00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000334:	2301      	movs	r3, #1
 8000336:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fd28 	bl	8000db8 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036e:	f000 f92f 	bl	80005d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fc28 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800039a:	f000 f919 	bl	80005d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800039e:	2302      	movs	r3, #2
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fe83 	bl	80020b4 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b4:	f000 f90c 	bl	80005d0 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3798      	adds	r7, #152	; 0x98
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART2_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_USART2_UART_Init+0x58>)
 8000404:	f002 fb4a 	bl	8002a9c <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f8df 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000152c 	.word	0x2000152c
 800041c:	40004400 	.word	0x40004400

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800043c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a1e      	ldr	r2, [pc, #120]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <MX_GPIO_Init+0xc4>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f000 fc73 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0xc8>)
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	480d      	ldr	r0, [pc, #52]	; (80004ec <MX_GPIO_Init+0xcc>)
 80004b8:	f000 fac4 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004bc:	2320      	movs	r3, #32
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fab5 	bl	8000a44 <HAL_GPIO_Init>

}
 80004da:	bf00      	nop
 80004dc:	3728      	adds	r7, #40	; 0x28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	10210000 	.word	0x10210000
 80004ec:	48000800 	.word	0x48000800

080004f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle, 1000);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <StartDefaultTask+0x2c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000500:	4618      	mov	r0, r3
 8000502:	f002 ffaf 	bl	8003464 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2217      	movs	r2, #23
 800050a:	4905      	ldr	r1, [pc, #20]	; (8000520 <StartDefaultTask+0x30>)
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <StartDefaultTask+0x34>)
 800050e:	f002 fb13 	bl	8002b38 <HAL_UART_Transmit>
	    osDelay(2000);
 8000512:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000516:	f002 ff5d 	bl	80033d4 <osDelay>
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 800051a:	e7f4      	b.n	8000506 <StartDefaultTask+0x16>
 800051c:	20001528 	.word	0x20001528
 8000520:	08005e78 	.word	0x08005e78
 8000524:	2000152c 	.word	0x2000152c

08000528 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  // if the button is pressed
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <StartTask02+0x3c>)
 8000536:	f000 fc0f 	bl	8000d58 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10c      	bne.n	800055a <StartTask02+0x32>
		{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);  // set the LED
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f000 fc1e 	bl	8000d88 <HAL_GPIO_WritePin>
		  osTimerStart(myTimer02Handle, 4000);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <StartTask02+0x40>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000554:	4618      	mov	r0, r3
 8000556:	f002 ff85 	bl	8003464 <osTimerStart>
		}
    osDelay(20);
 800055a:	2014      	movs	r0, #20
 800055c:	f002 ff3a 	bl	80033d4 <osDelay>
	  if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  // if the button is pressed
 8000560:	e7e6      	b.n	8000530 <StartTask02+0x8>
 8000562:	bf00      	nop
 8000564:	48000800 	.word	0x48000800
 8000568:	20001520 	.word	0x20001520

0800056c <Callback01>:
  /* USER CODE END StartTask02 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\n", 28, 100);
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	221c      	movs	r2, #28
 8000578:	4903      	ldr	r1, [pc, #12]	; (8000588 <Callback01+0x1c>)
 800057a:	4804      	ldr	r0, [pc, #16]	; (800058c <Callback01+0x20>)
 800057c:	f002 fadc 	bl	8002b38 <HAL_UART_Transmit>
  /* USER CODE END Callback01 */
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	08005e90 	.word	0x08005e90
 800058c:	2000152c 	.word	0x2000152c

08000590 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);  // Reset the LED
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f000 fbf2 	bl	8000d88 <HAL_GPIO_WritePin>
  /* USER CODE END Callback02 */
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005be:	f000 f93f 	bl	8000840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40012c00 	.word	0x40012c00

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_MspInit+0x4c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_MspInit+0x4c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_MspInit+0x4c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_MspInit+0x4c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <HAL_MspInit+0x4c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_MspInit+0x4c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	210f      	movs	r1, #15
 8000616:	f06f 0001 	mvn.w	r0, #1
 800061a:	f000 f9e9 	bl	80009f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <HAL_UART_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d128      	bne.n	80006a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_UART_MspInit+0x80>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <HAL_UART_MspInit+0x80>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800067e:	230c      	movs	r3, #12
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068e:	2307      	movs	r3, #7
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 f9d2 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2019      	movs	r0, #25
 80006c6:	f000 f993 	bl	80009f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006ca:	2019      	movs	r0, #25
 80006cc:	f000 f9ac 	bl	8000a28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <HAL_InitTick+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1d      	ldr	r2, [pc, #116]	; (800074c <HAL_InitTick+0x9c>)
 80006d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_InitTick+0x9c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006e8:	f107 0210 	add.w	r2, r7, #16
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fcac 	bl	8002050 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006f8:	f001 fc88 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80006fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <HAL_InitTick+0xa0>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	3b01      	subs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_InitTick+0xa4>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_InitTick+0xa8>)
 8000710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_InitTick+0xa4>)
 8000714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000718:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_InitTick+0xa4>)
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_InitTick+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_InitTick+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <HAL_InitTick+0xa4>)
 800072e:	f001 fedf 	bl	80024f0 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d104      	bne.n	8000742 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <HAL_InitTick+0xa4>)
 800073a:	f001 ff3b 	bl	80025b4 <HAL_TIM_Base_Start_IT>
 800073e:	4603      	mov	r3, r0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3730      	adds	r7, #48	; 0x30
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	431bde83 	.word	0x431bde83
 8000754:	200015b0 	.word	0x200015b0
 8000758:	40012c00 	.word	0x40012c00

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800078e:	f001 ff81 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200015b0 	.word	0x200015b0

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490e      	ldr	r1, [pc, #56]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0b      	ldr	r4, [pc, #44]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ea:	f7ff ffd7 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f005 fad5 	bl	8005d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd29 	bl	8000248 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000804:	08005f0c 	.word	0x08005f0c
  ldr r2, =_sbss
 8000808:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800080c:	20001640 	.word	0x20001640

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f8d8 	bl	80009da <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff ff40 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fed4 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	200015fc 	.word	0x200015fc

08000868 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;  
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	200015fc 	.word	0x200015fc

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <__NVIC_EnableIRQ+0x38>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff4c 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a02:	f7ff ff61 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	68b9      	ldr	r1, [r7, #8]
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f7ff ffb1 	bl	8000974 <NVIC_EncodePriority>
 8000a12:	4602      	mov	r2, r0
 8000a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff80 	bl	8000920 <__NVIC_SetPriority>
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff54 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e160      	b.n	8000d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 8152 	beq.w	8000d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d00b      	beq.n	8000a8c <HAL_GPIO_Init+0x48>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d007      	beq.n	8000a8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a80:	2b11      	cmp	r3, #17
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b12      	cmp	r3, #18
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0xea>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d123      	bne.n	8000b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	220f      	movs	r2, #15
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	691a      	ldr	r2, [r3, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	08da      	lsrs	r2, r3, #3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0203 	and.w	r2, r3, #3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80ac 	beq.w	8000d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a5d      	ldr	r2, [pc, #372]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b5b      	ldr	r3, [pc, #364]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd0:	4a59      	ldr	r2, [pc, #356]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfa:	d025      	beq.n	8000c48 <HAL_GPIO_Init+0x204>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01f      	beq.n	8000c44 <HAL_GPIO_Init+0x200>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <HAL_GPIO_Init+0x2fc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d019      	beq.n	8000c40 <HAL_GPIO_Init+0x1fc>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_GPIO_Init+0x304>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1f4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <HAL_GPIO_Init+0x308>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1f0>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <HAL_GPIO_Init+0x30c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	e00c      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c30:	2307      	movs	r3, #7
 8000c32:	e00a      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e008      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5a:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c68:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c8c:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb6:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f ae97 	bne.w	8000a54 <HAL_GPIO_Init+0x10>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000c00 	.word	0x48000c00
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	48001400 	.word	0x48001400
 8000d50:	48001800 	.word	0x48001800
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f000 bf01 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 8160 	beq.w	80010a2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000de2:	4bae      	ldr	r3, [pc, #696]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d00c      	beq.n	8000e08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dee:	4bab      	ldr	r3, [pc, #684]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d159      	bne.n	8000eae <HAL_RCC_OscConfig+0xf6>
 8000dfa:	4ba8      	ldr	r3, [pc, #672]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e06:	d152      	bne.n	8000eae <HAL_RCC_OscConfig+0xf6>
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d102      	bne.n	8000e3a <HAL_RCC_OscConfig+0x82>
 8000e34:	4b99      	ldr	r3, [pc, #612]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	e015      	b.n	8000e66 <HAL_RCC_OscConfig+0xae>
 8000e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e62:	4b8e      	ldr	r3, [pc, #568]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e72:	fa92 f2a2 	rbit	r2, r2
 8000e76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	f042 0220 	orr.w	r2, r2, #32
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	f002 021f 	and.w	r2, r2, #31
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8102 	beq.w	80010a0 <HAL_RCC_OscConfig+0x2e8>
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 80fc 	bne.w	80010a0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f000 be93 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb8:	d106      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x110>
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a77      	ldr	r2, [pc, #476]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e030      	b.n	8000f2a <HAL_RCC_OscConfig+0x172>
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x134>
 8000ed2:	4b72      	ldr	r3, [pc, #456]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a71      	ldr	r2, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b6f      	ldr	r3, [pc, #444]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a6e      	ldr	r2, [pc, #440]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01e      	b.n	8000f2a <HAL_RCC_OscConfig+0x172>
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x15a>
 8000ef8:	4b68      	ldr	r3, [pc, #416]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a67      	ldr	r2, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b65      	ldr	r3, [pc, #404]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a64      	ldr	r2, [pc, #400]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e00b      	b.n	8000f2a <HAL_RCC_OscConfig+0x172>
 8000f12:	4b62      	ldr	r3, [pc, #392]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a61      	ldr	r2, [pc, #388]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5e      	ldr	r2, [pc, #376]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d059      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc98 	bl	8000868 <HAL_GetTick>
 8000f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fc93 	bl	8000868 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d902      	bls.n	8000f54 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f000 be40 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1ce>
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1fa>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fa2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000fba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fc6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0ab      	beq.n	8000f3e <HAL_RCC_OscConfig+0x186>
 8000fe6:	e05c      	b.n	80010a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc3e 	bl	8000868 <HAL_GetTick>
 8000fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fc39 	bl	8000868 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d902      	bls.n	8001008 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	f000 bde6 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800101c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <HAL_RCC_OscConfig+0x282>
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x2ae>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800104e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001052:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001056:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_RCC_OscConfig+0x2e4>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800106e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800107a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ab      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x23a>
 800109a:	e002      	b.n	80010a2 <HAL_RCC_OscConfig+0x2ea>
 800109c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8170 	beq.w	8001392 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b2:	4bd0      	ldr	r3, [pc, #832]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010be:	4bcd      	ldr	r3, [pc, #820]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d16d      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3ee>
 80010ca:	4bca      	ldr	r3, [pc, #808]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010d6:	d166      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x350>
 8001102:	4bbc      	ldr	r3, [pc, #752]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e013      	b.n	8001130 <HAL_RCC_OscConfig+0x378>
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001120:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800112c:	4bb1      	ldr	r3, [pc, #708]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2202      	movs	r2, #2
 8001132:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001136:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800113a:	fa92 f2a2 	rbit	r2, r2
 800113e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001142:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001146:	fab2 f282 	clz	r2, r2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	f042 0220 	orr.w	r2, r2, #32
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f002 021f 	and.w	r2, r2, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_RCC_OscConfig+0x3ba>
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	f000 bd31 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4ba0      	ldr	r3, [pc, #640]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	21f8      	movs	r1, #248	; 0xf8
 8001182:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800118a:	fa91 f1a1 	rbit	r1, r1
 800118e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001192:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001196:	fab1 f181 	clz	r1, r1
 800119a:	b2c9      	uxtb	r1, r1
 800119c:	408b      	lsls	r3, r1
 800119e:	4995      	ldr	r1, [pc, #596]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a4:	e0f5      	b.n	8001392 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8085 	beq.w	80012bc <HAL_RCC_OscConfig+0x504>
 80011b2:	2301      	movs	r3, #1
 80011b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	461a      	mov	r2, r3
 80011da:	2301      	movs	r3, #1
 80011dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb43 	bl	8000868 <HAL_GetTick>
 80011e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb3e 	bl	8000868 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d902      	bls.n	80011fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f000 bceb 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001210:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x476>
 8001228:	4b72      	ldr	r3, [pc, #456]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	e013      	b.n	8001256 <HAL_RCC_OscConfig+0x49e>
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001246:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001252:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	2202      	movs	r2, #2
 8001258:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800125c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001268:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f002 021f 	and.w	r2, r2, #31
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0af      	beq.n	80011e8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	21f8      	movs	r1, #248	; 0xf8
 8001298:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012a0:	fa91 f1a1 	rbit	r1, r1
 80012a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ac:	fab1 f181 	clz	r1, r1
 80012b0:	b2c9      	uxtb	r1, r1
 80012b2:	408b      	lsls	r3, r1
 80012b4:	494f      	ldr	r1, [pc, #316]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e06a      	b.n	8001392 <HAL_RCC_OscConfig+0x5da>
 80012bc:	2301      	movs	r3, #1
 80012be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fabe 	bl	8000868 <HAL_GetTick>
 80012ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fab9 	bl	8000868 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d902      	bls.n	8001308 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	f000 bc66 	b.w	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800131a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <HAL_RCC_OscConfig+0x580>
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	e013      	b.n	8001360 <HAL_RCC_OscConfig+0x5a8>
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001350:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_RCC_OscConfig+0x63c>)
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	2202      	movs	r2, #2
 8001362:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001366:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800136a:	fa92 f2a2 	rbit	r2, r2
 800136e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001372:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001376:	fab2 f282 	clz	r2, r2
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f002 021f 	and.w	r2, r2, #31
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1af      	bne.n	80012f2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80da 	beq.w	8001556 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d069      	beq.n	8001480 <HAL_RCC_OscConfig+0x6c8>
 80013ac:	2301      	movs	r3, #1
 80013ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x640>)
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	461a      	mov	r2, r3
 80013d2:	2301      	movs	r3, #1
 80013d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fa47 	bl	8000868 <HAL_GetTick>
 80013da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e00d      	b.n	80013fc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fa42 	bl	8000868 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d905      	bls.n	80013fc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e3ef      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	10908120 	.word	0x10908120
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	fa93 f2a3 	rbit	r2, r3
 8001422:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800142c:	2202      	movs	r2, #2
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f2a3 	rbit	r2, r3
 800143a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800143e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001440:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001448:	2102      	movs	r1, #2
 800144a:	6019      	str	r1, [r3, #0]
 800144c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f1a3 	rbit	r1, r3
 8001456:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800145a:	6019      	str	r1, [r3, #0]
  return result;
 800145c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0b0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x628>
 800147e:	e06a      	b.n	8001556 <HAL_RCC_OscConfig+0x79e>
 8001480:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001496:	601a      	str	r2, [r3, #0]
  return result;
 8001498:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800149c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x920>)
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	461a      	mov	r2, r3
 80014ae:	2300      	movs	r3, #0
 80014b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f9d9 	bl	8000868 <HAL_GetTick>
 80014b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	e009      	b.n	80014d0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f9d4 	bl	8000868 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e381      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 80014d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014d4:	2202      	movs	r2, #2
 80014d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fa93 f2a3 	rbit	r2, r3
 80014e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ec:	2202      	movs	r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f2a3 	rbit	r2, r3
 80014fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001516:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800151a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001520:	2102      	movs	r1, #2
 8001522:	6019      	str	r1, [r3, #0]
 8001524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f1a3 	rbit	r1, r3
 800152e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001532:	6019      	str	r1, [r3, #0]
  return result;
 8001534:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1b2      	bne.n	80014bc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8157 	beq.w	8001814 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a55      	ldr	r2, [pc, #340]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x924>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d11a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_RCC_OscConfig+0x924>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x924>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f957 	bl	8000868 <HAL_GetTick>
 80015ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	e009      	b.n	80015d4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c0:	f7ff f952 	bl	8000868 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2ff      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x924>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x840>
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a39      	ldr	r2, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	e02f      	b.n	8001658 <HAL_RCC_OscConfig+0x8a0>
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x864>
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0x8a0>
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x888>
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x8a0>
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06a      	beq.n	8001738 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f901 	bl	8000868 <HAL_GetTick>
 8001666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff f8fc 	bl	8000868 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e2a7      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 8001684:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016b2:	601a      	str	r2, [r3, #0]
  return result;
 80016b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x928>
 80016ce:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <HAL_RCC_OscConfig+0x91c>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	e013      	b.n	80016fc <HAL_RCC_OscConfig+0x944>
 80016d4:	40021000 	.word	0x40021000
 80016d8:	10908120 	.word	0x10908120
 80016dc:	40007000 	.word	0x40007000
 80016e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	4bc0      	ldr	r3, [pc, #768]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001700:	2102      	movs	r1, #2
 8001702:	6011      	str	r1, [r2, #0]
 8001704:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fa92 f1a2 	rbit	r1, r2
 800170e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001712:	6011      	str	r1, [r2, #0]
  return result;
 8001714:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d09a      	beq.n	800166c <HAL_RCC_OscConfig+0x8b4>
 8001736:	e063      	b.n	8001800 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff f896 	bl	8000868 <HAL_GetTick>
 800173c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff f891 	bl	8000868 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e23c      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 800175a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001788:	601a      	str	r2, [r3, #0]
  return result;
 800178a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800178e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_OscConfig+0x9f2>
 80017a4:	4b95      	ldr	r3, [pc, #596]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	e00d      	b.n	80017c6 <HAL_RCC_OscConfig+0xa0e>
 80017aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017ca:	2102      	movs	r1, #2
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fa92 f1a2 	rbit	r1, r2
 80017d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017dc:	6011      	str	r1, [r2, #0]
  return result;
 80017de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1a0      	bne.n	8001742 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001800:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a7b      	ldr	r2, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 81d9 	beq.w	8001bd2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	f000 81a6 	beq.w	8001b7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 811e 	bne.w	8001a76 <HAL_RCC_OscConfig+0xcbe>
 800183a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800183e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001852:	601a      	str	r2, [r3, #0]
  return result;
 8001854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001858:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7fe fffa 	bl	8000868 <HAL_GetTick>
 8001874:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e009      	b.n	800188e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187a:	f7fe fff5 	bl	8000868 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1a2      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 800188e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018a6:	601a      	str	r2, [r3, #0]
  return result;
 80018a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0xb10>
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0xb48>
 80018c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001918:	6011      	str	r1, [r2, #0]
  return result;
 800191a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d19e      	bne.n	800187a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f023 020f 	bic.w	r2, r3, #15
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 800194c:	4313      	orrs	r3, r2
 800194e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a19      	ldr	r1, [r3, #32]
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	430b      	orrs	r3, r1
 8001966:	4925      	ldr	r1, [pc, #148]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	601a      	str	r2, [r3, #0]
  return result;
 8001986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800198a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2301      	movs	r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe ff61 	bl	8000868 <HAL_GetTick>
 80019a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7fe ff5c 	bl	8000868 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e109      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 80019c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f2a3 	rbit	r2, r3
 80019d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc48>
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <HAL_RCC_OscConfig+0xc44>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e01e      	b.n	8001a38 <HAL_RCC_OscConfig+0xc80>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0xe28>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a40:	6011      	str	r1, [r2, #0]
 8001a42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fa92 f1a2 	rbit	r1, r2
 8001a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a50:	6011      	str	r1, [r2, #0]
  return result;
 8001a52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f002 021f 	and.w	r2, r2, #31
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d09b      	beq.n	80019ac <HAL_RCC_OscConfig+0xbf4>
 8001a74:	e0ad      	b.n	8001bd2 <HAL_RCC_OscConfig+0xe1a>
 8001a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe fedc 	bl	8000868 <HAL_GetTick>
 8001ab0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fed7 	bl	8000868 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e084      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	601a      	str	r2, [r3, #0]
  return result;
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0xd4c>
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0xe28>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd84>
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_RCC_OscConfig+0xe28>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f107 0214 	add.w	r2, r7, #20
 8001b40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b44:	6011      	str	r1, [r2, #0]
 8001b46:	f107 0214 	add.w	r2, r7, #20
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fa92 f1a2 	rbit	r1, r2
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	6011      	str	r1, [r2, #0]
  return result;
 8001b56:	f107 0210 	add.w	r2, r7, #16
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f002 021f 	and.w	r2, r2, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d19e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xcfe>
 8001b78:	e02b      	b.n	8001bd2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e025      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_RCC_OscConfig+0xe28>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_RCC_OscConfig+0xe28>)
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b9c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d111      	bne.n	8001bce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001baa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d108      	bne.n	8001bce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc0:	f003 020f 	and.w	r2, r3, #15
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b09e      	sub	sp, #120	; 0x78
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e162      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	498b      	ldr	r1, [pc, #556]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e14a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	497f      	ldr	r1, [pc, #508]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80dc 	beq.w	8001e10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d13c      	bne.n	8001cda <HAL_RCC_ClockConfig+0xf6>
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xa6>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e00f      	b.n	8001caa <HAL_RCC_ClockConfig+0xc6>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	667b      	str	r3, [r7, #100]	; 0x64
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d17b      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0f3      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d13c      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x178>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x128>
 8001d06:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_ClockConfig+0x148>
 8001d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d13a      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b2      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e00d      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1bc>
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2202      	movs	r2, #2
 8001da2:	61ba      	str	r2, [r7, #24]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	617a      	str	r2, [r7, #20]
  return result;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e079      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	491a      	ldr	r1, [pc, #104]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fd42 	bl	8000868 <HAL_GetTick>
 8001de4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fd3e 	bl	8000868 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e061      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d214      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e040      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	491a      	ldr	r1, [pc, #104]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4912      	ldr	r1, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e86:	f000 f829 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	40d3      	lsrs	r3, r2
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x2ec>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_ClockConfig+0x2f0>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fbf8 	bl	80006b0 <HAL_InitTick>
  
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3778      	adds	r7, #120	; 0x78
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08005ecc 	.word	0x08005ecc
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e03f      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e03f      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	607a      	str	r2, [r7, #4]
  return result;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	40d3      	lsrs	r3, r2
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	220f      	movs	r2, #15
 8001f40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	60fa      	str	r2, [r7, #12]
  return result;
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	40d3      	lsrs	r3, r2
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e007      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	623b      	str	r3, [r7, #32]
      break;
 8001f8a:	e002      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f8e:	623b      	str	r3, [r7, #32]
      break;
 8001f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f92:	6a3b      	ldr	r3, [r7, #32]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	372c      	adds	r7, #44	; 0x2c
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	08005ee4 	.word	0x08005ee4
 8001fac:	08005ef4 	.word	0x08005ef4

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fce:	f7ff ffef 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fe0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	603a      	str	r2, [r7, #0]
  return result;
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	40d3      	lsrs	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08005edc 	.word	0x08005edc

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002012:	f7ff ffcd 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002020:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002024:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	603a      	str	r2, [r7, #0]
  return result;
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK2Freq+0x40>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08005edc 	.word	0x08005edc

08002050 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	220f      	movs	r2, #15
 800205e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_GetClockConfig+0x5c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_RCC_GetClockConfig+0x5c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_RCC_GetClockConfig+0x5c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_GetClockConfig+0x5c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_RCC_GetClockConfig+0x60>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0207 	and.w	r2, r3, #7
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b092      	sub	sp, #72	; 0x48
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80d4 	beq.w	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d8:	4b4e      	ldr	r3, [pc, #312]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10e      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	61d3      	str	r3, [r2, #28]
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b45      	ldr	r3, [pc, #276]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7fe fba5 	bl	8000868 <HAL_GetTick>
 800211e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e008      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe fba1 	bl	8000868 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1d6      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800214a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8084 	beq.w	800225a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800215c:	429a      	cmp	r2, r3
 800215e:	d07c      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	461a      	mov	r2, r3
 800218a:	2301      	movs	r3, #1
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	461a      	mov	r2, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d04b      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fb51 	bl	8000868 <HAL_GetTick>
 80021c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fb4d 	bl	8000868 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e180      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80021e0:	2302      	movs	r3, #2
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	61fb      	str	r3, [r7, #28]
  return result;
 80021f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d108      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800220e:	4b01      	ldr	r3, [pc, #4]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	e00d      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
 800221c:	10908100 	.word	0x10908100
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	4ba0      	ldr	r3, [pc, #640]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	613a      	str	r2, [r7, #16]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	60fa      	str	r2, [r7, #12]
  return result;
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0b7      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800225a:	4b95      	ldr	r3, [pc, #596]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4992      	ldr	r1, [pc, #584]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800226c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a8d      	ldr	r2, [pc, #564]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228c:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f023 0203 	bic.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4985      	ldr	r1, [pc, #532]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022aa:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	497e      	ldr	r1, [pc, #504]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c8:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4976      	ldr	r1, [pc, #472]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f023 0210 	bic.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	496f      	ldr	r1, [pc, #444]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	4967      	ldr	r1, [pc, #412]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f023 0220 	bic.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4960      	ldr	r1, [pc, #384]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002340:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4958      	ldr	r1, [pc, #352]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4951      	ldr	r1, [pc, #324]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800237c:	4b4c      	ldr	r3, [pc, #304]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4949      	ldr	r1, [pc, #292]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4942      	ldr	r1, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	493a      	ldr	r1, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	4933      	ldr	r1, [pc, #204]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	492b      	ldr	r1, [pc, #172]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	491c      	ldr	r1, [pc, #112]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	4915      	ldr	r1, [pc, #84]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	490d      	ldr	r1, [pc, #52]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80024a8:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	e002      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	490b      	ldr	r1, [pc, #44]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024da:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3748      	adds	r7, #72	; 0x48
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e049      	b.n	8002596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f841 	bl	800259e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 f9f8 	bl	8002924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d001      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e04f      	b.n	800266c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a23      	ldr	r2, [pc, #140]	; (8002678 <HAL_TIM_Base_Start_IT+0xc4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01d      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f6:	d018      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_TIM_Base_Start_IT+0xc8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_TIM_Base_Start_IT+0xcc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_TIM_Base_Start_IT+0xd0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_TIM_Base_Start_IT+0xd4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x76>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_TIM_Base_Start_IT+0xd8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d115      	bne.n	8002656 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_TIM_Base_Start_IT+0xdc>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d015      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0xb4>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002642:	d011      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	e008      	b.n	8002668 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e000      	b.n	800266a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400
 8002680:	40000800 	.word	0x40000800
 8002684:	40013400 	.word	0x40013400
 8002688:	40014000 	.word	0x40014000
 800268c:	40015000 	.word	0x40015000
 8002690:	00010007 	.word	0x00010007

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0202 	mvn.w	r2, #2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f905 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8f7 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f908 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0204 	mvn.w	r2, #4
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8db 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8cd 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8de 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0208 	mvn.w	r2, #8
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8b1 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8a3 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8b4 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0210 	mvn.w	r2, #16
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2208      	movs	r2, #8
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f887 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f879 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f88a 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0201 	mvn.w	r2, #1
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fd feca 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f918 	bl	8002a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d10e      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d107      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f90b 	bl	8002a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d10e      	bne.n	800289e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d107      	bne.n	800289e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f838 	bl	800290e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0220 	mvn.w	r2, #32
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8cb 	bl	8002a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a42      	ldr	r2, [pc, #264]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d00f      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3f      	ldr	r2, [pc, #252]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3e      	ldr	r2, [pc, #248]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3d      	ldr	r2, [pc, #244]	; (8002a4c <TIM_Base_SetConfig+0x128>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <TIM_Base_SetConfig+0x12c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d01b      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d017      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <TIM_Base_SetConfig+0x128>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00f      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <TIM_Base_SetConfig+0x130>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00b      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <TIM_Base_SetConfig+0x134>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <TIM_Base_SetConfig+0x138>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0x9a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <TIM_Base_SetConfig+0x12c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <TIM_Base_SetConfig+0x100>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <TIM_Base_SetConfig+0x128>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00f      	beq.n	8002a24 <TIM_Base_SetConfig+0x100>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <TIM_Base_SetConfig+0x130>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x100>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <TIM_Base_SetConfig+0x134>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x100>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <TIM_Base_SetConfig+0x138>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x100>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <TIM_Base_SetConfig+0x12c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d103      	bne.n	8002a2c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	615a      	str	r2, [r3, #20]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40013400 	.word	0x40013400
 8002a50:	40015000 	.word	0x40015000
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800

08002a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e040      	b.n	8002b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fdb4 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8c0 	bl	8002c60 <UART_SetConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e022      	b.n	8002b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa8a 	bl	800300c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb11 	bl	8003150 <UART_CheckIdleState>
 8002b2e:	4603      	mov	r3, r0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	f040 8082 	bne.w	8002c56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_UART_Transmit+0x26>
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07a      	b.n	8002c58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Transmit+0x38>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e073      	b.n	8002c58 <HAL_UART_Transmit+0x120>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b86:	f7fd fe6f 	bl	8000868 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x80>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bc8:	e02d      	b.n	8002c26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fb04 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e039      	b.n	8002c58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf6:	b292      	uxth	r2, r2
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e008      	b.n	8002c14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cb      	bne.n	8002bca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fad0 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e005      	b.n	8002c58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4bab      	ldr	r3, [pc, #684]	; (8002f38 <UART_SetConfig+0x2d8>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	6979      	ldr	r1, [r7, #20]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a99      	ldr	r2, [pc, #612]	; (8002f3c <UART_SetConfig+0x2dc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d120      	bne.n	8002d1e <UART_SetConfig+0xbe>
 8002cdc:	4b98      	ldr	r3, [pc, #608]	; (8002f40 <UART_SetConfig+0x2e0>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d817      	bhi.n	8002d18 <UART_SetConfig+0xb8>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0x90>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d0d 	.word	0x08002d0d
 8002cf8:	08002d13 	.word	0x08002d13
 8002cfc:	08002d07 	.word	0x08002d07
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e0b5      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d06:	2302      	movs	r3, #2
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e0b2      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e0af      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d12:	2308      	movs	r3, #8
 8002d14:	77fb      	strb	r3, [r7, #31]
 8002d16:	e0ac      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d18:	2310      	movs	r3, #16
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e0a9      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a88      	ldr	r2, [pc, #544]	; (8002f44 <UART_SetConfig+0x2e4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d124      	bne.n	8002d72 <UART_SetConfig+0x112>
 8002d28:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <UART_SetConfig+0x2e0>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d34:	d011      	beq.n	8002d5a <UART_SetConfig+0xfa>
 8002d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d3a:	d817      	bhi.n	8002d6c <UART_SetConfig+0x10c>
 8002d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d40:	d011      	beq.n	8002d66 <UART_SetConfig+0x106>
 8002d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d46:	d811      	bhi.n	8002d6c <UART_SetConfig+0x10c>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <UART_SetConfig+0xf4>
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d006      	beq.n	8002d60 <UART_SetConfig+0x100>
 8002d52:	e00b      	b.n	8002d6c <UART_SetConfig+0x10c>
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e08b      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e088      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d60:	2304      	movs	r3, #4
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e085      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d66:	2308      	movs	r3, #8
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e082      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e07f      	b.n	8002e72 <UART_SetConfig+0x212>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a74      	ldr	r2, [pc, #464]	; (8002f48 <UART_SetConfig+0x2e8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d124      	bne.n	8002dc6 <UART_SetConfig+0x166>
 8002d7c:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <UART_SetConfig+0x2e0>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d88:	d011      	beq.n	8002dae <UART_SetConfig+0x14e>
 8002d8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d8e:	d817      	bhi.n	8002dc0 <UART_SetConfig+0x160>
 8002d90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d94:	d011      	beq.n	8002dba <UART_SetConfig+0x15a>
 8002d96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d9a:	d811      	bhi.n	8002dc0 <UART_SetConfig+0x160>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <UART_SetConfig+0x148>
 8002da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da4:	d006      	beq.n	8002db4 <UART_SetConfig+0x154>
 8002da6:	e00b      	b.n	8002dc0 <UART_SetConfig+0x160>
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e061      	b.n	8002e72 <UART_SetConfig+0x212>
 8002dae:	2302      	movs	r3, #2
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e05e      	b.n	8002e72 <UART_SetConfig+0x212>
 8002db4:	2304      	movs	r3, #4
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e05b      	b.n	8002e72 <UART_SetConfig+0x212>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e058      	b.n	8002e72 <UART_SetConfig+0x212>
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e055      	b.n	8002e72 <UART_SetConfig+0x212>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a60      	ldr	r2, [pc, #384]	; (8002f4c <UART_SetConfig+0x2ec>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d124      	bne.n	8002e1a <UART_SetConfig+0x1ba>
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <UART_SetConfig+0x2e0>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ddc:	d011      	beq.n	8002e02 <UART_SetConfig+0x1a2>
 8002dde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002de2:	d817      	bhi.n	8002e14 <UART_SetConfig+0x1b4>
 8002de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de8:	d011      	beq.n	8002e0e <UART_SetConfig+0x1ae>
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dee:	d811      	bhi.n	8002e14 <UART_SetConfig+0x1b4>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <UART_SetConfig+0x19c>
 8002df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df8:	d006      	beq.n	8002e08 <UART_SetConfig+0x1a8>
 8002dfa:	e00b      	b.n	8002e14 <UART_SetConfig+0x1b4>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e037      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e02:	2302      	movs	r3, #2
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e034      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e031      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e02e      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e14:	2310      	movs	r3, #16
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e02b      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <UART_SetConfig+0x2f0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d124      	bne.n	8002e6e <UART_SetConfig+0x20e>
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <UART_SetConfig+0x2e0>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e30:	d011      	beq.n	8002e56 <UART_SetConfig+0x1f6>
 8002e32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e36:	d817      	bhi.n	8002e68 <UART_SetConfig+0x208>
 8002e38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e3c:	d011      	beq.n	8002e62 <UART_SetConfig+0x202>
 8002e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e42:	d811      	bhi.n	8002e68 <UART_SetConfig+0x208>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <UART_SetConfig+0x1f0>
 8002e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4c:	d006      	beq.n	8002e5c <UART_SetConfig+0x1fc>
 8002e4e:	e00b      	b.n	8002e68 <UART_SetConfig+0x208>
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e00d      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e56:	2302      	movs	r3, #2
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e00a      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e007      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e62:	2308      	movs	r3, #8
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e004      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e001      	b.n	8002e72 <UART_SetConfig+0x212>
 8002e6e:	2310      	movs	r3, #16
 8002e70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7a:	d16d      	bne.n	8002f58 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d827      	bhi.n	8002ed2 <UART_SetConfig+0x272>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <UART_SetConfig+0x228>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002ebd 	.word	0x08002ebd
 8002e94:	08002ed3 	.word	0x08002ed3
 8002e98:	08002ec3 	.word	0x08002ec3
 8002e9c:	08002ed3 	.word	0x08002ed3
 8002ea0:	08002ed3 	.word	0x08002ed3
 8002ea4:	08002ed3 	.word	0x08002ed3
 8002ea8:	08002ecb 	.word	0x08002ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7ff f88c 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61b8      	str	r0, [r7, #24]
        break;
 8002eb2:	e013      	b.n	8002edc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7ff f8aa 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002eb8:	61b8      	str	r0, [r7, #24]
        break;
 8002eba:	e00f      	b.n	8002edc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <UART_SetConfig+0x2f4>)
 8002ebe:	61bb      	str	r3, [r7, #24]
        break;
 8002ec0:	e00c      	b.n	8002edc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec2:	f7ff f80b 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002ec6:	61b8      	str	r0, [r7, #24]
        break;
 8002ec8:	e008      	b.n	8002edc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ece:	61bb      	str	r3, [r7, #24]
        break;
 8002ed0:	e004      	b.n	8002edc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8002eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8086 	beq.w	8002ff0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	005a      	lsls	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	d916      	bls.n	8002f30 <UART_SetConfig+0x2d0>
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d212      	bcs.n	8002f30 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f023 030f 	bic.w	r3, r3, #15
 8002f12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	89fa      	ldrh	r2, [r7, #14]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	e05f      	b.n	8002ff0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77bb      	strb	r3, [r7, #30]
 8002f34:	e05c      	b.n	8002ff0 <UART_SetConfig+0x390>
 8002f36:	bf00      	nop
 8002f38:	efff69f3 	.word	0xefff69f3
 8002f3c:	40013800 	.word	0x40013800
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40004400 	.word	0x40004400
 8002f48:	40004800 	.word	0x40004800
 8002f4c:	40004c00 	.word	0x40004c00
 8002f50:	40005000 	.word	0x40005000
 8002f54:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d827      	bhi.n	8002fae <UART_SetConfig+0x34e>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <UART_SetConfig+0x304>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f89 	.word	0x08002f89
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	08002f99 	.word	0x08002f99
 8002f70:	08002faf 	.word	0x08002faf
 8002f74:	08002f9f 	.word	0x08002f9f
 8002f78:	08002faf 	.word	0x08002faf
 8002f7c:	08002faf 	.word	0x08002faf
 8002f80:	08002faf 	.word	0x08002faf
 8002f84:	08002fa7 	.word	0x08002fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f88:	f7ff f81e 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002f8c:	61b8      	str	r0, [r7, #24]
        break;
 8002f8e:	e013      	b.n	8002fb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f90:	f7ff f83c 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002f94:	61b8      	str	r0, [r7, #24]
        break;
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <UART_SetConfig+0x3a8>)
 8002f9a:	61bb      	str	r3, [r7, #24]
        break;
 8002f9c:	e00c      	b.n	8002fb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9e:	f7fe ff9d 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002fa2:	61b8      	str	r0, [r7, #24]
        break;
 8002fa4:	e008      	b.n	8002fb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e004      	b.n	8002fb8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8002fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085a      	lsrs	r2, r3, #1
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d908      	bls.n	8002fec <UART_SetConfig+0x38c>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d204      	bcs.n	8002fec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e001      	b.n	8002ff0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ffc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	007a1200 	.word	0x007a1200

0800300c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01a      	beq.n	8003122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310a:	d10a      	bne.n	8003122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003160:	f7fd fb82 	bl	8000868 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d10e      	bne.n	8003192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f82d 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e023      	b.n	80031da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d10e      	bne.n	80031be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f817 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00d      	b.n	80031da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	e05e      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d05a      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fd fb34 	bl	8000868 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <UART_WaitOnFlagUntilTimeout+0x30>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11b      	bne.n	800324a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003220:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e043      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02c      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003266:	d124      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003280:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	429a      	cmp	r2, r3
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d091      	beq.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ec:	2b84      	cmp	r3, #132	; 0x84
 80032ee:	d005      	beq.n	80032fc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	3303      	adds	r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003310:	f3ef 8305 	mrs	r3, IPSR
 8003314:	607b      	str	r3, [r7, #4]
  return(result);
 8003316:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003332:	f001 f82f 	bl	8004394 <vTaskStartScheduler>
  
  return osOK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}

0800333c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af04      	add	r7, sp, #16
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d020      	beq.n	8003390 <osThreadCreate+0x54>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01c      	beq.n	8003390 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685c      	ldr	r4, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681d      	ldr	r5, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691e      	ldr	r6, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ffb6 	bl	80032da <makeFreeRtosPriority>
 800336e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003378:	9202      	str	r2, [sp, #8]
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	9100      	str	r1, [sp, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4632      	mov	r2, r6
 8003382:	4629      	mov	r1, r5
 8003384:	4620      	mov	r0, r4
 8003386:	f000 fe47 	bl	8004018 <xTaskCreateStatic>
 800338a:	4603      	mov	r3, r0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e01c      	b.n	80033ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685c      	ldr	r4, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800339c:	b29e      	uxth	r6, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff98 	bl	80032da <makeFreeRtosPriority>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	9200      	str	r2, [sp, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4632      	mov	r2, r6
 80033b8:	4629      	mov	r1, r5
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 fe88 	bl	80040d0 <xTaskCreate>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <osDelay+0x16>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	e000      	b.n	80033ec <osDelay+0x18>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 ff9d 	bl	800432c <vTaskDelay>
  
  return osOK;
 80033f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	460b      	mov	r3, r1
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003412:	7afb      	ldrb	r3, [r7, #11]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <osTimerCreate+0x20>
 8003418:	2101      	movs	r1, #1
 800341a:	e000      	b.n	800341e <osTimerCreate+0x22>
 800341c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	460a      	mov	r2, r1
 800342e:	2101      	movs	r1, #1
 8003430:	480b      	ldr	r0, [pc, #44]	; (8003460 <osTimerCreate+0x64>)
 8003432:	f001 fd6e 	bl	8004f12 <xTimerCreateStatic>
 8003436:	4603      	mov	r3, r0
 8003438:	e00e      	b.n	8003458 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <osTimerCreate+0x48>
 8003440:	2201      	movs	r2, #1
 8003442:	e000      	b.n	8003446 <osTimerCreate+0x4a>
 8003444:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2101      	movs	r1, #1
 8003450:	4803      	ldr	r0, [pc, #12]	; (8003460 <osTimerCreate+0x64>)
 8003452:	f001 fd3d 	bl	8004ed0 <xTimerCreate>
 8003456:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	08005eb0 	.word	0x08005eb0

08003464 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <osTimerStart+0x20>
    ticks = 1;
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003484:	f7ff ff41 	bl	800330a <inHandlerMode>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01a      	beq.n	80034c4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	2200      	movs	r2, #0
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	2109      	movs	r1, #9
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 fda8 	bl	8004ff0 <xTimerGenericCommand>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d002      	beq.n	80034ac <osTimerStart+0x48>
    {
      result = osErrorOS;
 80034a6:	23ff      	movs	r3, #255	; 0xff
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e018      	b.n	80034de <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d015      	beq.n	80034de <osTimerStart+0x7a>
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <osTimerStart+0x84>)
 80034b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	e00c      	b.n	80034de <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80034c4:	2300      	movs	r3, #0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	2104      	movs	r1, #4
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fd8e 	bl	8004ff0 <xTimerGenericCommand>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <osTimerStart+0x7a>
      result = osErrorOS;
 80034da:	23ff      	movs	r3, #255	; 0xff
 80034dc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80034de:	697b      	ldr	r3, [r7, #20]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f103 0208 	add.w	r2, r3, #8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f103 0208 	add.w	r2, r3, #8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f103 0208 	add.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e00c      	b.n	80035c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3308      	adds	r3, #8
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e002      	b.n	80035bc <vListInsert+0x2e>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d2f6      	bcs.n	80035b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6852      	ldr	r2, [r2, #4]
 8003620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d103      	bne.n	8003634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1e5a      	subs	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800367e:	f002 f891 	bl	80057a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	3b01      	subs	r3, #1
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	441a      	add	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d114      	bne.n	80036fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01a      	beq.n	8003712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3310      	adds	r3, #16
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f8e1 	bl	80048a8 <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <xQueueGenericReset+0xcc>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	e009      	b.n	8003712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fef2 	bl	80034ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3324      	adds	r3, #36	; 0x24
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff feed 	bl	80034ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003712:	f002 f877 	bl	8005804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003716:	2301      	movs	r3, #1
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <xQueueGenericCreateStatic+0x52>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <xQueueGenericCreateStatic+0x56>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericCreateStatic+0x58>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	623b      	str	r3, [r7, #32]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <xQueueGenericCreateStatic+0x7e>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xQueueGenericCreateStatic+0x82>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueGenericCreateStatic+0x84>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	61fb      	str	r3, [r7, #28]
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037c2:	2348      	movs	r3, #72	; 0x48
 80037c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b48      	cmp	r3, #72	; 0x48
 80037ca:	d00a      	beq.n	80037e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61bb      	str	r3, [r7, #24]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f805 	bl	8003812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e002      	b.n	8003834 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003840:	2101      	movs	r1, #1
 8003842:	69b8      	ldr	r0, [r7, #24]
 8003844:	f7ff ff06 	bl	8003654 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	; 0x38
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xQueueGenericSend+0x32>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <xQueueGenericSend+0x40>
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <xQueueGenericSend+0x44>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <xQueueGenericSend+0x46>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xQueueGenericSend+0x60>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d103      	bne.n	80038be <xQueueGenericSend+0x6e>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericSend+0x72>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericSend+0x74>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueGenericSend+0x8e>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	623b      	str	r3, [r7, #32]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038de:	f001 f9a5 	bl	8004c2c <xTaskGetSchedulerState>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <xQueueGenericSend+0x9e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericSend+0xa2>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericSend+0xa4>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xQueueGenericSend+0xbe>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	61fb      	str	r3, [r7, #28]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800390e:	f001 ff49 	bl	80057a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <xQueueGenericSend+0xd4>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d129      	bne.n	8003978 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800392a:	f000 fa07 	bl	8003d3c <prvCopyDataToQueue>
 800392e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	3324      	adds	r3, #36	; 0x24
 800393c:	4618      	mov	r0, r3
 800393e:	f000 ffb3 	bl	80048a8 <xTaskRemoveFromEventList>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <xQueueGenericSend+0x1f8>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	e00a      	b.n	8003970 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <xQueueGenericSend+0x1f8>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003970:	f001 ff48 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8003974:	2301      	movs	r3, #1
 8003976:	e063      	b.n	8003a40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800397e:	f001 ff41 	bl	8005804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003982:	2300      	movs	r3, #0
 8003984:	e05c      	b.n	8003a40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4618      	mov	r0, r3
 8003992:	f000 ffeb 	bl	800496c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800399a:	f001 ff33 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800399e:	f000 fd5f 	bl	8004460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039a2:	f001 feff 	bl	80057a4 <vPortEnterCritical>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d103      	bne.n	80039bc <xQueueGenericSend+0x16c>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d103      	bne.n	80039d2 <xQueueGenericSend+0x182>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d2:	f001 ff17 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039d6:	1d3a      	adds	r2, r7, #4
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 ffda 	bl	8004998 <xTaskCheckForTimeOut>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d124      	bne.n	8003a34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ec:	f000 fa9e 	bl	8003f2c <prvIsQueueFull>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	3310      	adds	r3, #16
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 ff02 	bl	8004808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a06:	f000 fa29 	bl	8003e5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a0a:	f000 fd37 	bl	800447c <xTaskResumeAll>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af7c 	bne.w	800390e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <xQueueGenericSend+0x1f8>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	e772      	b.n	800390e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2a:	f000 fa17 	bl	8003e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a2e:	f000 fd25 	bl	800447c <xTaskResumeAll>
 8003a32:	e76c      	b.n	800390e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a36:	f000 fa11 	bl	8003e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a3a:	f000 fd1f 	bl	800447c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a3e:	2300      	movs	r3, #0
		}
	}
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3738      	adds	r7, #56	; 0x38
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	; 0x38
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <xQueueGenericSendFromISR+0x3c>
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <xQueueGenericSendFromISR+0x40>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <xQueueGenericSendFromISR+0x42>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	623b      	str	r3, [r7, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d103      	bne.n	8003ab6 <xQueueGenericSendFromISR+0x6a>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <xQueueGenericSendFromISR+0x6e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <xQueueGenericSendFromISR+0x70>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	61fb      	str	r3, [r7, #28]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ad6:	f001 ff47 	bl	8005968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ada:	f3ef 8211 	mrs	r2, BASEPRI
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	61ba      	str	r2, [r7, #24]
 8003af0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003af2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <xQueueGenericSendFromISR+0xbc>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d12c      	bne.n	8003b62 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b18:	f000 f910 	bl	8003d3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d112      	bne.n	8003b4c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	3324      	adds	r3, #36	; 0x24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 feb8 	bl	80048a8 <xTaskRemoveFromEventList>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e007      	b.n	8003b5c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b50:	3301      	adds	r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	b25a      	sxtb	r2, r3
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b60:	e001      	b.n	8003b66 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3738      	adds	r7, #56	; 0x38
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	; 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xQueueReceive+0x30>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	623b      	str	r3, [r7, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <xQueueReceive+0x3e>
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <xQueueReceive+0x42>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueReceive+0x44>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueReceive+0x5e>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61fb      	str	r3, [r7, #28]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bda:	f001 f827 	bl	8004c2c <xTaskGetSchedulerState>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <xQueueReceive+0x6e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x72>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x74>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueReceive+0x8e>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61bb      	str	r3, [r7, #24]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c0a:	f001 fdcb 	bl	80057a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01f      	beq.n	8003c5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c1e:	f000 f8f7 	bl	8003e10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00f      	beq.n	8003c52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	3310      	adds	r3, #16
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fe36 	bl	80048a8 <xTaskRemoveFromEventList>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c42:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <xQueueReceive+0x1bc>)
 8003c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c52:	f001 fdd7 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e069      	b.n	8003d2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c60:	f001 fdd0 	bl	8005804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e062      	b.n	8003d2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c6e:	f107 0310 	add.w	r3, r7, #16
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fe7a 	bl	800496c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c7c:	f001 fdc2 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c80:	f000 fbee 	bl	8004460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c84:	f001 fd8e 	bl	80057a4 <vPortEnterCritical>
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d103      	bne.n	8003c9e <xQueueReceive+0x122>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d103      	bne.n	8003cb4 <xQueueReceive+0x138>
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	f001 fda6 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cb8:	1d3a      	adds	r2, r7, #4
 8003cba:	f107 0310 	add.w	r3, r7, #16
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fe69 	bl	8004998 <xTaskCheckForTimeOut>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d123      	bne.n	8003d14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cce:	f000 f917 	bl	8003f00 <prvIsQueueEmpty>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fd91 	bl	8004808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce8:	f000 f8b8 	bl	8003e5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cec:	f000 fbc6 	bl	800447c <xTaskResumeAll>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d189      	bne.n	8003c0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <xQueueReceive+0x1bc>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	e780      	b.n	8003c0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0a:	f000 f8a7 	bl	8003e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d0e:	f000 fbb5 	bl	800447c <xTaskResumeAll>
 8003d12:	e77a      	b.n	8003c0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d16:	f000 f8a1 	bl	8003e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d1a:	f000 fbaf 	bl	800447c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d20:	f000 f8ee 	bl	8003f00 <prvIsQueueEmpty>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f43f af6f 	beq.w	8003c0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3730      	adds	r7, #48	; 0x30
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d14d      	bne.n	8003dfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff7e 	bl	8004c68 <xTaskPriorityDisinherit>
 8003d6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e043      	b.n	8003dfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d119      	bne.n	8003db0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6898      	ldr	r0, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	461a      	mov	r2, r3
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	f002 f82c 	bl	8005de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	441a      	add	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d32b      	bcc.n	8003dfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	e026      	b.n	8003dfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68d8      	ldr	r0, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	f002 f812 	bl	8005de4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	425b      	negs	r3, r3
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d207      	bcs.n	8003dec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	425b      	negs	r3, r3
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d105      	bne.n	8003dfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e06:	697b      	ldr	r3, [r7, #20]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d018      	beq.n	8003e54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	441a      	add	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d303      	bcc.n	8003e44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68d9      	ldr	r1, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f001 ffc8 	bl	8005de4 <memcpy>
	}
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e64:	f001 fc9e 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e70:	e011      	b.n	8003e96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	; 0x24
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd12 	bl	80048a8 <xTaskRemoveFromEventList>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e8a:	f000 fde7 	bl	8004a5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dce9      	bgt.n	8003e72 <prvUnlockQueue+0x16>
 8003e9e:	e000      	b.n	8003ea2 <prvUnlockQueue+0x46>
					break;
 8003ea0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eaa:	f001 fcab 	bl	8005804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eae:	f001 fc79 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eba:	e011      	b.n	8003ee0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fced 	bl	80048a8 <xTaskRemoveFromEventList>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ed4:	f000 fdc2 	bl	8004a5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	dce9      	bgt.n	8003ebc <prvUnlockQueue+0x60>
 8003ee8:	e000      	b.n	8003eec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003eea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	22ff      	movs	r2, #255	; 0xff
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ef4:	f001 fc86 	bl	8005804 <vPortExitCritical>
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f08:	f001 fc4c 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e001      	b.n	8003f1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f1e:	f001 fc71 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f34:	f001 fc36 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d102      	bne.n	8003f4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e001      	b.n	8003f4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f4e:	f001 fc59 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e014      	b.n	8003f96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f6c:	4a0f      	ldr	r2, [pc, #60]	; (8003fac <vQueueAddToRegistry+0x50>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f78:	490c      	ldr	r1, [pc, #48]	; (8003fac <vQueueAddToRegistry+0x50>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <vQueueAddToRegistry+0x50>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f8e:	e006      	b.n	8003f9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	d9e7      	bls.n	8003f6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20001600 	.word	0x20001600

08003fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fc0:	f001 fbf0 	bl	80057a4 <vPortEnterCritical>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d103      	bne.n	8003fda <vQueueWaitForMessageRestricted+0x2a>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d103      	bne.n	8003ff0 <vQueueWaitForMessageRestricted+0x40>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff0:	f001 fc08 	bl	8005804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fc23 	bl	8004850 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff26 	bl	8003e5c <prvUnlockQueue>
	}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08e      	sub	sp, #56	; 0x38
 800401c:	af04      	add	r7, sp, #16
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xTaskCreateStatic+0x2a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	623b      	str	r3, [r7, #32]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xTaskCreateStatic+0x46>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61fb      	str	r3, [r7, #28]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800405e:	2354      	movs	r3, #84	; 0x54
 8004060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b54      	cmp	r3, #84	; 0x54
 8004066:	d00a      	beq.n	800407e <xTaskCreateStatic+0x66>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61bb      	str	r3, [r7, #24]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01e      	beq.n	80040c2 <xTaskCreateStatic+0xaa>
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01b      	beq.n	80040c2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800409c:	2300      	movs	r3, #0
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f850 	bl	800415a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040bc:	f000 f8cc 	bl	8004258 <prvAddNewTaskToReadyList>
 80040c0:	e001      	b.n	80040c6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040c6:	697b      	ldr	r3, [r7, #20]
	}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	; 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	; 0x30
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fc7f 	bl	80059e8 <pvPortMalloc>
 80040ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00e      	beq.n	8004110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040f2:	2054      	movs	r0, #84	; 0x54
 80040f4:	f001 fc78 	bl	80059e8 <pvPortMalloc>
 80040f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	e005      	b.n	8004114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004108:	6978      	ldr	r0, [r7, #20]
 800410a:	f001 fd31 	bl	8005b70 <vPortFree>
 800410e:	e001      	b.n	8004114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d017      	beq.n	800414a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	2300      	movs	r3, #0
 8004126:	9303      	str	r3, [sp, #12]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f80e 	bl	800415a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800413e:	69f8      	ldr	r0, [r7, #28]
 8004140:	f000 f88a 	bl	8004258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e002      	b.n	8004150 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004150:	69bb      	ldr	r3, [r7, #24]
	}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004172:	3b01      	subs	r3, #1
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f023 0307 	bic.w	r3, r3, #7
 8004180:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	617b      	str	r3, [r7, #20]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e012      	b.n	80041ce <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	7819      	ldrb	r1, [r3, #0]
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	3334      	adds	r3, #52	; 0x34
 80041b8:	460a      	mov	r2, r1
 80041ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d9e9      	bls.n	80041a8 <prvInitialiseNewTask+0x4e>
 80041d4:	e000      	b.n	80041d8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80041d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d901      	bls.n	80041ea <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041e6:	2306      	movs	r3, #6
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2200      	movs	r2, #0
 80041fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f993 	bl	800352c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	3318      	adds	r3, #24
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f98e 	bl	800352c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004214:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	f1c3 0207 	rsb	r2, r3, #7
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2200      	movs	r2, #0
 800422a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	69b8      	ldr	r0, [r7, #24]
 800423a:	f001 f989 	bl	8005550 <pxPortInitialiseStack>
 800423e:	4602      	mov	r2, r0
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004250:	bf00      	nop
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004260:	f001 faa0 	bl	80057a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <prvAddNewTaskToReadyList+0xb8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	4a29      	ldr	r2, [pc, #164]	; (8004310 <prvAddNewTaskToReadyList+0xb8>)
 800426c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <prvAddNewTaskToReadyList+0xbc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004276:	4a27      	ldr	r2, [pc, #156]	; (8004314 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800427c:	4b24      	ldr	r3, [pc, #144]	; (8004310 <prvAddNewTaskToReadyList+0xb8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d110      	bne.n	80042a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004284:	f000 fc0e 	bl	8004aa4 <prvInitialiseTaskLists>
 8004288:	e00d      	b.n	80042a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800428a:	4b23      	ldr	r3, [pc, #140]	; (8004318 <prvAddNewTaskToReadyList+0xc0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <prvAddNewTaskToReadyList+0xbc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d802      	bhi.n	80042a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <prvAddNewTaskToReadyList+0xbc>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <prvAddNewTaskToReadyList+0xc4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <prvAddNewTaskToReadyList+0xc4>)
 80042ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <prvAddNewTaskToReadyList+0xc8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <prvAddNewTaskToReadyList+0xc8>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4a15      	ldr	r2, [pc, #84]	; (8004324 <prvAddNewTaskToReadyList+0xcc>)
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff f934 	bl	8003546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042de:	f001 fa91 	bl	8005804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <prvAddNewTaskToReadyList+0xc0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00e      	beq.n	8004308 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <prvAddNewTaskToReadyList+0xbc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <prvAddNewTaskToReadyList+0xd0>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200007d4 	.word	0x200007d4
 8004314:	200006d4 	.word	0x200006d4
 8004318:	200007e0 	.word	0x200007e0
 800431c:	200007f0 	.word	0x200007f0
 8004320:	200007dc 	.word	0x200007dc
 8004324:	200006d8 	.word	0x200006d8
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <vTaskDelay+0x60>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <vTaskDelay+0x30>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60bb      	str	r3, [r7, #8]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800435c:	f000 f880 	bl	8004460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004360:	2100      	movs	r1, #0
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fd06 	bl	8004d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004368:	f000 f888 	bl	800447c <xTaskResumeAll>
 800436c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <vTaskDelay+0x64>)
 8004376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200007fc 	.word	0x200007fc
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043a2:	463a      	mov	r2, r7
 80043a4:	1d39      	adds	r1, r7, #4
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fb ff18 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	9202      	str	r2, [sp, #8]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	2300      	movs	r3, #0
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	460a      	mov	r2, r1
 80043c2:	4921      	ldr	r1, [pc, #132]	; (8004448 <vTaskStartScheduler+0xb4>)
 80043c4:	4821      	ldr	r0, [pc, #132]	; (800444c <vTaskStartScheduler+0xb8>)
 80043c6:	f7ff fe27 	bl	8004018 <xTaskCreateStatic>
 80043ca:	4603      	mov	r3, r0
 80043cc:	4a20      	ldr	r2, [pc, #128]	; (8004450 <vTaskStartScheduler+0xbc>)
 80043ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <vTaskStartScheduler+0xbc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e001      	b.n	80043e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043e8:	f000 fd2a 	bl	8004e40 <xTimerCreateTimerTask>
 80043ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d116      	bne.n	8004422 <vTaskStartScheduler+0x8e>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
}
 8004406:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <vTaskStartScheduler+0xc0>)
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <vTaskStartScheduler+0xc4>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <vTaskStartScheduler+0xc8>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800441c:	f001 f920 	bl	8005660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004420:	e00e      	b.n	8004440 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d10a      	bne.n	8004440 <vTaskStartScheduler+0xac>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60fb      	str	r3, [r7, #12]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <vTaskStartScheduler+0xaa>
}
 8004440:	bf00      	nop
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08005eb4 	.word	0x08005eb4
 800444c:	08004a75 	.word	0x08004a75
 8004450:	200007f8 	.word	0x200007f8
 8004454:	200007f4 	.word	0x200007f4
 8004458:	200007e0 	.word	0x200007e0
 800445c:	200007d8 	.word	0x200007d8

08004460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <vTaskSuspendAll+0x18>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4a03      	ldr	r2, [pc, #12]	; (8004478 <vTaskSuspendAll+0x18>)
 800446c:	6013      	str	r3, [r2, #0]
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	200007fc 	.word	0x200007fc

0800447c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <xTaskResumeAll+0x114>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	603b      	str	r3, [r7, #0]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044a8:	f001 f97c 	bl	80057a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <xTaskResumeAll+0x114>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4a37      	ldr	r2, [pc, #220]	; (8004590 <xTaskResumeAll+0x114>)
 80044b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <xTaskResumeAll+0x114>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d161      	bne.n	8004582 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044be:	4b35      	ldr	r3, [pc, #212]	; (8004594 <xTaskResumeAll+0x118>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d05d      	beq.n	8004582 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044c6:	e02e      	b.n	8004526 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044c8:	4b33      	ldr	r3, [pc, #204]	; (8004598 <xTaskResumeAll+0x11c>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3318      	adds	r3, #24
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f893 	bl	8003600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f88e 	bl	8003600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <xTaskResumeAll+0x120>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <xTaskResumeAll+0x120>)
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <xTaskResumeAll+0x124>)
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7ff f81a 	bl	8003546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <xTaskResumeAll+0x128>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <xTaskResumeAll+0x12c>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <xTaskResumeAll+0x11c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1cc      	bne.n	80044c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004534:	f000 fb54 	bl	8004be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <xTaskResumeAll+0x130>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004544:	f000 f846 	bl	80045d4 <xTaskIncrementTick>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <xTaskResumeAll+0x12c>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f1      	bne.n	8004544 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004560:	4b12      	ldr	r3, [pc, #72]	; (80045ac <xTaskResumeAll+0x130>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <xTaskResumeAll+0x12c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xTaskResumeAll+0x134>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004582:	f001 f93f 	bl	8005804 <vPortExitCritical>

	return xAlreadyYielded;
 8004586:	68bb      	ldr	r3, [r7, #8]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200007fc 	.word	0x200007fc
 8004594:	200007d4 	.word	0x200007d4
 8004598:	20000794 	.word	0x20000794
 800459c:	200007dc 	.word	0x200007dc
 80045a0:	200006d8 	.word	0x200006d8
 80045a4:	200006d4 	.word	0x200006d4
 80045a8:	200007e8 	.word	0x200007e8
 80045ac:	200007e4 	.word	0x200007e4
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <xTaskGetTickCount+0x1c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	200007d8 	.word	0x200007d8

080045d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045de:	4b51      	ldr	r3, [pc, #324]	; (8004724 <xTaskIncrementTick+0x150>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 808d 	bne.w	8004702 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045e8:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <xTaskIncrementTick+0x154>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045f0:	4a4d      	ldr	r2, [pc, #308]	; (8004728 <xTaskIncrementTick+0x154>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d120      	bne.n	800463e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045fc:	4b4b      	ldr	r3, [pc, #300]	; (800472c <xTaskIncrementTick+0x158>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <xTaskIncrementTick+0x48>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	603b      	str	r3, [r7, #0]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <xTaskIncrementTick+0x46>
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <xTaskIncrementTick+0x158>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b43      	ldr	r3, [pc, #268]	; (8004730 <xTaskIncrementTick+0x15c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <xTaskIncrementTick+0x158>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4a41      	ldr	r2, [pc, #260]	; (8004730 <xTaskIncrementTick+0x15c>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b40      	ldr	r3, [pc, #256]	; (8004734 <xTaskIncrementTick+0x160>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <xTaskIncrementTick+0x160>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	f000 fad1 	bl	8004be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800463e:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <xTaskIncrementTick+0x164>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d34d      	bcc.n	80046e4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004648:	4b38      	ldr	r3, [pc, #224]	; (800472c <xTaskIncrementTick+0x158>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xTaskIncrementTick+0x82>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xTaskIncrementTick+0x84>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <xTaskIncrementTick+0x164>)
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	601a      	str	r2, [r3, #0]
					break;
 8004664:	e03e      	b.n	80046e4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004666:	4b31      	ldr	r3, [pc, #196]	; (800472c <xTaskIncrementTick+0x158>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d203      	bcs.n	8004686 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800467e:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <xTaskIncrementTick+0x164>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6013      	str	r3, [r2, #0]
						break;
 8004684:	e02e      	b.n	80046e4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe ffb8 	bl	8003600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3318      	adds	r3, #24
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe ffaf 	bl	8003600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	2201      	movs	r2, #1
 80046a8:	409a      	lsls	r2, r3
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <xTaskIncrementTick+0x168>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <xTaskIncrementTick+0x168>)
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <xTaskIncrementTick+0x16c>)
 80046c2:	441a      	add	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f7fe ff3b 	bl	8003546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <xTaskIncrementTick+0x170>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	429a      	cmp	r2, r3
 80046dc:	d3b4      	bcc.n	8004648 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e2:	e7b1      	b.n	8004648 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <xTaskIncrementTick+0x170>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4915      	ldr	r1, [pc, #84]	; (8004740 <xTaskIncrementTick+0x16c>)
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d907      	bls.n	800470c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e004      	b.n	800470c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <xTaskIncrementTick+0x174>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <xTaskIncrementTick+0x174>)
 800470a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xTaskIncrementTick+0x178>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004718:	697b      	ldr	r3, [r7, #20]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200007fc 	.word	0x200007fc
 8004728:	200007d8 	.word	0x200007d8
 800472c:	2000078c 	.word	0x2000078c
 8004730:	20000790 	.word	0x20000790
 8004734:	200007ec 	.word	0x200007ec
 8004738:	200007f4 	.word	0x200007f4
 800473c:	200007dc 	.word	0x200007dc
 8004740:	200006d8 	.word	0x200006d8
 8004744:	200006d4 	.word	0x200006d4
 8004748:	200007e4 	.word	0x200007e4
 800474c:	200007e8 	.word	0x200007e8

08004750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <vTaskSwitchContext+0xa4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <vTaskSwitchContext+0xa8>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004764:	e03f      	b.n	80047e6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <vTaskSwitchContext+0xa8>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800476c:	4b23      	ldr	r3, [pc, #140]	; (80047fc <vTaskSwitchContext+0xac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	f1c3 031f 	rsb	r3, r3, #31
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	491f      	ldr	r1, [pc, #124]	; (8004800 <vTaskSwitchContext+0xb0>)
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	607b      	str	r3, [r7, #4]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vTaskSwitchContext+0x5a>
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <vTaskSwitchContext+0xb0>)
 80047b8:	4413      	add	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3308      	adds	r3, #8
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d104      	bne.n	80047dc <vTaskSwitchContext+0x8c>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <vTaskSwitchContext+0xb4>)
 80047e4:	6013      	str	r3, [r2, #0]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	200007fc 	.word	0x200007fc
 80047f8:	200007e8 	.word	0x200007e8
 80047fc:	200007dc 	.word	0x200007dc
 8004800:	200006d8 	.word	0x200006d8
 8004804:	200006d4 	.word	0x200006d4

08004808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <vTaskPlaceOnEventList+0x44>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3318      	adds	r3, #24
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe fea9 	bl	800358e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800483c:	2101      	movs	r1, #1
 800483e:	6838      	ldr	r0, [r7, #0]
 8004840:	f000 fa98 	bl	8004d74 <prvAddCurrentTaskToDelayedList>
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200006d4 	.word	0x200006d4

08004850 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	617b      	str	r3, [r7, #20]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3318      	adds	r3, #24
 800487e:	4619      	mov	r1, r3
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7fe fe60 	bl	8003546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	68b8      	ldr	r0, [r7, #8]
 8004896:	f000 fa6d 	bl	8004d74 <prvAddCurrentTaskToDelayedList>
	}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	200006d4 	.word	0x200006d4

080048a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60fb      	str	r3, [r7, #12]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fe91 	bl	8003600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <xTaskRemoveFromEventList+0xac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11c      	bne.n	8004920 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fe88 	bl	8003600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <xTaskRemoveFromEventList+0xb0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <xTaskRemoveFromEventList+0xb0>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <xTaskRemoveFromEventList+0xb4>)
 8004910:	441a      	add	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7fe fe14 	bl	8003546 <vListInsertEnd>
 800491e:	e005      	b.n	800492c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3318      	adds	r3, #24
 8004924:	4619      	mov	r1, r3
 8004926:	480e      	ldr	r0, [pc, #56]	; (8004960 <xTaskRemoveFromEventList+0xb8>)
 8004928:	f7fe fe0d 	bl	8003546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <xTaskRemoveFromEventList+0xbc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	429a      	cmp	r2, r3
 8004938:	d905      	bls.n	8004946 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800493a:	2301      	movs	r3, #1
 800493c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <xTaskRemoveFromEventList+0xc0>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e001      	b.n	800494a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800494a:	697b      	ldr	r3, [r7, #20]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200007fc 	.word	0x200007fc
 8004958:	200007dc 	.word	0x200007dc
 800495c:	200006d8 	.word	0x200006d8
 8004960:	20000794 	.word	0x20000794
 8004964:	200006d4 	.word	0x200006d4
 8004968:	200007e8 	.word	0x200007e8

0800496c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <vTaskInternalSetTimeOutState+0x24>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <vTaskInternalSetTimeOutState+0x28>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	605a      	str	r2, [r3, #4]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	200007ec 	.word	0x200007ec
 8004994:	200007d8 	.word	0x200007d8

08004998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	613b      	str	r3, [r7, #16]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049da:	f000 fee3 	bl	80057a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <xTaskCheckForTimeOut+0xbc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d102      	bne.n	80049fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e023      	b.n	8004a46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <xTaskCheckForTimeOut+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d007      	beq.n	8004a1a <xTaskCheckForTimeOut+0x82>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	e015      	b.n	8004a46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d20b      	bcs.n	8004a3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff9b 	bl	800496c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e004      	b.n	8004a46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a46:	f000 fedd 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200007d8 	.word	0x200007d8
 8004a58:	200007ec 	.word	0x200007ec

08004a5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <vTaskMissedYield+0x14>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	200007e8 	.word	0x200007e8

08004a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a7c:	f000 f852 	bl	8004b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <prvIdleTask+0x28>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d9f9      	bls.n	8004a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <prvIdleTask+0x2c>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a98:	e7f0      	b.n	8004a7c <prvIdleTask+0x8>
 8004a9a:	bf00      	nop
 8004a9c:	200006d8 	.word	0x200006d8
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e00c      	b.n	8004aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <prvInitialiseTaskLists+0x60>)
 8004abc:	4413      	add	r3, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fd14 	bl	80034ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d9ef      	bls.n	8004ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ad0:	480d      	ldr	r0, [pc, #52]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004ad2:	f7fe fd0b 	bl	80034ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ad6:	480d      	ldr	r0, [pc, #52]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004ad8:	f7fe fd08 	bl	80034ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <prvInitialiseTaskLists+0x6c>)
 8004ade:	f7fe fd05 	bl	80034ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <prvInitialiseTaskLists+0x70>)
 8004ae4:	f7fe fd02 	bl	80034ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <prvInitialiseTaskLists+0x74>)
 8004aea:	f7fe fcff 	bl	80034ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <prvInitialiseTaskLists+0x78>)
 8004af0:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <prvInitialiseTaskLists+0x7c>)
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200006d8 	.word	0x200006d8
 8004b08:	20000764 	.word	0x20000764
 8004b0c:	20000778 	.word	0x20000778
 8004b10:	20000794 	.word	0x20000794
 8004b14:	200007a8 	.word	0x200007a8
 8004b18:	200007c0 	.word	0x200007c0
 8004b1c:	2000078c 	.word	0x2000078c
 8004b20:	20000790 	.word	0x20000790

08004b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2a:	e019      	b.n	8004b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b2c:	f000 fe3a 	bl	80057a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <prvCheckTasksWaitingTermination+0x50>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fd5f 	bl	8003600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b56:	f000 fe55 	bl	8005804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f810 	bl	8004b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e1      	bne.n	8004b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200007a8 	.word	0x200007a8
 8004b78:	200007d4 	.word	0x200007d4
 8004b7c:	200007bc 	.word	0x200007bc

08004b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 ffea 	bl	8005b70 <vPortFree>
				vPortFree( pxTCB );
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 ffe7 	bl	8005b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ba2:	e018      	b.n	8004bd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d103      	bne.n	8004bb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 ffde 	bl	8005b70 <vPortFree>
	}
 8004bb4:	e00f      	b.n	8004bd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d00a      	beq.n	8004bd6 <prvDeleteTCB+0x56>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <prvDeleteTCB+0x54>
	}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be6:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <prvResetNextTaskUnblockTime+0x44>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <prvResetNextTaskUnblockTime+0x14>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <prvResetNextTaskUnblockTime+0x16>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <prvResetNextTaskUnblockTime+0x48>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c02:	e008      	b.n	8004c16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <prvResetNextTaskUnblockTime+0x44>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <prvResetNextTaskUnblockTime+0x48>)
 8004c14:	6013      	str	r3, [r2, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000078c 	.word	0x2000078c
 8004c28:	200007f4 	.word	0x200007f4

08004c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <xTaskGetSchedulerState+0x34>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	e008      	b.n	8004c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <xTaskGetSchedulerState+0x38>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	e001      	b.n	8004c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c52:	687b      	ldr	r3, [r7, #4]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	200007e0 	.word	0x200007e0
 8004c64:	200007fc 	.word	0x200007fc

08004c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d06e      	beq.n	8004d5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c7e:	4b3a      	ldr	r3, [pc, #232]	; (8004d68 <xTaskPriorityDisinherit+0x100>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d00a      	beq.n	8004c9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60fb      	str	r3, [r7, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60bb      	str	r3, [r7, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d044      	beq.n	8004d5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d140      	bne.n	8004d5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fc8e 	bl	8003600 <uxListRemove>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d115      	bne.n	8004d16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	491f      	ldr	r1, [pc, #124]	; (8004d6c <xTaskPriorityDisinherit+0x104>)
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xTaskPriorityDisinherit+0xae>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	2201      	movs	r2, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <xTaskPriorityDisinherit+0x108>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4013      	ands	r3, r2
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <xTaskPriorityDisinherit+0x108>)
 8004d14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	f1c3 0207 	rsb	r2, r3, #7
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	2201      	movs	r2, #1
 8004d30:	409a      	lsls	r2, r3
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <xTaskPriorityDisinherit+0x108>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <xTaskPriorityDisinherit+0x108>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <xTaskPriorityDisinherit+0x104>)
 8004d4a:	441a      	add	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7fe fbf7 	bl	8003546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d5c:	697b      	ldr	r3, [r7, #20]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200006d4 	.word	0x200006d4
 8004d6c:	200006d8 	.word	0x200006d8
 8004d70:	200007dc 	.word	0x200007dc

08004d74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fc38 	bl	8003600 <uxListRemove>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4013      	ands	r3, r2
 8004daa:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d10a      	bne.n	8004dcc <prvAddCurrentTaskToDelayedList+0x58>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	481a      	ldr	r0, [pc, #104]	; (8004e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dc6:	f7fe fbbe 	bl	8003546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dca:	e026      	b.n	8004e1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d209      	bcs.n	8004df8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fe fbcc 	bl	800358e <vListInsert>
}
 8004df6:	e010      	b.n	8004e1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7fe fbc2 	bl	800358e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d202      	bcs.n	8004e1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6013      	str	r3, [r2, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200007d8 	.word	0x200007d8
 8004e28:	200006d4 	.word	0x200006d4
 8004e2c:	200007dc 	.word	0x200007dc
 8004e30:	200007c0 	.word	0x200007c0
 8004e34:	20000790 	.word	0x20000790
 8004e38:	2000078c 	.word	0x2000078c
 8004e3c:	200007f4 	.word	0x200007f4

08004e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e4a:	f000 fb41 	bl	80054d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <xTimerCreateTimerTask+0x80>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d021      	beq.n	8004e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e5e:	1d3a      	adds	r2, r7, #4
 8004e60:	f107 0108 	add.w	r1, r7, #8
 8004e64:	f107 030c 	add.w	r3, r7, #12
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb f9d3 	bl	8000214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	2302      	movs	r3, #2
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	460a      	mov	r2, r1
 8004e80:	4910      	ldr	r1, [pc, #64]	; (8004ec4 <xTimerCreateTimerTask+0x84>)
 8004e82:	4811      	ldr	r0, [pc, #68]	; (8004ec8 <xTimerCreateTimerTask+0x88>)
 8004e84:	f7ff f8c8 	bl	8004018 <xTaskCreateStatic>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <xTimerCreateTimerTask+0x8c>)
 8004e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <xTimerCreateTimerTask+0x8c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e96:	2301      	movs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004eb6:	697b      	ldr	r3, [r7, #20]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000830 	.word	0x20000830
 8004ec4:	08005ebc 	.word	0x08005ebc
 8004ec8:	0800510d 	.word	0x0800510d
 8004ecc:	20000834 	.word	0x20000834

08004ed0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004ede:	202c      	movs	r0, #44	; 0x2c
 8004ee0:	f000 fd82 	bl	80059e8 <pvPortMalloc>
 8004ee4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f846 	bl	8004f8c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004f08:	697b      	ldr	r3, [r7, #20]
	}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b08a      	sub	sp, #40	; 0x28
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004f20:	232c      	movs	r3, #44	; 0x2c
 8004f22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b2c      	cmp	r3, #44	; 0x2c
 8004f28:	d00a      	beq.n	8004f40 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	61bb      	str	r3, [r7, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <xTimerCreateStatic+0x4a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f809 	bl	8004f8c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8004f82:	69fb      	ldr	r3, [r7, #28]
	}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	617b      	str	r3, [r7, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004fbc:	f000 fa88 	bl	80054d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	6a3a      	ldr	r2, [r7, #32]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe faa2 	bl	800352c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004fe8:	bf00      	nop
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	623b      	str	r3, [r7, #32]
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800501e:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <xTimerGenericCommand+0x98>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02a      	beq.n	800507c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b05      	cmp	r3, #5
 8005036:	dc18      	bgt.n	800506a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005038:	f7ff fdf8 	bl	8004c2c <xTaskGetSchedulerState>
 800503c:	4603      	mov	r3, r0
 800503e:	2b02      	cmp	r3, #2
 8005040:	d109      	bne.n	8005056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <xTimerGenericCommand+0x98>)
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f107 0114 	add.w	r1, r7, #20
 800504a:	2300      	movs	r3, #0
 800504c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504e:	f7fe fbff 	bl	8003850 <xQueueGenericSend>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24
 8005054:	e012      	b.n	800507c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <xTimerGenericCommand+0x98>)
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f107 0114 	add.w	r1, r7, #20
 800505e:	2300      	movs	r3, #0
 8005060:	2200      	movs	r2, #0
 8005062:	f7fe fbf5 	bl	8003850 <xQueueGenericSend>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24
 8005068:	e008      	b.n	800507c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <xTimerGenericCommand+0x98>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f107 0114 	add.w	r1, r7, #20
 8005072:	2300      	movs	r3, #0
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	f7fe fce9 	bl	8003a4c <xQueueGenericSendFromISR>
 800507a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800507e:	4618      	mov	r0, r3
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000830 	.word	0x20000830

0800508c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005096:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <prvProcessExpiredTimer+0x7c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe faab 	bl	8003600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d122      	bne.n	80050f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	18d1      	adds	r1, r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f000 f8c8 	bl	8005254 <prvInsertTimerInActiveList>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050ca:	2300      	movs	r3, #0
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	2100      	movs	r1, #0
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f7ff ff8b 	bl	8004ff0 <xTimerGenericCommand>
 80050da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	6978      	ldr	r0, [r7, #20]
 80050fe:	4798      	blx	r3
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000828 	.word	0x20000828

0800510c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f857 	bl	80051cc <prvGetNextExpireTime>
 800511e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4619      	mov	r1, r3
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f803 	bl	8005130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800512a:	f000 f8d5 	bl	80052d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800512e:	e7f1      	b.n	8005114 <prvTimerTask+0x8>

08005130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800513a:	f7ff f991 	bl	8004460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800513e:	f107 0308 	add.w	r3, r7, #8
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f866 	bl	8005214 <prvSampleTimeNow>
 8005148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d130      	bne.n	80051b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <prvProcessTimerOrBlockTask+0x3c>
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	429a      	cmp	r2, r3
 800515c:	d806      	bhi.n	800516c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800515e:	f7ff f98d 	bl	800447c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ff91 	bl	800508c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800516a:	e024      	b.n	80051b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <prvProcessTimerOrBlockTask+0x90>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <prvProcessTimerOrBlockTask+0x94>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4619      	mov	r1, r3
 8005192:	f7fe ff0d 	bl	8003fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005196:	f7ff f971 	bl	800447c <xTaskResumeAll>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <prvProcessTimerOrBlockTask+0x98>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
}
 80051b0:	e001      	b.n	80051b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051b2:	f7ff f963 	bl	800447c <xTaskResumeAll>
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	2000082c 	.word	0x2000082c
 80051c4:	20000830 	.word	0x20000830
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <prvGetNextExpireTime+0x44>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <prvGetNextExpireTime+0x44>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e001      	b.n	8005202 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000828 	.word	0x20000828

08005214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800521c:	f7ff f9ca 	bl	80045b4 <xTaskGetTickCount>
 8005220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <prvSampleTimeNow+0x3c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d205      	bcs.n	8005238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800522c:	f000 f8ee 	bl	800540c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e002      	b.n	800523e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <prvSampleTimeNow+0x3c>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000838 	.word	0x20000838

08005254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d812      	bhi.n	80052a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e01b      	b.n	80052c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800528e:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <prvInsertTimerInActiveList+0x7c>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7fe f978 	bl	800358e <vListInsert>
 800529e:	e012      	b.n	80052c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d206      	bcs.n	80052b6 <prvInsertTimerInActiveList+0x62>
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d302      	bcc.n	80052b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e007      	b.n	80052c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <prvInsertTimerInActiveList+0x80>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe f964 	bl	800358e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052c6:	697b      	ldr	r3, [r7, #20]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	2000082c 	.word	0x2000082c
 80052d4:	20000828 	.word	0x20000828

080052d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052de:	e081      	b.n	80053e4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	db7d      	blt.n	80053e2 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	3304      	adds	r3, #4
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe f982 	bl	8003600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ff88 	bl	8005214 <prvSampleTimeNow>
 8005304:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b09      	cmp	r3, #9
 800530a:	d86b      	bhi.n	80053e4 <prvProcessReceivedCommands+0x10c>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <prvProcessReceivedCommands+0x3c>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	0800533d 	.word	0x0800533d
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800533d 	.word	0x0800533d
 8005320:	080053e5 	.word	0x080053e5
 8005324:	08005399 	.word	0x08005399
 8005328:	080053d1 	.word	0x080053d1
 800532c:	0800533d 	.word	0x0800533d
 8005330:	0800533d 	.word	0x0800533d
 8005334:	080053e5 	.word	0x080053e5
 8005338:	08005399 	.word	0x08005399
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	18d1      	adds	r1, r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a3a      	ldr	r2, [r7, #32]
 8005348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534a:	f7ff ff83 	bl	8005254 <prvInsertTimerInActiveList>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d047      	beq.n	80053e4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800535a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d13f      	bne.n	80053e4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	441a      	add	r2, r3
 800536c:	2300      	movs	r3, #0
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	2100      	movs	r1, #0
 8005374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005376:	f7ff fe3b 	bl	8004ff0 <xTimerGenericCommand>
 800537a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d130      	bne.n	80053e4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	61bb      	str	r3, [r7, #24]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	617b      	str	r3, [r7, #20]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	18d1      	adds	r1, r2, r3
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ca:	f7ff ff43 	bl	8005254 <prvInsertTimerInActiveList>
					break;
 80053ce:	e009      	b.n	80053e4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80053da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053dc:	f000 fbc8 	bl	8005b70 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053e0:	e000      	b.n	80053e4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80053e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <prvProcessReceivedCommands+0x130>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f107 0108 	add.w	r1, r7, #8
 80053ec:	2200      	movs	r2, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fbc4 	bl	8003b7c <xQueueReceive>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f47f af72 	bne.w	80052e0 <prvProcessReceivedCommands+0x8>
	}
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000830 	.word	0x20000830

0800540c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005412:	e045      	b.n	80054a0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800541e:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3304      	adds	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe f8e7 	bl	8003600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d12e      	bne.n	80054a0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90e      	bls.n	8005472 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fe f88f 	bl	800358e <vListInsert>
 8005470:	e016      	b.n	80054a0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005472:	2300      	movs	r3, #0
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	2100      	movs	r1, #0
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fdb7 	bl	8004ff0 <xTimerGenericCommand>
 8005482:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	603b      	str	r3, [r7, #0]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1b4      	bne.n	8005414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000828 	.word	0x20000828
 80054cc:	2000082c 	.word	0x2000082c

080054d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054d6:	f000 f965 	bl	80057a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d120      	bne.n	8005524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e2:	4814      	ldr	r0, [pc, #80]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054e4:	f7fe f802 	bl	80034ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054ea:	f7fd ffff 	bl	80034ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <prvCheckForValidListAndQueue+0x6c>)
 80054f0:	4a10      	ldr	r2, [pc, #64]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <prvCheckForValidListAndQueue+0x70>)
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <prvCheckForValidListAndQueue+0x74>)
 8005500:	4a11      	ldr	r2, [pc, #68]	; (8005548 <prvCheckForValidListAndQueue+0x78>)
 8005502:	210c      	movs	r1, #12
 8005504:	200a      	movs	r0, #10
 8005506:	f7fe f90d 	bl	8003724 <xQueueGenericCreateStatic>
 800550a:	4603      	mov	r3, r0
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800550e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490b      	ldr	r1, [pc, #44]	; (800554c <prvCheckForValidListAndQueue+0x7c>)
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fd1c 	bl	8003f5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f000 f96e 	bl	8005804 <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000830 	.word	0x20000830
 8005534:	20000800 	.word	0x20000800
 8005538:	20000814 	.word	0x20000814
 800553c:	20000828 	.word	0x20000828
 8005540:	2000082c 	.word	0x2000082c
 8005544:	200008b4 	.word	0x200008b4
 8005548:	2000083c 	.word	0x2000083c
 800554c:	08005ec4 	.word	0x08005ec4

08005550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b04      	subs	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b04      	subs	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <pxPortInitialiseStack+0x64>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b14      	subs	r3, #20
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b04      	subs	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f06f 0202 	mvn.w	r2, #2
 800559e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b20      	subs	r3, #32
 80055a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	080055b9 	.word	0x080055b9

080055b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <prvTaskExitError+0x54>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d00a      	beq.n	80055e2 <prvTaskExitError+0x2a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvTaskExitError+0x28>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60bb      	str	r3, [r7, #8]
}
 80055f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055f6:	bf00      	nop
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0fc      	beq.n	80055f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000000c 	.word	0x2000000c

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst2>:
 8005630:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <prvPortStartFirstTask+0x24>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8814 	msr	CONTROL, r0
 800564a:	b662      	cpsie	i
 800564c:	b661      	cpsie	f
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	df00      	svc	0
 8005658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800565a:	bf00      	nop
 800565c:	e000ed08 	.word	0xe000ed08

08005660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <xPortStartScheduler+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <xPortStartScheduler+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10a      	bne.n	80056a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <xPortStartScheduler+0x12c>)
 80056a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xPortStartScheduler+0x130>)
 80056cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xPortStartScheduler+0x134>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d4:	e009      	b.n	80056ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <xPortStartScheduler+0x134>)
 80056de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0ef      	beq.n	80056d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <xPortStartScheduler+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00a      	beq.n	8005718 <xPortStartScheduler+0xb8>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xPortStartScheduler+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xPortStartScheduler+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <xPortStartScheduler+0x134>)
 800572c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <xPortStartScheduler+0x138>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xPortStartScheduler+0x138>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <xPortStartScheduler+0x138>)
 8005748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800574c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800574e:	f000 f8dd 	bl	800590c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <xPortStartScheduler+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005758:	f000 f8fc 	bl	8005954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xPortStartScheduler+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <xPortStartScheduler+0x140>)
 8005762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005768:	f7ff ff66 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800576c:	f7fe fff0 	bl	8004750 <vTaskSwitchContext>
	prvTaskExitError();
 8005770:	f7ff ff22 	bl	80055b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00
 8005784:	410fc271 	.word	0x410fc271
 8005788:	410fc270 	.word	0x410fc270
 800578c:	e000e400 	.word	0xe000e400
 8005790:	200008fc 	.word	0x200008fc
 8005794:	20000900 	.word	0x20000900
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	e000ef34 	.word	0xe000ef34

080057a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <vPortEnterCritical+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <vPortEnterCritical+0x58>)
 80057c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <vPortEnterCritical+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortEnterCritical+0x5c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vPortEnterCritical+0x4a>
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <vPortExitCritical+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vPortExitCritical+0x24>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <vPortExitCritical+0x50>)
 8005830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <vPortExitCritical+0x42>
 800583a:	2300      	movs	r3, #0
 800583c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7fe ff5e 	bl	8004750 <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e2:	f7fe fe77 	bl	80045d4 <xTaskIncrementTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <SysTick_Handler+0x40>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <vPortSetupTimerInterrupt+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <vPortSetupTimerInterrupt+0x44>)
 800592a:	3b01      	subs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	20000000 	.word	0x20000000
 800594c:	10624dd3 	.word	0x10624dd3
 8005950:	e000e014 	.word	0xe000e014

08005954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005964 <vPortEnableVFP+0x10>
 8005958:	6801      	ldr	r1, [r0, #0]
 800595a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595e:	6001      	str	r1, [r0, #0]
 8005960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005962:	bf00      	nop
 8005964:	e000ed88 	.word	0xe000ed88

08005968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d914      	bls.n	80059a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <vPortValidateInterruptPriority+0x70>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <vPortValidateInterruptPriority+0x74>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	7afa      	ldrb	r2, [r7, #11]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20a      	bcs.n	80059a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <vPortValidateInterruptPriority+0x78>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <vPortValidateInterruptPriority+0x7c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d90a      	bls.n	80059ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	603b      	str	r3, [r7, #0]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vPortValidateInterruptPriority+0x60>
	}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e3f0 	.word	0xe000e3f0
 80059dc:	200008fc 	.word	0x200008fc
 80059e0:	e000ed0c 	.word	0xe000ed0c
 80059e4:	20000900 	.word	0x20000900

080059e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059f4:	f7fe fd34 	bl	8004460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f8:	4b58      	ldr	r3, [pc, #352]	; (8005b5c <pvPortMalloc+0x174>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a00:	f000 f910 	bl	8005c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a04:	4b56      	ldr	r3, [pc, #344]	; (8005b60 <pvPortMalloc+0x178>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 808e 	bne.w	8005b2e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01d      	beq.n	8005a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	3308      	adds	r3, #8
 8005a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <pvPortMalloc+0x6c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617b      	str	r3, [r7, #20]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d069      	beq.n	8005b2e <pvPortMalloc+0x146>
 8005a5a:	4b42      	ldr	r3, [pc, #264]	; (8005b64 <pvPortMalloc+0x17c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d864      	bhi.n	8005b2e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a64:	4b40      	ldr	r3, [pc, #256]	; (8005b68 <pvPortMalloc+0x180>)
 8005a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a68:	4b3f      	ldr	r3, [pc, #252]	; (8005b68 <pvPortMalloc+0x180>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a6e:	e004      	b.n	8005a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <pvPortMalloc+0xa4>
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f1      	bne.n	8005a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a8c:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <pvPortMalloc+0x174>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d04b      	beq.n	8005b2e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d91f      	bls.n	8005af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	613b      	str	r3, [r7, #16]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af2:	69b8      	ldr	r0, [r7, #24]
 8005af4:	f000 f8f8 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <pvPortMalloc+0x17c>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <pvPortMalloc+0x17c>)
 8005b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b06:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <pvPortMalloc+0x17c>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b18      	ldr	r3, [pc, #96]	; (8005b6c <pvPortMalloc+0x184>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d203      	bcs.n	8005b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <pvPortMalloc+0x17c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <pvPortMalloc+0x184>)
 8005b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <pvPortMalloc+0x178>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b2e:	f7fe fca5 	bl	800447c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <pvPortMalloc+0x16a>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <pvPortMalloc+0x168>
	return pvReturn;
 8005b52:	69fb      	ldr	r3, [r7, #28]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	2000150c 	.word	0x2000150c
 8005b60:	20001518 	.word	0x20001518
 8005b64:	20001510 	.word	0x20001510
 8005b68:	20001504 	.word	0x20001504
 8005b6c:	20001514 	.word	0x20001514

08005b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d048      	beq.n	8005c14 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b82:	2308      	movs	r3, #8
 8005b84:	425b      	negs	r3, r3
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <vPortFree+0xac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <vPortFree+0x44>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <vPortFree+0x62>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60bb      	str	r3, [r7, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <vPortFree+0xac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <vPortFree+0xac>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bf8:	f7fe fc32 	bl	8004460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vPortFree+0xb0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <vPortFree+0xb0>)
 8005c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c0a:	6938      	ldr	r0, [r7, #16]
 8005c0c:	f000 f86c 	bl	8005ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c10:	f7fe fc34 	bl	800447c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20001518 	.word	0x20001518
 8005c20:	20001510 	.word	0x20001510

08005c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <prvHeapInit+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <prvHeapInit+0xac>)
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c70:	2208      	movs	r2, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvHeapInit+0xb4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvHeapInit+0xb8>)
 8005cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <prvHeapInit+0xbc>)
 8005cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <prvHeapInit+0xc0>)
 8005cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000904 	.word	0x20000904
 8005cd4:	20001504 	.word	0x20001504
 8005cd8:	2000150c 	.word	0x2000150c
 8005cdc:	20001514 	.word	0x20001514
 8005ce0:	20001510 	.word	0x20001510
 8005ce4:	20001518 	.word	0x20001518

08005ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <prvInsertBlockIntoFreeList+0x14>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d118      	bne.n	8005d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00d      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e003      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d002      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20001504 	.word	0x20001504
 8005d98:	2000150c 	.word	0x2000150c

08005d9c <__libc_init_array>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4d0d      	ldr	r5, [pc, #52]	; (8005dd4 <__libc_init_array+0x38>)
 8005da0:	4c0d      	ldr	r4, [pc, #52]	; (8005dd8 <__libc_init_array+0x3c>)
 8005da2:	1b64      	subs	r4, r4, r5
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	2600      	movs	r6, #0
 8005da8:	42a6      	cmp	r6, r4
 8005daa:	d109      	bne.n	8005dc0 <__libc_init_array+0x24>
 8005dac:	4d0b      	ldr	r5, [pc, #44]	; (8005ddc <__libc_init_array+0x40>)
 8005dae:	4c0c      	ldr	r4, [pc, #48]	; (8005de0 <__libc_init_array+0x44>)
 8005db0:	f000 f82e 	bl	8005e10 <_init>
 8005db4:	1b64      	subs	r4, r4, r5
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	2600      	movs	r6, #0
 8005dba:	42a6      	cmp	r6, r4
 8005dbc:	d105      	bne.n	8005dca <__libc_init_array+0x2e>
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc4:	4798      	blx	r3
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	e7ee      	b.n	8005da8 <__libc_init_array+0xc>
 8005dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dce:	4798      	blx	r3
 8005dd0:	3601      	adds	r6, #1
 8005dd2:	e7f2      	b.n	8005dba <__libc_init_array+0x1e>
 8005dd4:	08005f04 	.word	0x08005f04
 8005dd8:	08005f04 	.word	0x08005f04
 8005ddc:	08005f04 	.word	0x08005f04
 8005de0:	08005f08 	.word	0x08005f08

08005de4 <memcpy>:
 8005de4:	440a      	add	r2, r1
 8005de6:	4291      	cmp	r1, r2
 8005de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dec:	d100      	bne.n	8005df0 <memcpy+0xc>
 8005dee:	4770      	bx	lr
 8005df0:	b510      	push	{r4, lr}
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	d1f9      	bne.n	8005df2 <memcpy+0xe>
 8005dfe:	bd10      	pop	{r4, pc}

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <_init>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr

08005e1c <_fini>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr
