
011_i2c_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002a7c  08002a7c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a7c  08002a7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000014  08002a98  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002a98  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008657  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001651  00000000  00000000  0002869b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e898  00000000  00000000  0002aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099fe  00000000  00000000  000492e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b834c  00000000  00000000  00052cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b02a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b9c  00000000  00000000  0010b080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002a34 	.word	0x08002a34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08002a34 	.word	0x08002a34

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa29 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f819 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8bb 	bl	800035c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e6:	f000 f873 	bl	80002d0 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Master_Transmit(&hi2c1,0x08, (uint8_t*)data,sizeof(data),100);
 80001ea:	2364      	movs	r3, #100	; 0x64
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2307      	movs	r3, #7
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <main+0x38>)
 80001f2:	2108      	movs	r1, #8
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <main+0x3c>)
 80001f6:	f000 fdd7 	bl	8000da8 <HAL_I2C_Master_Transmit>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001fa:	2120      	movs	r1, #32
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f000 fd28 	bl	8000c54 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 fa79 	bl	80006fc <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1,0x08, (uint8_t*)data,sizeof(data),100);
 800020a:	e7ee      	b.n	80001ea <main+0x16>
 800020c:	20000000 	.word	0x20000000
 8000210:	20000030 	.word	0x20000030

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0a6      	sub	sp, #152	; 0x98
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fbfe 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2258      	movs	r2, #88	; 0x58
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fbf0 	bl	8002a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
 800024e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800025c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f898 	bl	80013a8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f8e5 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ff98 	bl	80021d4 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002aa:	f000 f8cf 	bl	800044c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002ae:	2320      	movs	r3, #32
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 f971 	bl	80025a0 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c4:	f000 f8c2 	bl	800044c <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3798      	adds	r7, #152	; 0x98
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MX_I2C1_Init+0x80>)
 80002d6:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <MX_I2C1_Init+0x84>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_I2C1_Init+0x80>)
 80002dc:	2201      	movs	r2, #1
 80002de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_I2C1_Init+0x80>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_I2C1_Init+0x80>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_I2C1_Init+0x80>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_I2C1_Init+0x80>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_I2C1_Init+0x80>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_I2C1_Init+0x80>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C1_Init+0x80>)
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030a:	4811      	ldr	r0, [pc, #68]	; (8000350 <MX_I2C1_Init+0x80>)
 800030c:	f000 fcbc 	bl	8000c88 <HAL_I2C_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000316:	f000 f899 	bl	800044c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031a:	2100      	movs	r1, #0
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <MX_I2C1_Init+0x80>)
 800031e:	f000 ffab 	bl	8001278 <HAL_I2CEx_ConfigAnalogFilter>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000328:	f000 f890 	bl	800044c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800032c:	2100      	movs	r1, #0
 800032e:	4808      	ldr	r0, [pc, #32]	; (8000350 <MX_I2C1_Init+0x80>)
 8000330:	f000 ffed 	bl	800130e <HAL_I2CEx_ConfigDigitalFilter>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033a:	f000 f887 	bl	800044c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_I2C1_Init+0x88>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <MX_I2C1_Init+0x88>)
 8000344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000348:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000030 	.word	0x20000030
 8000354:	40005400 	.word	0x40005400
 8000358:	40010000 	.word	0x40010000

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	4b33      	ldr	r3, [pc, #204]	; (8000440 <MX_GPIO_Init+0xe4>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a32      	ldr	r2, [pc, #200]	; (8000440 <MX_GPIO_Init+0xe4>)
 8000378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b30      	ldr	r3, [pc, #192]	; (8000440 <MX_GPIO_Init+0xe4>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <MX_GPIO_Init+0xe4>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <MX_GPIO_Init+0xe4>)
 8000390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <MX_GPIO_Init+0xe4>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b27      	ldr	r3, [pc, #156]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a26      	ldr	r2, [pc, #152]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b24      	ldr	r3, [pc, #144]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b21      	ldr	r3, [pc, #132]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a20      	ldr	r2, [pc, #128]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_GPIO_Init+0xe4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2120      	movs	r1, #32
 80003d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003da:	f000 fc23 	bl	8000c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_GPIO_Init+0xe8>)
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	4815      	ldr	r0, [pc, #84]	; (8000448 <MX_GPIO_Init+0xec>)
 80003f4:	f000 fa8c 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f8:	230c      	movs	r3, #12
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000408:	2307      	movs	r3, #7
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fa7b 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041a:	2320      	movs	r3, #32
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2300      	movs	r3, #0
 8000428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 fa6c 	bl	8000910 <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	10210000 	.word	0x10210000
 8000448:	48000800 	.word	0x48000800

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800048e:	2007      	movs	r0, #7
 8000490:	f000 fa0a 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a26      	ldr	r2, [pc, #152]	; (8000558 <HAL_I2C_MspInit+0xb8>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d145      	bne.n	800054e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b26      	ldr	r3, [pc, #152]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a25      	ldr	r2, [pc, #148]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b23      	ldr	r3, [pc, #140]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b20      	ldr	r3, [pc, #128]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <HAL_I2C_MspInit+0xbc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f8:	2312      	movs	r3, #18
 80004fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000504:	2304      	movs	r3, #4
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	4619      	mov	r1, r3
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 f9fd 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051a:	2312      	movs	r3, #18
 800051c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051e:	2301      	movs	r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000526:	2304      	movs	r3, #4
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_I2C_MspInit+0xc0>)
 8000532:	f000 f9ed 	bl	8000910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_I2C_MspInit+0xbc>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_I2C_MspInit+0xbc>)
 800053c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_I2C_MspInit+0xbc>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800054e:	bf00      	nop
 8000550:	3728      	adds	r7, #40	; 0x28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40005400 	.word	0x40005400
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f884 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0b      	ldr	r4, [pc, #44]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000606:	f7ff ffd7 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f002 f9e7 	bl	80029dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff fde1 	bl	80001d4 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000614:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000620:	08002a84 	.word	0x08002a84
  ldr r2, =_sbss
 8000624:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000628:	20000080 	.word	0x20000080

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f931 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff04 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f93b 	bl	80008f6 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f911 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000010 	.word	0x20000010
 80006b8:	2000000c 	.word	0x2000000c

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000010 	.word	0x20000010
 80006e0:	2000007c 	.word	0x2000007c

080006e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c

080006fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000704:	f7ff ffee 	bl	80006e4 <HAL_GetTick>
 8000708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000714:	d005      	beq.n	8000722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_Delay+0x44>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000722:	bf00      	nop
 8000724:	f7ff ffde 	bl	80006e4 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8f7      	bhi.n	8000724 <HAL_Delay+0x28>
  {
  }
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000010 	.word	0x20000010

08000744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60d3      	str	r3, [r2, #12]
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	f003 0307 	and.w	r3, r3, #7
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff8e 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff47 	bl	8000744 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff5c 	bl	800078c <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff8e 	bl	80007fc <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5d 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffb0 	bl	8000864 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091e:	e160      	b.n	8000be2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 8152 	beq.w	8000bdc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d00b      	beq.n	8000958 <HAL_GPIO_Init+0x48>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094c:	2b11      	cmp	r3, #17
 800094e:	d003      	beq.n	8000958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b12      	cmp	r3, #18
 8000956:	d130      	bne.n	80009ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098e:	2201      	movs	r2, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	f003 0201 	and.w	r2, r3, #1
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d003      	beq.n	80009fa <HAL_GPIO_Init+0xea>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d123      	bne.n	8000a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	08da      	lsrs	r2, r3, #3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3208      	adds	r2, #8
 8000a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	691a      	ldr	r2, [r3, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	08da      	lsrs	r2, r3, #3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3208      	adds	r2, #8
 8000a3c:	6939      	ldr	r1, [r7, #16]
 8000a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f003 0203 	and.w	r2, r3, #3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 80ac 	beq.w	8000bdc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	4b5e      	ldr	r3, [pc, #376]	; (8000c00 <HAL_GPIO_Init+0x2f0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a5d      	ldr	r2, [pc, #372]	; (8000c00 <HAL_GPIO_Init+0x2f0>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b5b      	ldr	r3, [pc, #364]	; (8000c00 <HAL_GPIO_Init+0x2f0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a9c:	4a59      	ldr	r2, [pc, #356]	; (8000c04 <HAL_GPIO_Init+0x2f4>)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac6:	d025      	beq.n	8000b14 <HAL_GPIO_Init+0x204>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a4f      	ldr	r2, [pc, #316]	; (8000c08 <HAL_GPIO_Init+0x2f8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d01f      	beq.n	8000b10 <HAL_GPIO_Init+0x200>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d019      	beq.n	8000b0c <HAL_GPIO_Init+0x1fc>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a4d      	ldr	r2, [pc, #308]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1f8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <HAL_GPIO_Init+0x304>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1f4>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a4b      	ldr	r2, [pc, #300]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1f0>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a4a      	ldr	r2, [pc, #296]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1ec>
 8000af8:	2306      	movs	r3, #6
 8000afa:	e00c      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000afc:	2307      	movs	r3, #7
 8000afe:	e00a      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b00:	2305      	movs	r3, #5
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b14:	2300      	movs	r3, #0
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b26:	4937      	ldr	r1, [pc, #220]	; (8000c04 <HAL_GPIO_Init+0x2f4>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b58:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f ae97 	bne.w	8000920 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	48001400 	.word	0x48001400
 8000c1c:	48001800 	.word	0x48001800
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c40:	e002      	b.n	8000c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	400b      	ands	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e081      	b.n	8000d9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fbf6 	bl	80004a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ce8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d107      	bne.n	8000d02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e006      	b.n	8000d10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d104      	bne.n	8000d22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	ea42 0103 	orr.w	r1, r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	021a      	lsls	r2, r3, #8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69d9      	ldr	r1, [r3, #28]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a1a      	ldr	r2, [r3, #32]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2220      	movs	r2, #32
 8000d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	461a      	mov	r2, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	817b      	strh	r3, [r7, #10]
 8000db8:	4613      	mov	r3, r2
 8000dba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b20      	cmp	r3, #32
 8000dc6:	f040 80da 	bne.w	8000f7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_I2C_Master_Transmit+0x30>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e0d3      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000de0:	f7ff fc80 	bl	80006e4 <HAL_GetTick>
 8000de4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2319      	movs	r3, #25
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f000 f8f0 	bl	8000fd8 <I2C_WaitOnFlagUntilTimeout>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0be      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2221      	movs	r2, #33	; 0x21
 8000e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	893a      	ldrh	r2, [r7, #8]
 8000e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d90e      	bls.n	8000e52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	8979      	ldrh	r1, [r7, #10]
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_I2C_Master_Transmit+0x1e0>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 f9e6 	bl	800121c <I2C_TransferConfig>
 8000e50:	e06c      	b.n	8000f2c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	8979      	ldrh	r1, [r7, #10]
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <HAL_I2C_Master_Transmit+0x1e0>)
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f9d5 	bl	800121c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000e72:	e05b      	b.n	8000f2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	6a39      	ldr	r1, [r7, #32]
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 f8ed 	bl	8001058 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e07b      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d034      	beq.n	8000f2c <HAL_I2C_Master_Transmit+0x184>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d130      	bne.n	8000f2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f87f 	bl	8000fd8 <I2C_WaitOnFlagUntilTimeout>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e04d      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	2bff      	cmp	r3, #255	; 0xff
 8000eec:	d90e      	bls.n	8000f0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	8979      	ldrh	r1, [r7, #10]
 8000efc:	2300      	movs	r3, #0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f989 	bl	800121c <I2C_TransferConfig>
 8000f0a:	e00f      	b.n	8000f2c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	8979      	ldrh	r1, [r7, #10]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f978 	bl	800121c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d19e      	bne.n	8000e74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f8cc 	bl	80010d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e01a      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_I2C_Master_Transmit+0x1e4>)
 8000f5e:	400b      	ands	r3, r1
 8000f60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2220      	movs	r2, #32
 8000f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000f7e:	2302      	movs	r3, #2
  }
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	80002000 	.word	0x80002000
 8000f8c:	fe00e800 	.word	0xfe00e800

08000f90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d103      	bne.n	8000fae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d007      	beq.n	8000fcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	619a      	str	r2, [r3, #24]
  }
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fe8:	e022      	b.n	8001030 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d01e      	beq.n	8001030 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff2:	f7ff fb77 	bl	80006e4 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d302      	bcc.n	8001008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d113      	bne.n	8001030 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f043 0220 	orr.w	r2, r3, #32
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2220      	movs	r2, #32
 8001018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e00f      	b.n	8001050 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	699a      	ldr	r2, [r3, #24]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4013      	ands	r3, r2
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	429a      	cmp	r2, r3
 800104c:	d0cd      	beq.n	8000fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001064:	e02c      	b.n	80010c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f870 	bl	8001150 <I2C_IsAcknowledgeFailed>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e02a      	b.n	80010d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d01e      	beq.n	80010c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001082:	f7ff fb2f 	bl	80006e4 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	429a      	cmp	r2, r3
 8001090:	d302      	bcc.n	8001098 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d113      	bne.n	80010c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f043 0220 	orr.w	r2, r3, #32
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2220      	movs	r2, #32
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e007      	b.n	80010d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d1cb      	bne.n	8001066 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010e4:	e028      	b.n	8001138 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f830 	bl	8001150 <I2C_IsAcknowledgeFailed>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e026      	b.n	8001148 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010fa:	f7ff faf3 	bl	80006e4 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	d302      	bcc.n	8001110 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d113      	bne.n	8001138 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f043 0220 	orr.w	r2, r3, #32
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2220      	movs	r2, #32
 8001120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e007      	b.n	8001148 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	2b20      	cmp	r3, #32
 8001144:	d1cf      	bne.n	80010e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b10      	cmp	r3, #16
 8001168:	d151      	bne.n	800120e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800116a:	e022      	b.n	80011b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d01e      	beq.n	80011b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001174:	f7ff fab6 	bl	80006e4 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	429a      	cmp	r2, r3
 8001182:	d302      	bcc.n	800118a <I2C_IsAcknowledgeFailed+0x3a>
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d113      	bne.n	80011b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f043 0220 	orr.w	r2, r3, #32
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e02e      	b.n	8001210 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d1d5      	bne.n	800116c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2210      	movs	r2, #16
 80011c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2220      	movs	r2, #32
 80011ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff fedd 	bl	8000f90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <I2C_IsAcknowledgeFailed+0xc8>)
 80011e2:	400b      	ands	r3, r1
 80011e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f043 0204 	orr.w	r2, r3, #4
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2220      	movs	r2, #32
 80011f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	fe00e800 	.word	0xfe00e800

0800121c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	817b      	strh	r3, [r7, #10]
 800122a:	4613      	mov	r3, r2
 800122c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	0d5b      	lsrs	r3, r3, #21
 8001238:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <I2C_TransferConfig+0x58>)
 800123e:	430b      	orrs	r3, r1
 8001240:	43db      	mvns	r3, r3
 8001242:	ea02 0103 	and.w	r1, r2, r3
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800124c:	7a7b      	ldrb	r3, [r7, #9]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	431a      	orrs	r2, r3
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	431a      	orrs	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	03ff63ff 	.word	0x03ff63ff

08001278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b20      	cmp	r3, #32
 800128c:	d138      	bne.n	8001300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001298:	2302      	movs	r3, #2
 800129a:	e032      	b.n	8001302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2224      	movs	r2, #36	; 0x24
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001300:	2302      	movs	r3, #2
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b20      	cmp	r3, #32
 8001322:	d139      	bne.n	8001398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800132e:	2302      	movs	r3, #2
 8001330:	e033      	b.n	800139a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2224      	movs	r2, #36	; 0x24
 800133e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001398:	2302      	movs	r3, #2
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	f000 bf01 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8160 	beq.w	8001692 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013d2:	4bae      	ldr	r3, [pc, #696]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	4bab      	ldr	r3, [pc, #684]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d159      	bne.n	800149e <HAL_RCC_OscConfig+0xf6>
 80013ea:	4ba8      	ldr	r3, [pc, #672]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d152      	bne.n	800149e <HAL_RCC_OscConfig+0xf6>
 80013f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800140c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x82>
 8001424:	4b99      	ldr	r3, [pc, #612]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0xae>
 800142a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800143e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001442:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001446:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001452:	4b8e      	ldr	r3, [pc, #568]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800145a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800145e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001462:	fa92 f2a2 	rbit	r2, r2
 8001466:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800146a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8102 	beq.w	8001690 <HAL_RCC_OscConfig+0x2e8>
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80fc 	bne.w	8001690 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f000 be93 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x110>
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a77      	ldr	r2, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e030      	b.n	800151a <HAL_RCC_OscConfig+0x172>
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x134>
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6e      	ldr	r2, [pc, #440]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01e      	b.n	800151a <HAL_RCC_OscConfig+0x172>
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e6:	d10c      	bne.n	8001502 <HAL_RCC_OscConfig+0x15a>
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a67      	ldr	r2, [pc, #412]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a64      	ldr	r2, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e00b      	b.n	800151a <HAL_RCC_OscConfig+0x172>
 8001502:	4b62      	ldr	r3, [pc, #392]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a61      	ldr	r2, [pc, #388]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d059      	beq.n	80015d8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff f8de 	bl	80006e4 <HAL_GetTick>
 8001528:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff f8d9 	bl	80006e4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d902      	bls.n	8001544 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	f000 be40 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001548:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001558:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d102      	bne.n	8001576 <HAL_RCC_OscConfig+0x1ce>
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x1fa>
 8001576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800158a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001592:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ab      	beq.n	800152e <HAL_RCC_OscConfig+0x186>
 80015d6:	e05c      	b.n	8001692 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f884 	bl	80006e4 <HAL_GetTick>
 80015dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e2:	f7ff f87f 	bl	80006e4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d902      	bls.n	80015f8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f000 bde6 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
 80015f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800160c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x282>
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x2ae>
 800162a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001646:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800165e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001662:	fa92 f2a2 	rbit	r2, r2
 8001666:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800166a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800166e:	fab2 f282 	clz	r2, r2
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f042 0220 	orr.w	r2, r2, #32
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	f002 021f 	and.w	r2, r2, #31
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ab      	bne.n	80015e2 <HAL_RCC_OscConfig+0x23a>
 800168a:	e002      	b.n	8001692 <HAL_RCC_OscConfig+0x2ea>
 800168c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8170 	beq.w	8001982 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016a2:	4bd0      	ldr	r3, [pc, #832]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ae:	4bcd      	ldr	r3, [pc, #820]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d16d      	bne.n	8001796 <HAL_RCC_OscConfig+0x3ee>
 80016ba:	4bca      	ldr	r3, [pc, #808]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c6:	d166      	bne.n	8001796 <HAL_RCC_OscConfig+0x3ee>
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x350>
 80016f2:	4bbc      	ldr	r3, [pc, #752]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e013      	b.n	8001720 <HAL_RCC_OscConfig+0x378>
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001710:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800171c:	4bb1      	ldr	r3, [pc, #708]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2202      	movs	r2, #2
 8001722:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001726:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001732:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f042 0220 	orr.w	r2, r2, #32
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_RCC_OscConfig+0x3ba>
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	f000 bd31 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	21f8      	movs	r1, #248	; 0xf8
 8001772:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800177a:	fa91 f1a1 	rbit	r1, r1
 800177e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001782:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001786:	fab1 f181 	clz	r1, r1
 800178a:	b2c9      	uxtb	r1, r1
 800178c:	408b      	lsls	r3, r1
 800178e:	4995      	ldr	r1, [pc, #596]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001794:	e0f5      	b.n	8001982 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8085 	beq.w	80018ac <HAL_RCC_OscConfig+0x504>
 80017a2:	2301      	movs	r3, #1
 80017a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	461a      	mov	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7fe ff89 	bl	80006e4 <HAL_GetTick>
 80017d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d8:	f7fe ff84 	bl	80006e4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 bceb 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001800:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0x476>
 8001818:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e013      	b.n	8001846 <HAL_RCC_OscConfig+0x49e>
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001830:	2302      	movs	r3, #2
 8001832:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001836:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001842:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2202      	movs	r2, #2
 8001848:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800184c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001850:	fa92 f2a2 	rbit	r2, r2
 8001854:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001858:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800185c:	fab2 f282 	clz	r2, r2
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f042 0220 	orr.w	r2, r2, #32
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f002 021f 	and.w	r2, r2, #31
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0af      	beq.n	80017d8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	21f8      	movs	r1, #248	; 0xf8
 8001888:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001890:	fa91 f1a1 	rbit	r1, r1
 8001894:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001898:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800189c:	fab1 f181 	clz	r1, r1
 80018a0:	b2c9      	uxtb	r1, r1
 80018a2:	408b      	lsls	r3, r1
 80018a4:	494f      	ldr	r1, [pc, #316]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e06a      	b.n	8001982 <HAL_RCC_OscConfig+0x5da>
 80018ac:	2301      	movs	r3, #1
 80018ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	461a      	mov	r2, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe ff04 	bl	80006e4 <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7fe feff 	bl	80006e4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d902      	bls.n	80018f8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	f000 bc66 	b.w	80021c4 <HAL_RCC_OscConfig+0xe1c>
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800190a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x580>
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0x5a8>
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001940:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_OscConfig+0x63c>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2202      	movs	r2, #2
 8001952:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001956:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001962:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1af      	bne.n	80018e2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80da 	beq.w	8001b46 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d069      	beq.n	8001a70 <HAL_RCC_OscConfig+0x6c8>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x640>)
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	461a      	mov	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7fe fe8d 	bl	80006e4 <HAL_GetTick>
 80019ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	e00d      	b.n	80019ec <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d0:	f7fe fe88 	bl	80006e4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d905      	bls.n	80019ec <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e3ef      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	10908120 	.word	0x10908120
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a30:	4ba4      	ldr	r3, [pc, #656]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a38:	2102      	movs	r1, #2
 8001a3a:	6019      	str	r1, [r3, #0]
 8001a3c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f1a3 	rbit	r1, r3
 8001a46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a4a:	6019      	str	r1, [r3, #0]
  return result;
 8001a4c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0b0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x628>
 8001a6e:	e06a      	b.n	8001b46 <HAL_RCC_OscConfig+0x79e>
 8001a70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a86:	601a      	str	r2, [r3, #0]
  return result;
 8001a88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_OscConfig+0x920>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7fe fe1f 	bl	80006e4 <HAL_GetTick>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7fe fe1a 	bl	80006e4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e381      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001ac0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b10:	2102      	movs	r1, #2
 8001b12:	6019      	str	r1, [r3, #0]
 8001b14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f1a3 	rbit	r1, r3
 8001b1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b22:	6019      	str	r1, [r3, #0]
  return result;
 8001b24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1b2      	bne.n	8001aac <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8157 	beq.w	8001e04 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a55      	ldr	r2, [pc, #340]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b72:	61d3      	str	r3, [r2, #28]
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_OscConfig+0x924>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x924>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_RCC_OscConfig+0x924>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fd9d 	bl	80006e4 <HAL_GetTick>
 8001baa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb0:	f7fe fd98 	bl	80006e4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e2ff      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x924>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ef      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x840>
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e02f      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a0>
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x864>
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a0>
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x888>
 8001c16:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a0>
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d06a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7fe fd47 	bl	80006e4 <HAL_GetTick>
 8001c56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe fd42 	bl	80006e4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e2a7      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001c74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c78:	2202      	movs	r2, #2
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ca8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x928>
 8001cbe:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <HAL_RCC_OscConfig+0x91c>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	e013      	b.n	8001cec <HAL_RCC_OscConfig+0x944>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	10908120 	.word	0x10908120
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4bc0      	ldr	r3, [pc, #768]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	6011      	str	r1, [r2, #0]
 8001cf4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fa92 f1a2 	rbit	r1, r2
 8001cfe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d02:	6011      	str	r1, [r2, #0]
  return result;
 8001d04:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d09a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x8b4>
 8001d26:	e063      	b.n	8001df0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fcdc 	bl	80006e4 <HAL_GetTick>
 8001d2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fcd7 	bl	80006e4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e23c      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001d4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x9f2>
 8001d94:	4b95      	ldr	r3, [pc, #596]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	e00d      	b.n	8001db6 <HAL_RCC_OscConfig+0xa0e>
 8001d9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d9e:	2202      	movs	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dba:	2102      	movs	r1, #2
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	fa92 f1a2 	rbit	r1, r2
 8001dc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dcc:	6011      	str	r1, [r2, #0]
  return result;
 8001dce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1a0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001df0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b7c      	ldr	r3, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4a7b      	ldr	r2, [pc, #492]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 81d9 	beq.w	80021c2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	f000 81a6 	beq.w	800216a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	f040 811e 	bne.w	8002066 <HAL_RCC_OscConfig+0xcbe>
 8001e2a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fc40 	bl	80006e4 <HAL_GetTick>
 8001e64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fc3b 	bl	80006e4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1a2      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001e7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xb10>
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e01b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb48>
 8001eb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	fa92 f1a2 	rbit	r1, r2
 8001f04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f08:	6011      	str	r1, [r2, #0]
  return result;
 8001f0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f002 021f 	and.w	r2, r2, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d19e      	bne.n	8001e6a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f023 020f 	bic.w	r2, r3, #15
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	492c      	ldr	r1, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a19      	ldr	r1, [r3, #32]
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	4925      	ldr	r1, [pc, #148]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f74:	601a      	str	r2, [r3, #0]
  return result;
 8001f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2301      	movs	r3, #1
 8001f90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fba7 	bl	80006e4 <HAL_GetTick>
 8001f96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9a:	e009      	b.n	8001fb0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fba2 	bl	80006e4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e109      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 8001fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fc8:	601a      	str	r2, [r3, #0]
  return result;
 8001fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xc48>
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <HAL_RCC_OscConfig+0xc44>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e01e      	b.n	8002028 <HAL_RCC_OscConfig+0xc80>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800200e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fa93 f2a3 	rbit	r2, r3
 800201e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0xe28>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800202c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002030:	6011      	str	r1, [r2, #0]
 8002032:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	fa92 f1a2 	rbit	r1, r2
 800203c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002040:	6011      	str	r1, [r2, #0]
  return result;
 8002042:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f002 021f 	and.w	r2, r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d09b      	beq.n	8001f9c <HAL_RCC_OscConfig+0xbf4>
 8002064:	e0ad      	b.n	80021c2 <HAL_RCC_OscConfig+0xe1a>
 8002066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	601a      	str	r2, [r3, #0]
  return result;
 8002080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002084:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	461a      	mov	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fb22 	bl	80006e4 <HAL_GetTick>
 80020a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fb1d 	bl	80006e4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e084      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
 80020ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d2:	601a      	str	r2, [r3, #0]
  return result;
 80020d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_RCC_OscConfig+0xd4c>
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_RCC_OscConfig+0xe28>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e01b      	b.n	800212c <HAL_RCC_OscConfig+0xd84>
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0xe28>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f107 0214 	add.w	r2, r7, #20
 8002130:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	f107 0214 	add.w	r2, r7, #20
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	fa92 f1a2 	rbit	r1, r2
 8002140:	f107 0210 	add.w	r2, r7, #16
 8002144:	6011      	str	r1, [r2, #0]
  return result;
 8002146:	f107 0210 	add.w	r2, r7, #16
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d19e      	bne.n	80020a6 <HAL_RCC_OscConfig+0xcfe>
 8002168:	e02b      	b.n	80021c2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e025      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0xe28>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_RCC_OscConfig+0xe28>)
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002188:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800218c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d111      	bne.n	80021be <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800219a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800219e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d108      	bne.n	80021be <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09e      	sub	sp, #120	; 0x78
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e162      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b90      	ldr	r3, [pc, #576]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d910      	bls.n	800221c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	498b      	ldr	r1, [pc, #556]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e14a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	497f      	ldr	r1, [pc, #508]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80dc 	beq.w	8002400 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d13c      	bne.n	80022ca <HAL_RCC_ClockConfig+0xf6>
 8002250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002254:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800225e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_RCC_ClockConfig+0xa6>
 8002274:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	e00f      	b.n	800229a <HAL_RCC_ClockConfig+0xc6>
 800227a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	667b      	str	r3, [r7, #100]	; 0x64
 8002288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
 800228e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800229e:	65ba      	str	r2, [r7, #88]	; 0x58
 80022a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022a2:	fa92 f2a2 	rbit	r2, r2
 80022a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0220 	orr.w	r2, r2, #32
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d17b      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0f3      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d13c      	bne.n	800234c <HAL_RCC_ClockConfig+0x178>
 80022d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_ClockConfig+0x128>
 80022f6:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e00f      	b.n	800231c <HAL_RCC_ClockConfig+0x148>
 80022fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
 800230a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230e:	643b      	str	r3, [r7, #64]	; 0x40
 8002310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002320:	63ba      	str	r2, [r7, #56]	; 0x38
 8002322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800232a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d13a      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0b2      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
 800234c:	2302      	movs	r3, #2
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_RCC_ClockConfig+0x1a0>
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e00d      	b.n	8002390 <HAL_RCC_ClockConfig+0x1bc>
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2202      	movs	r2, #2
 8002392:	61ba      	str	r2, [r7, #24]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	fa92 f2a2 	rbit	r2, r2
 800239a:	617a      	str	r2, [r7, #20]
  return result;
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e079      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	491a      	ldr	r1, [pc, #104]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe f988 	bl	80006e4 <HAL_GetTick>
 80023d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe f984 	bl	80006e4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e061      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d214      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4906      	ldr	r1, [pc, #24]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_ClockConfig+0x25c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e040      	b.n	80024b2 <HAL_RCC_ClockConfig+0x2de>
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_ClockConfig+0x2e8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	491a      	ldr	r1, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x2e8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x2e8>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4912      	ldr	r1, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x2e8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002476:	f000 f829 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800247a:	4601      	mov	r1, r0
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_ClockConfig+0x2e8>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	22f0      	movs	r2, #240	; 0xf0
 8002486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	60fa      	str	r2, [r7, #12]
  return result;
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	40d3      	lsrs	r3, r2
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x2ec>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	fa21 f303 	lsr.w	r3, r1, r3
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_RCC_ClockConfig+0x2f0>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCC_ClockConfig+0x2f4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f8d6 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3778      	adds	r7, #120	; 0x78
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08002a4c 	.word	0x08002a4c
 80024c4:	20000008 	.word	0x20000008
 80024c8:	2000000c 	.word	0x2000000c

080024cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b08b      	sub	sp, #44	; 0x2c
 80024d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x30>
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x36>
 80024fa:	e03f      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024fe:	623b      	str	r3, [r7, #32]
      break;
 8002500:	e03f      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002508:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800250c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	607a      	str	r2, [r7, #4]
  return result;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	40d3      	lsrs	r3, r2
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	220f      	movs	r2, #15
 8002530:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	60fa      	str	r2, [r7, #12]
  return result;
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	4a15      	ldr	r2, [pc, #84]	; (800259c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	fbb2 f2f3 	udiv	r2, r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	e007      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fbb2 f2f3 	udiv	r2, r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	623b      	str	r3, [r7, #32]
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc8>)
 800257e:	623b      	str	r3, [r7, #32]
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	6a3b      	ldr	r3, [r7, #32]
}
 8002584:	4618      	mov	r0, r3
 8002586:	372c      	adds	r7, #44	; 0x2c
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	007a1200 	.word	0x007a1200
 8002598:	08002a5c 	.word	0x08002a5c
 800259c:	08002a6c 	.word	0x08002a6c

080025a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b092      	sub	sp, #72	; 0x48
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80d4 	beq.w	800276c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c4:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10e      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025da:	61d3      	str	r3, [r2, #28]
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b45      	ldr	r3, [pc, #276]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a41      	ldr	r2, [pc, #260]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe f86d 	bl	80006e4 <HAL_GetTick>
 800260a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe f869 	bl	80006e4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1d6      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8084 	beq.w	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002648:	429a      	cmp	r2, r3
 800264a:	d07c      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	461a      	mov	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d04b      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe f819 	bl	80006e4 <HAL_GetTick>
 80026b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe f815 	bl	80006e4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e180      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	61fb      	str	r3, [r7, #28]
  return result;
 80026e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d108      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026fa:	4b01      	ldr	r3, [pc, #4]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	e00d      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	10908100 	.word	0x10908100
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2202      	movs	r2, #2
 800271e:	613a      	str	r2, [r7, #16]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	60fa      	str	r2, [r7, #12]
  return result;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f002 021f 	and.w	r2, r2, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0b7      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002746:	4b95      	ldr	r3, [pc, #596]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4992      	ldr	r1, [pc, #584]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002758:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4a8d      	ldr	r2, [pc, #564]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4985      	ldr	r1, [pc, #532]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002796:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	497e      	ldr	r1, [pc, #504]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4976      	ldr	r1, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d2:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f023 0210 	bic.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	496f      	ldr	r1, [pc, #444]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	4967      	ldr	r1, [pc, #412]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f023 0220 	bic.w	r2, r3, #32
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4960      	ldr	r1, [pc, #384]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800282c:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	4958      	ldr	r1, [pc, #352]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4951      	ldr	r1, [pc, #324]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4949      	ldr	r1, [pc, #292]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002886:	4b45      	ldr	r3, [pc, #276]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4942      	ldr	r1, [pc, #264]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	493a      	ldr	r1, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	4933      	ldr	r1, [pc, #204]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	492b      	ldr	r1, [pc, #172]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	491c      	ldr	r1, [pc, #112]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	4915      	ldr	r1, [pc, #84]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	490d      	ldr	r1, [pc, #52]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	4906      	ldr	r1, [pc, #24]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00c      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	e002      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	490b      	ldr	r1, [pc, #44]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c6:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3748      	adds	r7, #72	; 0x48
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <__libc_init_array>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	4d0d      	ldr	r5, [pc, #52]	; (8002a14 <__libc_init_array+0x38>)
 80029e0:	4c0d      	ldr	r4, [pc, #52]	; (8002a18 <__libc_init_array+0x3c>)
 80029e2:	1b64      	subs	r4, r4, r5
 80029e4:	10a4      	asrs	r4, r4, #2
 80029e6:	2600      	movs	r6, #0
 80029e8:	42a6      	cmp	r6, r4
 80029ea:	d109      	bne.n	8002a00 <__libc_init_array+0x24>
 80029ec:	4d0b      	ldr	r5, [pc, #44]	; (8002a1c <__libc_init_array+0x40>)
 80029ee:	4c0c      	ldr	r4, [pc, #48]	; (8002a20 <__libc_init_array+0x44>)
 80029f0:	f000 f820 	bl	8002a34 <_init>
 80029f4:	1b64      	subs	r4, r4, r5
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	2600      	movs	r6, #0
 80029fa:	42a6      	cmp	r6, r4
 80029fc:	d105      	bne.n	8002a0a <__libc_init_array+0x2e>
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a04:	4798      	blx	r3
 8002a06:	3601      	adds	r6, #1
 8002a08:	e7ee      	b.n	80029e8 <__libc_init_array+0xc>
 8002a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0e:	4798      	blx	r3
 8002a10:	3601      	adds	r6, #1
 8002a12:	e7f2      	b.n	80029fa <__libc_init_array+0x1e>
 8002a14:	08002a7c 	.word	0x08002a7c
 8002a18:	08002a7c 	.word	0x08002a7c
 8002a1c:	08002a7c 	.word	0x08002a7c
 8002a20:	08002a80 	.word	0x08002a80

08002a24 <memset>:
 8002a24:	4402      	add	r2, r0
 8002a26:	4603      	mov	r3, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <_init>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr

08002a40 <_fini>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr
