
014_spi_recive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002964  08002964  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002964  08002964  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002964  08002964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800296c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002978  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002978  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006807  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000121e  00000000  00000000  00026843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00027a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00028038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e81a  00000000  00000000  00028570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070d0  00000000  00000000  00046d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b929d  00000000  00000000  0004de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001070f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001658  00000000  00000000  0010714c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800291c 	.word	0x0800291c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800291c 	.word	0x0800291c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f9e8 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f810 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f88a 	bl	80002f8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001e4:	f000 f850 	bl	8000288 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SPI_Receive(&hspi2, (uint8_t*)data, sizeof(data),100);
 80001e8:	2364      	movs	r3, #100	; 0x64
 80001ea:	2207      	movs	r2, #7
 80001ec:	4902      	ldr	r1, [pc, #8]	; (80001f8 <main+0x24>)
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <main+0x28>)
 80001f0:	f001 fe71 	bl	8001ed6 <HAL_SPI_Receive>
 80001f4:	e7f8      	b.n	80001e8 <main+0x14>
 80001f6:	bf00      	nop
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	20000028 	.word	0x20000028

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fb7c 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fc9e 	bl	8000b88 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000252:	f000 f8b9 	bl	80003c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2102      	movs	r1, #2
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fb9f 	bl	80019b4 <HAL_RCC_ClockConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800027c:	f000 f8a4 	bl	80003c8 <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3740      	adds	r7, #64	; 0x40
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_SPI2_Init+0x68>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_SPI2_Init+0x6c>)
 8000290:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_SPI2_Init+0x68>)
 8000294:	2200      	movs	r2, #0
 8000296:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_SPI2_Init+0x68>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002cc:	2207      	movs	r2, #7
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002d8:	2200      	movs	r2, #0
 80002da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <MX_SPI2_Init+0x68>)
 80002de:	f001 fd4f 	bl	8001d80 <HAL_SPI_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80002e8:	f000 f86e 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40003800 	.word	0x40003800

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0314 	add.w	r3, r7, #20
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_GPIO_Init+0xc4>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a24      	ldr	r2, [pc, #144]	; (80003bc <MX_GPIO_Init+0xc4>)
 800032c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_GPIO_Init+0xc4>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a18      	ldr	r2, [pc, #96]	; (80003bc <MX_GPIO_Init+0xc4>)
 800035c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f000 fbef 	bl	8000b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_GPIO_Init+0xc8>)
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4619      	mov	r1, r3
 800038e:	480d      	ldr	r0, [pc, #52]	; (80003c4 <MX_GPIO_Init+0xcc>)
 8000390:	f000 fa58 	bl	8000844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000394:	2320      	movs	r3, #32
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	4619      	mov	r1, r3
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fa49 	bl	8000844 <HAL_GPIO_Init>

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	10210000 	.word	0x10210000
 80003c4:	48000800 	.word	0x48000800

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x44>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x44>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x44>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <HAL_MspInit+0x44>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <HAL_MspInit+0x44>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_MspInit+0x44>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800040a:	2007      	movs	r0, #7
 800040c:	f000 f9e6 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000

0800041c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a25      	ldr	r2, [pc, #148]	; (80004d0 <HAL_SPI_MspInit+0xb4>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d144      	bne.n	80004c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a24      	ldr	r2, [pc, #144]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a1e      	ldr	r2, [pc, #120]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 800045c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 8000474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <HAL_SPI_MspInit+0xb8>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
    PF1-OSC_OUT     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000486:	2302      	movs	r3, #2
 8000488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000496:	2305      	movs	r3, #5
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <HAL_SPI_MspInit+0xbc>)
 80004a2:	f000 f9cf 	bl	8000844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80004a6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004b8:	2305      	movs	r3, #5
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <HAL_SPI_MspInit+0xc0>)
 80004c4:	f000 f9be 	bl	8000844 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	; 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40003800 	.word	0x40003800
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48001400 	.word	0x48001400
 80004dc:	48000400 	.word	0x48000400

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 f884 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0b      	ldr	r4, [pc, #44]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000582:	f7ff ffd7 	bl	8000534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000586:	f002 f99d 	bl	80028c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe23 	bl	80001d4 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	0800296c 	.word	0x0800296c
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	20000098 	.word	0x20000098

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x28>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f90d 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f7ff ff04 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f917 	bl	800082a <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f8ed 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000008 	.word	0x20000008
 800065c:	20000094 	.word	0x20000094

08000660 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;  
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000094 	.word	0x20000094

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e160      	b.n	8000b16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8152 	beq.w	8000b10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d00b      	beq.n	800088c <HAL_GPIO_Init+0x48>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d007      	beq.n	800088c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000880:	2b11      	cmp	r3, #17
 8000882:	d003      	beq.n	800088c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b12      	cmp	r3, #18
 800088a:	d130      	bne.n	80008ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	2203      	movs	r2, #3
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c2:	2201      	movs	r2, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	091b      	lsrs	r3, r3, #4
 80008d8:	f003 0201 	and.w	r2, r3, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d003      	beq.n	800092e <HAL_GPIO_Init+0xea>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d123      	bne.n	8000976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	08da      	lsrs	r2, r3, #3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3208      	adds	r2, #8
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0203 	and.w	r2, r3, #3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 80ac 	beq.w	8000b10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <HAL_GPIO_Init+0x2f0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a5d      	ldr	r2, [pc, #372]	; (8000b34 <HAL_GPIO_Init+0x2f0>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <HAL_GPIO_Init+0x2f0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d0:	4a59      	ldr	r2, [pc, #356]	; (8000b38 <HAL_GPIO_Init+0x2f4>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009fa:	d025      	beq.n	8000a48 <HAL_GPIO_Init+0x204>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <HAL_GPIO_Init+0x2f8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d01f      	beq.n	8000a44 <HAL_GPIO_Init+0x200>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4e      	ldr	r2, [pc, #312]	; (8000b40 <HAL_GPIO_Init+0x2fc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d019      	beq.n	8000a40 <HAL_GPIO_Init+0x1fc>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a4d      	ldr	r2, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x300>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d013      	beq.n	8000a3c <HAL_GPIO_Init+0x1f8>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a4c      	ldr	r2, [pc, #304]	; (8000b48 <HAL_GPIO_Init+0x304>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x1f4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x308>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0x1f0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x30c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <HAL_GPIO_Init+0x1ec>
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	e00c      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a30:	2307      	movs	r3, #7
 8000a32:	e00a      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a34:	2305      	movs	r3, #5
 8000a36:	e008      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a5a:	4937      	ldr	r1, [pc, #220]	; (8000b38 <HAL_GPIO_Init+0x2f4>)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ab6:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f47f ae97 	bne.w	8000854 <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	48001000 	.word	0x48001000
 8000b4c:	48001400 	.word	0x48001400
 8000b50:	48001800 	.word	0x48001800
 8000b54:	40010400 	.word	0x40010400

08000b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
 8000b64:	4613      	mov	r3, r2
 8000b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b68:	787b      	ldrb	r3, [r7, #1]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b74:	e002      	b.n	8000b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f000 bf01 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8160 	beq.w	8000e72 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb2:	4bae      	ldr	r3, [pc, #696]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d00c      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbe:	4bab      	ldr	r3, [pc, #684]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d159      	bne.n	8000c7e <HAL_RCC_OscConfig+0xf6>
 8000bca:	4ba8      	ldr	r3, [pc, #672]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd6:	d152      	bne.n	8000c7e <HAL_RCC_OscConfig+0xf6>
 8000bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bdc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d102      	bne.n	8000c0a <HAL_RCC_OscConfig+0x82>
 8000c04:	4b99      	ldr	r3, [pc, #612]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	e015      	b.n	8000c36 <HAL_RCC_OscConfig+0xae>
 8000c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c16:	fa93 f3a3 	rbit	r3, r3
 8000c1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c32:	4b8e      	ldr	r3, [pc, #568]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c3a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c3e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c42:	fa92 f2a2 	rbit	r2, r2
 8000c46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	f042 0220 	orr.w	r2, r2, #32
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	f002 021f 	and.w	r2, r2, #31
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8102 	beq.w	8000e70 <HAL_RCC_OscConfig+0x2e8>
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 80fc 	bne.w	8000e70 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f000 be93 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x110>
 8000c8a:	4b78      	ldr	r3, [pc, #480]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a77      	ldr	r2, [pc, #476]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e030      	b.n	8000cfa <HAL_RCC_OscConfig+0x172>
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x134>
 8000ca2:	4b72      	ldr	r3, [pc, #456]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a71      	ldr	r2, [pc, #452]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b6f      	ldr	r3, [pc, #444]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6e      	ldr	r2, [pc, #440]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e01e      	b.n	8000cfa <HAL_RCC_OscConfig+0x172>
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x15a>
 8000cc8:	4b68      	ldr	r3, [pc, #416]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b65      	ldr	r3, [pc, #404]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a64      	ldr	r2, [pc, #400]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e00b      	b.n	8000cfa <HAL_RCC_OscConfig+0x172>
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a61      	ldr	r2, [pc, #388]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a5e      	ldr	r2, [pc, #376]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d059      	beq.n	8000db8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fcac 	bl	8000660 <HAL_GetTick>
 8000d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	e00a      	b.n	8000d24 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fca7 	bl	8000660 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d902      	bls.n	8000d24 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f000 be40 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d102      	bne.n	8000d56 <HAL_RCC_OscConfig+0x1ce>
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0x1fa>
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d8e:	fa92 f2a2 	rbit	r2, r2
 8000d92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	f042 0220 	orr.w	r2, r2, #32
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f002 021f 	and.w	r2, r2, #31
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0ab      	beq.n	8000d0e <HAL_RCC_OscConfig+0x186>
 8000db6:	e05c      	b.n	8000e72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc52 	bl	8000660 <HAL_GetTick>
 8000dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc0:	e00a      	b.n	8000dd8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fc4d 	bl	8000660 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d902      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f000 bde6 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d102      	bne.n	8000e0a <HAL_RCC_OscConfig+0x282>
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	e015      	b.n	8000e36 <HAL_RCC_OscConfig+0x2ae>
 8000e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_RCC_OscConfig+0x2e4>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e42:	fa92 f2a2 	rbit	r2, r2
 8000e46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000e4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	f042 0220 	orr.w	r2, r2, #32
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	f002 021f 	and.w	r2, r2, #31
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1ab      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x23a>
 8000e6a:	e002      	b.n	8000e72 <HAL_RCC_OscConfig+0x2ea>
 8000e6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 8170 	beq.w	8001162 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e82:	4bd0      	ldr	r3, [pc, #832]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00c      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e8e:	4bcd      	ldr	r3, [pc, #820]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d16d      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3ee>
 8000e9a:	4bca      	ldr	r3, [pc, #808]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea6:	d166      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3ee>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000eba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x350>
 8000ed2:	4bbc      	ldr	r3, [pc, #752]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	e013      	b.n	8000f00 <HAL_RCC_OscConfig+0x378>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ef0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000efc:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	2202      	movs	r2, #2
 8000f02:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f06:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f0a:	fa92 f2a2 	rbit	r2, r2
 8000f0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	f042 0220 	orr.w	r2, r2, #32
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_RCC_OscConfig+0x3ba>
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f000 bd31 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	21f8      	movs	r1, #248	; 0xf8
 8000f52:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f5a:	fa91 f1a1 	rbit	r1, r1
 8000f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f66:	fab1 f181 	clz	r1, r1
 8000f6a:	b2c9      	uxtb	r1, r1
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	4995      	ldr	r1, [pc, #596]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f74:	e0f5      	b.n	8001162 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8085 	beq.w	800108c <HAL_RCC_OscConfig+0x504>
 8000f82:	2301      	movs	r3, #1
 8000f84:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000f94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2301      	movs	r3, #1
 8000fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb57 	bl	8000660 <HAL_GetTick>
 8000fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb6:	e00a      	b.n	8000fce <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fb52 	bl	8000660 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d902      	bls.n	8000fce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f000 bceb 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000fe0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <HAL_RCC_OscConfig+0x476>
 8000ff8:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	e013      	b.n	8001026 <HAL_RCC_OscConfig+0x49e>
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001016:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001022:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	2202      	movs	r2, #2
 8001028:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800102c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001030:	fa92 f2a2 	rbit	r2, r2
 8001034:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001038:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800103c:	fab2 f282 	clz	r2, r2
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f042 0220 	orr.w	r2, r2, #32
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	f002 021f 	and.w	r2, r2, #31
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0af      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b5a      	ldr	r3, [pc, #360]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	21f8      	movs	r1, #248	; 0xf8
 8001068:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001070:	fa91 f1a1 	rbit	r1, r1
 8001074:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001078:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800107c:	fab1 f181 	clz	r1, r1
 8001080:	b2c9      	uxtb	r1, r1
 8001082:	408b      	lsls	r3, r1
 8001084:	494f      	ldr	r1, [pc, #316]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
 800108a:	e06a      	b.n	8001162 <HAL_RCC_OscConfig+0x5da>
 800108c:	2301      	movs	r3, #1
 800108e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800109e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fad2 	bl	8000660 <HAL_GetTick>
 80010bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff facd 	bl	8000660 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d902      	bls.n	80010d8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f000 bc66 	b.w	80019a4 <HAL_RCC_OscConfig+0xe1c>
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80010ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x580>
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e013      	b.n	8001130 <HAL_RCC_OscConfig+0x5a8>
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_RCC_OscConfig+0x63c>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2202      	movs	r2, #2
 8001132:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001136:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800113a:	fa92 f2a2 	rbit	r2, r2
 800113e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001146:	fab2 f282 	clz	r2, r2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	f042 0220 	orr.w	r2, r2, #32
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f002 021f 	and.w	r2, r2, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1af      	bne.n	80010c2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80da 	beq.w	8001326 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d069      	beq.n	8001250 <HAL_RCC_OscConfig+0x6c8>
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800118e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x640>)
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	2301      	movs	r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fa5b 	bl	8000660 <HAL_GetTick>
 80011aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	e00d      	b.n	80011cc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fa56 	bl	8000660 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d905      	bls.n	80011cc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e3ef      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	10908120 	.word	0x10908120
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d6:	fa93 f2a3 	rbit	r2, r3
 80011da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011e4:	2202      	movs	r2, #2
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fa93 f2a3 	rbit	r2, r3
 80011f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fa93 f2a3 	rbit	r2, r3
 800120a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800120e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001210:	4ba4      	ldr	r3, [pc, #656]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001214:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001218:	2102      	movs	r1, #2
 800121a:	6019      	str	r1, [r3, #0]
 800121c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	fa93 f1a3 	rbit	r1, r3
 8001226:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800122a:	6019      	str	r1, [r3, #0]
  return result;
 800122c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0b0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x628>
 800124e:	e06a      	b.n	8001326 <HAL_RCC_OscConfig+0x79e>
 8001250:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	fa93 f2a3 	rbit	r2, r3
 8001262:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001266:	601a      	str	r2, [r3, #0]
  return result;
 8001268:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800126c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126e:	fab3 f383 	clz	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <HAL_RCC_OscConfig+0x920>)
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	461a      	mov	r2, r3
 800127e:	2300      	movs	r3, #0
 8001280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff f9ed 	bl	8000660 <HAL_GetTick>
 8001286:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128a:	e009      	b.n	80012a0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff f9e8 	bl	8000660 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e381      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 80012a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	fa93 f2a3 	rbit	r2, r3
 80012b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012bc:	2202      	movs	r2, #2
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	fa93 f2a3 	rbit	r2, r3
 80012ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d4:	2202      	movs	r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fa93 f2a3 	rbit	r2, r3
 80012e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b6e      	ldr	r3, [pc, #440]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80012ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f0:	2102      	movs	r1, #2
 80012f2:	6019      	str	r1, [r3, #0]
 80012f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fa93 f1a3 	rbit	r1, r3
 80012fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001302:	6019      	str	r1, [r3, #0]
  return result;
 8001304:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1b2      	bne.n	800128c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8157 	beq.w	80015e4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133c:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d112      	bne.n	800136e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	61d3      	str	r3, [r2, #28]
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001368:	2301      	movs	r3, #1
 800136a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <HAL_RCC_OscConfig+0x924>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11a      	bne.n	80013b0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_RCC_OscConfig+0x924>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_RCC_OscConfig+0x924>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff f96b 	bl	8000660 <HAL_GetTick>
 800138a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	e009      	b.n	80013a4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001390:	f7ff f966 	bl	8000660 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2ff      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <HAL_RCC_OscConfig+0x924>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ef      	beq.n	8001390 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x840>
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a39      	ldr	r2, [pc, #228]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	e02f      	b.n	8001428 <HAL_RCC_OscConfig+0x8a0>
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x864>
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0x8a0>
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x888>
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x8a0>
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06a      	beq.n	8001508 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff f915 	bl	8000660 <HAL_GetTick>
 8001436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff f910 	bl	8000660 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	; 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e2a7      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 8001454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001470:	2202      	movs	r2, #2
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001482:	601a      	str	r2, [r3, #0]
  return result;
 8001484:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001488:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	095b      	lsrs	r3, r3, #5
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d108      	bne.n	80014b0 <HAL_RCC_OscConfig+0x928>
 800149e:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_OscConfig+0x91c>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x944>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	10908120 	.word	0x10908120
 80014ac:	40007000 	.word	0x40007000
 80014b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	4bc0      	ldr	r3, [pc, #768]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014d0:	2102      	movs	r1, #2
 80014d2:	6011      	str	r1, [r2, #0]
 80014d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	fa92 f1a2 	rbit	r1, r2
 80014de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014e2:	6011      	str	r1, [r2, #0]
  return result;
 80014e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	fab2 f282 	clz	r2, r2
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f002 021f 	and.w	r2, r2, #31
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d09a      	beq.n	800143c <HAL_RCC_OscConfig+0x8b4>
 8001506:	e063      	b.n	80015d0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff f8aa 	bl	8000660 <HAL_GetTick>
 800150c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff f8a5 	bl	8000660 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e23c      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 800152a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001546:	2202      	movs	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f2a3 	rbit	r2, r3
 8001554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001558:	601a      	str	r2, [r3, #0]
  return result;
 800155a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800155e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d102      	bne.n	800157a <HAL_RCC_OscConfig+0x9f2>
 8001574:	4b95      	ldr	r3, [pc, #596]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	e00d      	b.n	8001596 <HAL_RCC_OscConfig+0xa0e>
 800157a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4b8e      	ldr	r3, [pc, #568]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800159a:	2102      	movs	r1, #2
 800159c:	6011      	str	r1, [r2, #0]
 800159e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	fa92 f1a2 	rbit	r1, r2
 80015a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ac:	6011      	str	r1, [r2, #0]
  return result;
 80015ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	fab2 f282 	clz	r2, r2
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f002 021f 	and.w	r2, r2, #31
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1a0      	bne.n	8001512 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4a7b      	ldr	r2, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 81d9 	beq.w	80019a2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	f000 81a6 	beq.w	800194a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	f040 811e 	bne.w	8001846 <HAL_RCC_OscConfig+0xcbe>
 800160a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800160e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001622:	601a      	str	r2, [r3, #0]
  return result;
 8001624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001628:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	461a      	mov	r2, r3
 800163c:	2300      	movs	r3, #0
 800163e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff f80e 	bl	8000660 <HAL_GetTick>
 8001644:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001648:	e009      	b.n	800165e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f809 	bl	8000660 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1a2      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 800165e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001676:	601a      	str	r2, [r3, #0]
  return result;
 8001678:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800167c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0xb10>
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	e01b      	b.n	80016d0 <HAL_RCC_OscConfig+0xb48>
 8001698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800169c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fa93 f2a3 	rbit	r2, r3
 80016c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	fa92 f1a2 	rbit	r1, r2
 80016e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016e8:	6011      	str	r1, [r2, #0]
  return result;
 80016ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	fab2 f282 	clz	r2, r2
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f002 021f 	and.w	r2, r2, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d19e      	bne.n	800164a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f023 020f 	bic.w	r2, r3, #15
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 800171c:	4313      	orrs	r3, r2
 800171e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a19      	ldr	r1, [r3, #32]
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	430b      	orrs	r3, r1
 8001736:	4925      	ldr	r1, [pc, #148]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	461a      	mov	r2, r3
 800176e:	2301      	movs	r3, #1
 8001770:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7fe ff75 	bl	8000660 <HAL_GetTick>
 8001776:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177a:	e009      	b.n	8001790 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7fe ff70 	bl	8000660 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e109      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 8001790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017a8:	601a      	str	r2, [r3, #0]
  return result;
 80017aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0xc48>
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <HAL_RCC_OscConfig+0xc44>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_RCC_OscConfig+0xc80>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0xe28>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800180c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fa92 f1a2 	rbit	r1, r2
 800181c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001820:	6011      	str	r1, [r2, #0]
  return result;
 8001822:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d09b      	beq.n	800177c <HAL_RCC_OscConfig+0xbf4>
 8001844:	e0ad      	b.n	80019a2 <HAL_RCC_OscConfig+0xe1a>
 8001846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800184a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185e:	601a      	str	r2, [r3, #0]
  return result;
 8001860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7fe fef0 	bl	8000660 <HAL_GetTick>
 8001880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e009      	b.n	800189a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe feeb 	bl	8000660 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e084      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	601a      	str	r2, [r3, #0]
  return result;
 80018b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0xd4c>
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_RCC_OscConfig+0xe28>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e01b      	b.n	800190c <HAL_RCC_OscConfig+0xd84>
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_RCC_OscConfig+0xe28>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f107 0214 	add.w	r2, r7, #20
 8001910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	f107 0214 	add.w	r2, r7, #20
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fa92 f1a2 	rbit	r1, r2
 8001920:	f107 0210 	add.w	r2, r7, #16
 8001924:	6011      	str	r1, [r2, #0]
  return result;
 8001926:	f107 0210 	add.w	r2, r7, #16
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d19e      	bne.n	8001886 <HAL_RCC_OscConfig+0xcfe>
 8001948:	e02b      	b.n	80019a2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e025      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0xe28>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_RCC_OscConfig+0xe28>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001968:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800196c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	429a      	cmp	r2, r3
 8001978:	d111      	bne.n	800199e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800197a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800197e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001988:	429a      	cmp	r2, r3
 800198a:	d108      	bne.n	800199e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800198c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b09e      	sub	sp, #120	; 0x78
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e162      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d910      	bls.n	80019fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b8d      	ldr	r3, [pc, #564]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 0207 	bic.w	r2, r3, #7
 80019e2:	498b      	ldr	r1, [pc, #556]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e14a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	497f      	ldr	r1, [pc, #508]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80dc 	beq.w	8001be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d13c      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
 8001a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xa6>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e00f      	b.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	667b      	str	r3, [r7, #100]	; 0x64
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a82:	fa92 f2a2 	rbit	r2, r2
 8001a86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d17b      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0f3      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d13c      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x178>
 8001ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_ClockConfig+0x128>
 8001ad6:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_ClockConfig+0x148>
 8001adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40
 8001af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b04:	fa92 f2a2 	rbit	r2, r2
 8001b08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b0c:	fab2 f282 	clz	r2, r2
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f002 021f 	and.w	r2, r2, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d13a      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b2      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x1a0>
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e00d      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1bc>
 8001b54:	2302      	movs	r3, #2
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2202      	movs	r2, #2
 8001b72:	61ba      	str	r2, [r7, #24]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	fa92 f2a2 	rbit	r2, r2
 8001b7a:	617a      	str	r2, [r7, #20]
  return result;
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f002 021f 	and.w	r2, r2, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e079      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7fe fd56 	bl	8000660 <HAL_GetTick>
 8001bb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe fd52 	bl	8000660 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e061      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d214      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4906      	ldr	r1, [pc, #24]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_RCC_ClockConfig+0x25c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e040      	b.n	8001c92 <HAL_RCC_ClockConfig+0x2de>
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_ClockConfig+0x2e8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	491a      	ldr	r1, [pc, #104]	; (8001c9c <HAL_RCC_ClockConfig+0x2e8>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x2e8>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4912      	ldr	r1, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x2e8>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c56:	f000 f829 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCC_ClockConfig+0x2e8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	22f0      	movs	r2, #240	; 0xf0
 8001c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	fab2 f282 	clz	r2, r2
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	40d3      	lsrs	r3, r2
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fca4 	bl	80005d8 <HAL_InitTick>
  
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3778      	adds	r7, #120	; 0x78
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002934 	.word	0x08002934
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x30>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cda:	e03f      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cde:	623b      	str	r3, [r7, #32]
      break;
 8001ce0:	e03f      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ce8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001cec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	607a      	str	r2, [r7, #4]
  return result;
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	40d3      	lsrs	r3, r2
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	220f      	movs	r2, #15
 8001d10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	fa92 f2a2 	rbit	r2, r2
 8001d18:	60fa      	str	r2, [r7, #12]
  return result;
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	40d3      	lsrs	r3, r2
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d34:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e007      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	623b      	str	r3, [r7, #32]
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d5e:	623b      	str	r3, [r7, #32]
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6a3b      	ldr	r3, [r7, #32]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	372c      	adds	r7, #44	; 0x2c
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	007a1200 	.word	0x007a1200
 8001d78:	08002944 	.word	0x08002944
 8001d7c:	08002954 	.word	0x08002954

08001d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e09d      	b.n	8001ece <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da2:	d009      	beq.n	8001db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
 8001daa:	e005      	b.n	8001db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fb22 	bl	800041c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001df8:	d902      	bls.n	8001e00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e002      	b.n	8001e06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e0e:	d007      	beq.n	8001e20 <HAL_SPI_Init+0xa0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e18:	d002      	beq.n	8001e20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	ea42 0103 	orr.w	r1, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	f003 0204 	and.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b088      	sub	sp, #32
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef2:	d112      	bne.n	8001f1a <HAL_SPI_Receive+0x44>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10e      	bne.n	8001f1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2204      	movs	r2, #4
 8001f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f910 	bl	8002136 <HAL_SPI_TransmitReceive>
 8001f16:	4603      	mov	r3, r0
 8001f18:	e109      	b.n	800212e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_SPI_Receive+0x52>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e102      	b.n	800212e <HAL_SPI_Receive+0x258>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f30:	f7fe fb96 	bl	8000660 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f46:	e0e9      	b.n	800211c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Receive+0x7e>
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f58:	e0e0      	b.n	800211c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fa4:	d908      	bls.n	8001fb8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	e007      	b.n	8001fc8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fc6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d007      	beq.n	8002010 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002018:	d867      	bhi.n	80020ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800201a:	e030      	b.n	800207e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d117      	bne.n	800205a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f103 020c 	add.w	r2, r3, #12
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002058:	e011      	b.n	800207e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe fb01 	bl	8000660 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d803      	bhi.n	8002072 <HAL_SPI_Receive+0x19c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d102      	bne.n	8002078 <HAL_SPI_Receive+0x1a2>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800207c:	e04e      	b.n	800211c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1c8      	bne.n	800201c <HAL_SPI_Receive+0x146>
 800208a:	e034      	b.n	80020f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	b292      	uxth	r2, r2
 80020a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	1c9a      	adds	r2, r3, #2
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80020c4:	e011      	b.n	80020ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020c6:	f7fe facb 	bl	8000660 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d803      	bhi.n	80020de <HAL_SPI_Receive+0x208>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d102      	bne.n	80020e4 <HAL_SPI_Receive+0x20e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020e8:	e018      	b.n	800211c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ca      	bne.n	800208c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb44 	bl	8002788 <SPI_EndRxTransaction>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]
 8002118:	e000      	b.n	800211c <HAL_SPI_Receive+0x246>
  }

error :
 800211a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800212c:	7dfb      	ldrb	r3, [r7, #23]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b08a      	sub	sp, #40	; 0x28
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_SPI_TransmitReceive+0x26>
 8002158:	2302      	movs	r3, #2
 800215a:	e1fb      	b.n	8002554 <HAL_SPI_TransmitReceive+0x41e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002164:	f7fe fa7c 	bl	8000660 <HAL_GetTick>
 8002168:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002170:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002180:	7efb      	ldrb	r3, [r7, #27]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d00e      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x6e>
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800218c:	d106      	bne.n	800219c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_SPI_TransmitReceive+0x66>
 8002196:	7efb      	ldrb	r3, [r7, #27]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d003      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80021a2:	e1cd      	b.n	8002540 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x80>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x80>
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80021bc:	e1c0      	b.n	8002540 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d003      	beq.n	80021d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2205      	movs	r2, #5
 80021ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002214:	d802      	bhi.n	800221c <HAL_SPI_TransmitReceive+0xe6>
 8002216:	8a3b      	ldrh	r3, [r7, #16]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d908      	bls.n	800222e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	e007      	b.n	800223e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800223c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d007      	beq.n	800225c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002264:	d97c      	bls.n	8002360 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x13e>
 800226e:	8a7b      	ldrh	r3, [r7, #18]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d169      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002298:	e056      	b.n	8002348 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x1aa>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x1aa>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d113      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	1c9a      	adds	r2, r3, #2
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11c      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x1f2>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	b292      	uxth	r2, r2
 8002306:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002328:	f7fe f99a 	bl	8000660 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002334:	429a      	cmp	r2, r3
 8002336:	d807      	bhi.n	8002348 <HAL_SPI_TransmitReceive+0x212>
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d003      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002346:	e0fb      	b.n	8002540 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1a3      	bne.n	800229a <HAL_SPI_TransmitReceive+0x164>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d19d      	bne.n	800229a <HAL_SPI_TransmitReceive+0x164>
 800235e:	e0df      	b.n	8002520 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x23a>
 8002368:	8a7b      	ldrh	r3, [r7, #18]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 80cb 	bne.w	8002506 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d912      	bls.n	80023a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	1c9a      	adds	r2, r3, #2
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b02      	subs	r3, #2
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800239e:	e0b2      	b.n	8002506 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c6:	e09e      	b.n	8002506 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d134      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x30a>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02f      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x30a>
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d12c      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d912      	bls.n	8002416 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b02      	subs	r3, #2
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002414:	e012      	b.n	800243c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d148      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x3aa>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d042      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d923      	bls.n	80024ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	b292      	uxth	r2, r2
 8002472:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b02      	subs	r3, #2
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d81f      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	e016      	b.n	80024dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f103 020c 	add.w	r2, r3, #12
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024dc:	2301      	movs	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024e0:	f7fe f8be 	bl	8000660 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <HAL_SPI_TransmitReceive+0x3c2>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x3c8>
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002504:	e01c      	b.n	8002540 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f af5b 	bne.w	80023c8 <HAL_SPI_TransmitReceive+0x292>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f af54 	bne.w	80023c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f987 	bl	8002838 <SPI_EndRxTxTransaction>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	661a      	str	r2, [r3, #96]	; 0x60
 800253c:	e000      	b.n	8002540 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800253e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002554:	4618      	mov	r0, r3
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800256c:	f7fe f878 	bl	8000660 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800257c:	f7fe f870 	bl	8000660 <HAL_GetTick>
 8002580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	0d1b      	lsrs	r3, r3, #20
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002592:	e054      	b.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d050      	beq.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800259c:	f7fe f860 	bl	8000660 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d902      	bls.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13d      	bne.n	800262e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d111      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d4:	d004      	beq.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d107      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f8:	d10f      	bne.n	800261a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e017      	b.n	800265e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3b01      	subs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	429a      	cmp	r2, r3
 800265a:	d19b      	bne.n	8002594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000

0800266c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800267a:	f7fd fff1 	bl	8000660 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800268a:	f7fd ffe9 	bl	8000660 <HAL_GetTick>
 800268e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00da      	lsls	r2, r3, #3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	0d1b      	lsrs	r3, r3, #20
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80026a8:	e05f      	b.n	800276a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026b0:	d106      	bne.n	80026c0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d050      	beq.n	800276a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026c8:	f7fd ffca 	bl	8000660 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d902      	bls.n	80026de <SPI_WaitFifoStateUntilTimeout+0x72>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d13d      	bne.n	800275a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f6:	d111      	bne.n	800271c <SPI_WaitFifoStateUntilTimeout+0xb0>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002700:	d004      	beq.n	800270c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d107      	bne.n	800271c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	d10f      	bne.n	8002746 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e010      	b.n	800277c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3b01      	subs	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d197      	bne.n	80026aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000000 	.word	0x20000000

08002788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279c:	d111      	bne.n	80027c2 <SPI_EndRxTransaction+0x3a>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a6:	d004      	beq.n	80027b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d107      	bne.n	80027c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fec5 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e023      	b.n	8002830 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f0:	d11d      	bne.n	800282e <SPI_EndRxTransaction+0xa6>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fa:	d004      	beq.n	8002806 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d113      	bne.n	800282e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ff2a 	bl	800266c <SPI_WaitFifoStateUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e000      	b.n	8002830 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff0b 	bl	800266c <SPI_WaitFifoStateUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e027      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fe70 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e014      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fee4 	bl	800266c <SPI_WaitFifoStateUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e000      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <__libc_init_array>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	4d0d      	ldr	r5, [pc, #52]	; (80028fc <__libc_init_array+0x38>)
 80028c8:	4c0d      	ldr	r4, [pc, #52]	; (8002900 <__libc_init_array+0x3c>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	2600      	movs	r6, #0
 80028d0:	42a6      	cmp	r6, r4
 80028d2:	d109      	bne.n	80028e8 <__libc_init_array+0x24>
 80028d4:	4d0b      	ldr	r5, [pc, #44]	; (8002904 <__libc_init_array+0x40>)
 80028d6:	4c0c      	ldr	r4, [pc, #48]	; (8002908 <__libc_init_array+0x44>)
 80028d8:	f000 f820 	bl	800291c <_init>
 80028dc:	1b64      	subs	r4, r4, r5
 80028de:	10a4      	asrs	r4, r4, #2
 80028e0:	2600      	movs	r6, #0
 80028e2:	42a6      	cmp	r6, r4
 80028e4:	d105      	bne.n	80028f2 <__libc_init_array+0x2e>
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ec:	4798      	blx	r3
 80028ee:	3601      	adds	r6, #1
 80028f0:	e7ee      	b.n	80028d0 <__libc_init_array+0xc>
 80028f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f6:	4798      	blx	r3
 80028f8:	3601      	adds	r6, #1
 80028fa:	e7f2      	b.n	80028e2 <__libc_init_array+0x1e>
 80028fc:	08002964 	.word	0x08002964
 8002900:	08002964 	.word	0x08002964
 8002904:	08002964 	.word	0x08002964
 8002908:	08002968 	.word	0x08002968

0800290c <memset>:
 800290c:	4402      	add	r2, r0
 800290e:	4603      	mov	r3, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
