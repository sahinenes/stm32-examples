
002_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d9c  08001d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dcc  08001dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001dcc  08001dcc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dcc  08001dcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001de0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001de0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046a1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef9  00000000  00000000  000246dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  000255d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000368  00000000  00000000  000259c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2b4  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ffd  00000000  00000000  00043fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6dcc  00000000  00000000  00048fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffdad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd4  00000000  00000000  000ffe00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001d84 	.word	0x08001d84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001d84 	.word	0x08001d84

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f960 	bl	800049c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f803 	bl	80001e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f846 	bl	8000270 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x10>

080001e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b090      	sub	sp, #64	; 0x40
 80001ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	2228      	movs	r2, #40	; 0x28
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fdbd 	bl	8001d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000208:	2302      	movs	r3, #2
 800020a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000210:	2310      	movs	r3, #16
 8000212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000214:	2302      	movs	r3, #2
 8000216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fc81 	bl	8000b34 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000238:	f000 f898 	bl	800036c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000240:	2302      	movs	r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2102      	movs	r1, #2
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fb82 	bl	8001960 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000262:	f000 f883 	bl	800036c <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <MX_GPIO_Init+0xd4>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <MX_GPIO_Init+0xd4>)
 800028c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <MX_GPIO_Init+0xd4>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800029e:	4b29      	ldr	r3, [pc, #164]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a28      	ldr	r2, [pc, #160]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b26      	ldr	r3, [pc, #152]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b20      	ldr	r3, [pc, #128]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <MX_GPIO_Init+0xd4>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f000 fbd7 	bl	8000aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_GPIO_Init+0xd8>)
 80002fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <MX_GPIO_Init+0xdc>)
 8000308:	f000 fa40 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800030c:	2320      	movs	r3, #32
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	4619      	mov	r1, r3
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f000 fa31 	bl	800078c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2028      	movs	r0, #40	; 0x28
 8000330:	f000 f9f5 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000334:	2028      	movs	r0, #40	; 0x28
 8000336:	f000 fa0e 	bl	8000756 <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3728      	adds	r7, #40	; 0x28
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	10210000 	.word	0x10210000
 800034c:	48000800 	.word	0x48000800

08000350 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */


	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f000 fbb6 	bl	8000ad0 <HAL_GPIO_TogglePin>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <HAL_MspInit+0x44>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <HAL_MspInit+0x44>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <HAL_MspInit+0x44>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <HAL_MspInit+0x44>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a08      	ldr	r2, [pc, #32]	; (80003bc <HAL_MspInit+0x44>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_MspInit+0x44>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003ae:	2007      	movs	r0, #7
 80003b0:	f000 f9aa 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000

080003c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <NMI_Handler+0x4>

080003c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <HardFault_Handler+0x4>

080003cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <MemManage_Handler+0x4>

080003d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <BusFault_Handler+0x4>

080003d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <UsageFault_Handler+0x4>

080003de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040c:	f000 f88c 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000418:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800041c:	f000 fb72 	bl	8000b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */



  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SystemInit+0x20>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <SystemInit+0x20>)
 8000430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000480 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490e      	ldr	r1, [pc, #56]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0b      	ldr	r4, [pc, #44]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000472:	f7ff ffd7 	bl	8000424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000476:	f001 fc59 	bl	8001d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800047a:	f7ff feab 	bl	80001d4 <main>

0800047e <LoopForever>:

LoopForever:
    b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000480:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800048c:	08001dd4 	.word	0x08001dd4
  ldr r2, =_sbss
 8000490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000494:	2000002c 	.word	0x2000002c

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <HAL_Init+0x28>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <HAL_Init+0x28>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ac:	2003      	movs	r0, #3
 80004ae:	f000 f92b 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f808 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b8:	f7ff ff5e 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_InitTick+0x54>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_InitTick+0x58>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f943 	bl	8000772 <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f90b 	bl	800071e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_InitTick+0x5c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x20>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x24>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_IncTick+0x24>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000008 	.word	0x20000008
 800054c:	20000028 	.word	0x20000028

08000550 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;  
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GetTick+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <__NVIC_EnableIRQ+0x38>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d4:	d301      	bcc.n	80006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00f      	b.n	80006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <SysTick_Config+0x40>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e2:	210f      	movs	r1, #15
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f7ff ff8e 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SysTick_Config+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Config+0x40>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff29 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000730:	f7ff ff3e 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 8000734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	6978      	ldr	r0, [r7, #20]
 800073c:	f7ff ff8e 	bl	800065c <NVIC_EncodePriority>
 8000740:	4602      	mov	r2, r0
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff5d 	bl	8000608 <__NVIC_SetPriority>
}
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff31 	bl	80005cc <__NVIC_EnableIRQ>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ffa2 	bl	80006c4 <SysTick_Config>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800078c:	b480      	push	{r7}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079a:	e160      	b.n	8000a5e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 8152 	beq.w	8000a58 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d00b      	beq.n	80007d4 <HAL_GPIO_Init+0x48>
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d007      	beq.n	80007d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c8:	2b11      	cmp	r3, #17
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b12      	cmp	r3, #18
 80007d2:	d130      	bne.n	8000836 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800080a:	2201      	movs	r2, #1
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4013      	ands	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	f003 0201 	and.w	r2, r3, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2203      	movs	r2, #3
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d003      	beq.n	8000876 <HAL_GPIO_Init+0xea>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b12      	cmp	r3, #18
 8000874:	d123      	bne.n	80008be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	08da      	lsrs	r2, r3, #3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3208      	adds	r2, #8
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	691a      	ldr	r2, [r3, #16]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	6939      	ldr	r1, [r7, #16]
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0203 	and.w	r2, r3, #3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 80ac 	beq.w	8000a58 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <HAL_GPIO_Init+0x2f0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a5d      	ldr	r2, [pc, #372]	; (8000a7c <HAL_GPIO_Init+0x2f0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b5b      	ldr	r3, [pc, #364]	; (8000a7c <HAL_GPIO_Init+0x2f0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000918:	4a59      	ldr	r2, [pc, #356]	; (8000a80 <HAL_GPIO_Init+0x2f4>)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	220f      	movs	r2, #15
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000942:	d025      	beq.n	8000990 <HAL_GPIO_Init+0x204>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <HAL_GPIO_Init+0x2f8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d01f      	beq.n	800098c <HAL_GPIO_Init+0x200>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a4e      	ldr	r2, [pc, #312]	; (8000a88 <HAL_GPIO_Init+0x2fc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d019      	beq.n	8000988 <HAL_GPIO_Init+0x1fc>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <HAL_GPIO_Init+0x300>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d013      	beq.n	8000984 <HAL_GPIO_Init+0x1f8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4c      	ldr	r2, [pc, #304]	; (8000a90 <HAL_GPIO_Init+0x304>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d00d      	beq.n	8000980 <HAL_GPIO_Init+0x1f4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a4b      	ldr	r2, [pc, #300]	; (8000a94 <HAL_GPIO_Init+0x308>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d007      	beq.n	800097c <HAL_GPIO_Init+0x1f0>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <HAL_GPIO_Init+0x30c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d101      	bne.n	8000978 <HAL_GPIO_Init+0x1ec>
 8000974:	2306      	movs	r3, #6
 8000976:	e00c      	b.n	8000992 <HAL_GPIO_Init+0x206>
 8000978:	2307      	movs	r3, #7
 800097a:	e00a      	b.n	8000992 <HAL_GPIO_Init+0x206>
 800097c:	2305      	movs	r3, #5
 800097e:	e008      	b.n	8000992 <HAL_GPIO_Init+0x206>
 8000980:	2304      	movs	r3, #4
 8000982:	e006      	b.n	8000992 <HAL_GPIO_Init+0x206>
 8000984:	2303      	movs	r3, #3
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x206>
 8000988:	2302      	movs	r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x206>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x206>
 8000990:	2300      	movs	r3, #0
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a2:	4937      	ldr	r1, [pc, #220]	; (8000a80 <HAL_GPIO_Init+0x2f4>)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <HAL_GPIO_Init+0x310>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009d4:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <HAL_GPIO_Init+0x310>)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_GPIO_Init+0x310>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009fe:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a28:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa22 f303 	lsr.w	r3, r2, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f47f ae97 	bne.w	800079c <HAL_GPIO_Init+0x10>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	48000c00 	.word	0x48000c00
 8000a90:	48001000 	.word	0x48001000
 8000a94:	48001400 	.word	0x48001400
 8000a98:	48001800 	.word	0x48001800
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab0:	787b      	ldrb	r3, [r7, #1]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000abe:	887a      	ldrh	r2, [r7, #2]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43d9      	mvns	r1, r3
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	400b      	ands	r3, r1
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	619a      	str	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc14 	bl	8000350 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f000 bf01 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 8160 	beq.w	8000e1e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b5e:	4bae      	ldr	r3, [pc, #696]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d00c      	beq.n	8000b84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6a:	4bab      	ldr	r3, [pc, #684]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d159      	bne.n	8000c2a <HAL_RCC_OscConfig+0xf6>
 8000b76:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b82:	d152      	bne.n	8000c2a <HAL_RCC_OscConfig+0xf6>
 8000b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b90:	fa93 f3a3 	rbit	r3, r3
 8000b94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	fab3 f383 	clz	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d102      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x82>
 8000bb0:	4b99      	ldr	r3, [pc, #612]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	e015      	b.n	8000be2 <HAL_RCC_OscConfig+0xae>
 8000bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000bc2:	fa93 f3a3 	rbit	r3, r3
 8000bc6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bd2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bde:	4b8e      	ldr	r3, [pc, #568]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000bea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000bee:	fa92 f2a2 	rbit	r2, r2
 8000bf2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000bf6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	f042 0220 	orr.w	r2, r2, #32
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	f002 021f 	and.w	r2, r2, #31
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8102 	beq.w	8000e1c <HAL_RCC_OscConfig+0x2e8>
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 80fc 	bne.w	8000e1c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f000 be93 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x110>
 8000c36:	4b78      	ldr	r3, [pc, #480]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a77      	ldr	r2, [pc, #476]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e030      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x134>
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a71      	ldr	r2, [pc, #452]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6e      	ldr	r2, [pc, #440]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e01e      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0x15a>
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a67      	ldr	r2, [pc, #412]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a64      	ldr	r2, [pc, #400]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e00b      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c8e:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a61      	ldr	r2, [pc, #388]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5e      	ldr	r2, [pc, #376]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d059      	beq.n	8000d64 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fc4e 	bl	8000550 <HAL_GetTick>
 8000cb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb8:	e00a      	b.n	8000cd0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cba:	f7ff fc49 	bl	8000550 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d902      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f000 be40 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
 8000cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ce4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d102      	bne.n	8000d02 <HAL_RCC_OscConfig+0x1ce>
 8000cfc:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x1fa>
 8000d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d32:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d36:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000d42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	f002 021f 	and.w	r2, r2, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0ab      	beq.n	8000cba <HAL_RCC_OscConfig+0x186>
 8000d62:	e05c      	b.n	8000e1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fbf4 	bl	8000550 <HAL_GetTick>
 8000d68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6c:	e00a      	b.n	8000d84 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fbef 	bl	8000550 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d902      	bls.n	8000d84 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f000 bde6 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000d98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x282>
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	e015      	b.n	8000de2 <HAL_RCC_OscConfig+0x2ae>
 8000db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dd2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_RCC_OscConfig+0x2e4>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000dea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000dee:	fa92 f2a2 	rbit	r2, r2
 8000df2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000df6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	f042 0220 	orr.w	r2, r2, #32
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f002 021f 	and.w	r2, r2, #31
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1ab      	bne.n	8000d6e <HAL_RCC_OscConfig+0x23a>
 8000e16:	e002      	b.n	8000e1e <HAL_RCC_OscConfig+0x2ea>
 8000e18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 8170 	beq.w	800110e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e2e:	4bd0      	ldr	r3, [pc, #832]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00c      	beq.n	8000e54 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e3a:	4bcd      	ldr	r3, [pc, #820]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d16d      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3ee>
 8000e46:	4bca      	ldr	r3, [pc, #808]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e52:	d166      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3ee>
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000e66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	095b      	lsrs	r3, r3, #5
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <HAL_RCC_OscConfig+0x350>
 8000e7e:	4bbc      	ldr	r3, [pc, #752]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	e013      	b.n	8000eac <HAL_RCC_OscConfig+0x378>
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ea8:	4bb1      	ldr	r3, [pc, #708]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	2202      	movs	r2, #2
 8000eae:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000eb2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000eb6:	fa92 f2a2 	rbit	r2, r2
 8000eba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000ebe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ec2:	fab2 f282 	clz	r2, r2
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f042 0220 	orr.w	r2, r2, #32
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	f002 021f 	and.w	r2, r2, #31
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <HAL_RCC_OscConfig+0x3ba>
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d002      	beq.n	8000eee <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f000 bd31 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	4ba0      	ldr	r3, [pc, #640]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	21f8      	movs	r1, #248	; 0xf8
 8000efe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f06:	fa91 f1a1 	rbit	r1, r1
 8000f0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f12:	fab1 f181 	clz	r1, r1
 8000f16:	b2c9      	uxtb	r1, r1
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	4995      	ldr	r1, [pc, #596]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f20:	e0f5      	b.n	800110e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 8085 	beq.w	8001038 <HAL_RCC_OscConfig+0x504>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000f40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	461a      	mov	r2, r3
 8000f56:	2301      	movs	r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff faf9 	bl	8000550 <HAL_GetTick>
 8000f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	e00a      	b.n	8000f7a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff faf4 	bl	8000550 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d902      	bls.n	8000f7a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f000 bceb 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000f8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_OscConfig+0x476>
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e013      	b.n	8000fd2 <HAL_RCC_OscConfig+0x49e>
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fc2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fce:	4b68      	ldr	r3, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000fd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000fe4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fe8:	fab2 f282 	clz	r2, r2
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	f042 0220 	orr.w	r2, r2, #32
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f002 021f 	and.w	r2, r2, #31
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0af      	beq.n	8000f64 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b5a      	ldr	r3, [pc, #360]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	21f8      	movs	r1, #248	; 0xf8
 8001014:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800101c:	fa91 f1a1 	rbit	r1, r1
 8001020:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001024:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001028:	fab1 f181 	clz	r1, r1
 800102c:	b2c9      	uxtb	r1, r1
 800102e:	408b      	lsls	r3, r1
 8001030:	494f      	ldr	r1, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
 8001036:	e06a      	b.n	800110e <HAL_RCC_OscConfig+0x5da>
 8001038:	2301      	movs	r3, #1
 800103a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800104a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	461a      	mov	r2, r3
 8001060:	2300      	movs	r3, #0
 8001062:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fa74 	bl	8000550 <HAL_GetTick>
 8001068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fa6f 	bl	8000550 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d902      	bls.n	8001084 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	f000 bc66 	b.w	8001950 <HAL_RCC_OscConfig+0xe1c>
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001096:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x580>
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	e013      	b.n	80010dc <HAL_RCC_OscConfig+0x5a8>
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_RCC_OscConfig+0x63c>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	2202      	movs	r2, #2
 80010de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80010e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010e6:	fa92 f2a2 	rbit	r2, r2
 80010ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80010ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010f2:	fab2 f282 	clz	r2, r2
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f042 0220 	orr.w	r2, r2, #32
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1af      	bne.n	800106e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80da 	beq.w	80012d2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d069      	beq.n	80011fc <HAL_RCC_OscConfig+0x6c8>
 8001128:	2301      	movs	r3, #1
 800112a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800113a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_RCC_OscConfig+0x640>)
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	461a      	mov	r2, r3
 800114e:	2301      	movs	r3, #1
 8001150:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff f9fd 	bl	8000550 <HAL_GetTick>
 8001156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	e00d      	b.n	8001178 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff f9f8 	bl	8000550 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d905      	bls.n	8001178 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e3ef      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 8001170:	40021000 	.word	0x40021000
 8001174:	10908120 	.word	0x10908120
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	fa93 f2a3 	rbit	r2, r3
 800119e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011a8:	2202      	movs	r2, #2
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	fa93 f2a3 	rbit	r2, r3
 80011b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011bc:	4ba4      	ldr	r3, [pc, #656]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80011be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011c4:	2102      	movs	r1, #2
 80011c6:	6019      	str	r1, [r3, #0]
 80011c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	fa93 f1a3 	rbit	r1, r3
 80011d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011d6:	6019      	str	r1, [r3, #0]
  return result;
 80011d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0b0      	beq.n	800115c <HAL_RCC_OscConfig+0x628>
 80011fa:	e06a      	b.n	80012d2 <HAL_RCC_OscConfig+0x79e>
 80011fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	fa93 f2a3 	rbit	r2, r3
 800120e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001212:	601a      	str	r2, [r3, #0]
  return result;
 8001214:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001218:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <HAL_RCC_OscConfig+0x920>)
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	461a      	mov	r2, r3
 800122a:	2300      	movs	r3, #0
 800122c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff f98f 	bl	8000550 <HAL_GetTick>
 8001232:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e009      	b.n	800124c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff f98a 	bl	8000550 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e381      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 800124c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fa93 f2a3 	rbit	r2, r3
 8001276:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	fa93 f2a3 	rbit	r2, r3
 800128e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001292:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800129c:	2102      	movs	r1, #2
 800129e:	6019      	str	r1, [r3, #0]
 80012a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fa93 f1a3 	rbit	r1, r3
 80012aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ae:	6019      	str	r1, [r3, #0]
  return result;
 80012b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1b2      	bne.n	8001238 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8157 	beq.w	8001590 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d112      	bne.n	800131a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a55      	ldr	r2, [pc, #340]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	61d3      	str	r3, [r2, #28]
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001314:	2301      	movs	r3, #1
 8001316:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <HAL_RCC_OscConfig+0x924>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d11a      	bne.n	800135c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x924>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_RCC_OscConfig+0x924>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff f90d 	bl	8000550 <HAL_GetTick>
 8001336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	e009      	b.n	8001350 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133c:	f7ff f908 	bl	8000550 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e2ff      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_OscConfig+0x924>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ef      	beq.n	800133c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x840>
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a39      	ldr	r2, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	e02f      	b.n	80013d4 <HAL_RCC_OscConfig+0x8a0>
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x864>
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a30      	ldr	r2, [pc, #192]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	e01d      	b.n	80013d4 <HAL_RCC_OscConfig+0x8a0>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x888>
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x8a0>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d06a      	beq.n	80014b4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff f8b7 	bl	8000550 <HAL_GetTick>
 80013e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff f8b2 	bl	8000550 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e2a7      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 8001400:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800141c:	2202      	movs	r2, #2
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f2a3 	rbit	r2, r3
 800142a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800142e:	601a      	str	r2, [r3, #0]
  return result;
 8001430:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001434:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x928>
 800144a:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_RCC_OscConfig+0x91c>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	e013      	b.n	8001478 <HAL_RCC_OscConfig+0x944>
 8001450:	40021000 	.word	0x40021000
 8001454:	10908120 	.word	0x10908120
 8001458:	40007000 	.word	0x40007000
 800145c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4bc0      	ldr	r3, [pc, #768]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800147c:	2102      	movs	r1, #2
 800147e:	6011      	str	r1, [r2, #0]
 8001480:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	fa92 f1a2 	rbit	r1, r2
 800148a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800148e:	6011      	str	r1, [r2, #0]
  return result;
 8001490:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d09a      	beq.n	80013e8 <HAL_RCC_OscConfig+0x8b4>
 80014b2:	e063      	b.n	800157c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff f84c 	bl	8000550 <HAL_GetTick>
 80014b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	e00b      	b.n	80014d6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff f847 	bl	8000550 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e23c      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 80014d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001504:	601a      	str	r2, [r3, #0]
  return result;
 8001506:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800150a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0x9f2>
 8001520:	4b95      	ldr	r3, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	e00d      	b.n	8001542 <HAL_RCC_OscConfig+0xa0e>
 8001526:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001546:	2102      	movs	r1, #2
 8001548:	6011      	str	r1, [r2, #0]
 800154a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	fa92 f1a2 	rbit	r1, r2
 8001554:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001558:	6011      	str	r1, [r2, #0]
  return result;
 800155a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	fab2 f282 	clz	r2, r2
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	f002 021f 	and.w	r2, r2, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1a0      	bne.n	80014be <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800157c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 81d9 	beq.w	800194e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	f000 81a6 	beq.w	80018f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	f040 811e 	bne.w	80017f2 <HAL_RCC_OscConfig+0xcbe>
 80015b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f2a3 	rbit	r2, r3
 80015ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ce:	601a      	str	r2, [r3, #0]
  return result;
 80015d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7fe ffb0 	bl	8000550 <HAL_GetTick>
 80015f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	e009      	b.n	800160a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7fe ffab 	bl	8000550 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1a2      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 800160a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800160e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001622:	601a      	str	r2, [r3, #0]
  return result;
 8001624:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001628:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0xb10>
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	e01b      	b.n	800167c <HAL_RCC_OscConfig+0xb48>
 8001644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001680:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001684:	6011      	str	r1, [r2, #0]
 8001686:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fa92 f1a2 	rbit	r1, r2
 8001690:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001694:	6011      	str	r1, [r2, #0]
  return result;
 8001696:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d19e      	bne.n	80015f6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	f023 020f 	bic.w	r2, r3, #15
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	492c      	ldr	r1, [pc, #176]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a19      	ldr	r1, [r3, #32]
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001700:	601a      	str	r2, [r3, #0]
  return result;
 8001702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001706:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	2301      	movs	r3, #1
 800171c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7fe ff17 	bl	8000550 <HAL_GetTick>
 8001722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	e009      	b.n	800173c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7fe ff12 	bl	8000550 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e109      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 800173c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800175a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0xc48>
 8001770:	4b01      	ldr	r3, [pc, #4]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e01e      	b.n	80017b4 <HAL_RCC_OscConfig+0xc80>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800179a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0xe28>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017bc:	6011      	str	r1, [r2, #0]
 80017be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fa92 f1a2 	rbit	r1, r2
 80017c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017cc:	6011      	str	r1, [r2, #0]
  return result;
 80017ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d09b      	beq.n	8001728 <HAL_RCC_OscConfig+0xbf4>
 80017f0:	e0ad      	b.n	800194e <HAL_RCC_OscConfig+0xe1a>
 80017f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001810:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	461a      	mov	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe fe92 	bl	8000550 <HAL_GetTick>
 800182c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e009      	b.n	8001846 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe fe8d 	bl	8000550 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e084      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185e:	601a      	str	r2, [r3, #0]
  return result;
 8001860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001864:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0xd4c>
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0xe28>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0xd84>
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0xe28>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f107 0214 	add.w	r2, r7, #20
 80018bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	f107 0214 	add.w	r2, r7, #20
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fa92 f1a2 	rbit	r1, r2
 80018cc:	f107 0210 	add.w	r2, r7, #16
 80018d0:	6011      	str	r1, [r2, #0]
  return result;
 80018d2:	f107 0210 	add.w	r2, r7, #16
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d19e      	bne.n	8001832 <HAL_RCC_OscConfig+0xcfe>
 80018f4:	e02b      	b.n	800194e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e025      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0xe28>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_OscConfig+0xe28>)
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001914:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001918:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	429a      	cmp	r2, r3
 8001924:	d111      	bne.n	800194a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001926:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800192a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001934:	429a      	cmp	r2, r3
 8001936:	d108      	bne.n	800194a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193c:	f003 020f 	and.w	r2, r3, #15
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09e      	sub	sp, #120	; 0x78
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e162      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b90      	ldr	r3, [pc, #576]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b8d      	ldr	r3, [pc, #564]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	498b      	ldr	r1, [pc, #556]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e14a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	497f      	ldr	r1, [pc, #508]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80dc 	beq.w	8001b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d13c      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xf6>
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xa6>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e00f      	b.n	8001a26 <HAL_RCC_ClockConfig+0xc6>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
 8001a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a2e:	fa92 f2a2 	rbit	r2, r2
 8001a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d17b      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0f3      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d13c      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x178>
 8001a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x128>
 8001a82:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e00f      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
 8001a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab0:	fa92 f2a2 	rbit	r2, r2
 8001ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab8:	fab2 f282 	clz	r2, r2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f002 021f 	and.w	r2, r2, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13a      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b2      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e00d      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1bc>
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	61ba      	str	r2, [r7, #24]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	617a      	str	r2, [r7, #20]
  return result;
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f002 021f 	and.w	r2, r2, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e079      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	491a      	ldr	r1, [pc, #104]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fcf8 	bl	8000550 <HAL_GetTick>
 8001b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7fe fcf4 	bl	8000550 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e061      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d214      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4906      	ldr	r1, [pc, #24]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e040      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	491a      	ldr	r1, [pc, #104]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4912      	ldr	r1, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c02:	f000 f829 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c06:	4601      	mov	r1, r0
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	22f0      	movs	r2, #240	; 0xf0
 8001c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	fa92 f2a2 	rbit	r2, r2
 8001c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	fab2 f282 	clz	r2, r2
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	40d3      	lsrs	r3, r2
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_RCC_ClockConfig+0x2f0>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_ClockConfig+0x2f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc46 	bl	80004c8 <HAL_InitTick>
  
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3778      	adds	r7, #120	; 0x78
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08001d9c 	.word	0x08001d9c
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x30>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
 8001c86:	e03f      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	e03f      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	607a      	str	r2, [r7, #4]
  return result;
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	40d3      	lsrs	r3, r2
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	220f      	movs	r2, #15
 8001cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	40d3      	lsrs	r3, r2
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	e007      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	623b      	str	r3, [r7, #32]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d0a:	623b      	str	r3, [r7, #32]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	372c      	adds	r7, #44	; 0x2c
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	08001dac 	.word	0x08001dac
 8001d28:	08001dbc 	.word	0x08001dbc

08001d2c <__libc_init_array>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	4d0d      	ldr	r5, [pc, #52]	; (8001d64 <__libc_init_array+0x38>)
 8001d30:	4c0d      	ldr	r4, [pc, #52]	; (8001d68 <__libc_init_array+0x3c>)
 8001d32:	1b64      	subs	r4, r4, r5
 8001d34:	10a4      	asrs	r4, r4, #2
 8001d36:	2600      	movs	r6, #0
 8001d38:	42a6      	cmp	r6, r4
 8001d3a:	d109      	bne.n	8001d50 <__libc_init_array+0x24>
 8001d3c:	4d0b      	ldr	r5, [pc, #44]	; (8001d6c <__libc_init_array+0x40>)
 8001d3e:	4c0c      	ldr	r4, [pc, #48]	; (8001d70 <__libc_init_array+0x44>)
 8001d40:	f000 f820 	bl	8001d84 <_init>
 8001d44:	1b64      	subs	r4, r4, r5
 8001d46:	10a4      	asrs	r4, r4, #2
 8001d48:	2600      	movs	r6, #0
 8001d4a:	42a6      	cmp	r6, r4
 8001d4c:	d105      	bne.n	8001d5a <__libc_init_array+0x2e>
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d54:	4798      	blx	r3
 8001d56:	3601      	adds	r6, #1
 8001d58:	e7ee      	b.n	8001d38 <__libc_init_array+0xc>
 8001d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5e:	4798      	blx	r3
 8001d60:	3601      	adds	r6, #1
 8001d62:	e7f2      	b.n	8001d4a <__libc_init_array+0x1e>
 8001d64:	08001dcc 	.word	0x08001dcc
 8001d68:	08001dcc 	.word	0x08001dcc
 8001d6c:	08001dcc 	.word	0x08001dcc
 8001d70:	08001dd0 	.word	0x08001dd0

08001d74 <memset>:
 8001d74:	4402      	add	r2, r0
 8001d76:	4603      	mov	r3, r0
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <memset+0xa>
 8001d7c:	4770      	bx	lr
 8001d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d82:	e7f9      	b.n	8001d78 <memset+0x4>

08001d84 <_init>:
 8001d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d86:	bf00      	nop
 8001d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8a:	bc08      	pop	{r3}
 8001d8c:	469e      	mov	lr, r3
 8001d8e:	4770      	bx	lr

08001d90 <_fini>:
 8001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d92:	bf00      	nop
 8001d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d96:	bc08      	pop	{r3}
 8001d98:	469e      	mov	lr, r3
 8001d9a:	4770      	bx	lr
