
013_spi_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b0  080025b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080025b0  080025b0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b0  080025b0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080025b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  080025cc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080025cc  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000682d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000122f  00000000  00000000  00026871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00027aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00028078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e81a  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000710a  00000000  00000000  00046dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b92a9  00000000  00000000  0004dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001680  00000000  00000000  001071d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002568 	.word	0x08002568

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08002568 	.word	0x08002568

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa16 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f822 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8a2 	bl	8000328 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001e4:	f000 f862 	bl	80002ac <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ee:	480a      	ldr	r0, [pc, #40]	; (8000218 <main+0x44>)
 80001f0:	f000 fd04 	bl	8000bfc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&hspi2,(uint8_t*)data,sizeof(data), 1000);  // write data to register
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	2207      	movs	r2, #7
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <main+0x48>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x4c>)
 80001fe:	f001 febc 	bl	8001f7a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <main+0x44>)
 800020a:	f000 fcf7 	bl	8000bfc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 fa60 	bl	80006d4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8000214:	e7e8      	b.n	80001e8 <main+0x14>
 8000216:	bf00      	nop
 8000218:	48000400 	.word	0x48000400
 800021c:	20000000 	.word	0x20000000
 8000220:	20000030 	.word	0x20000030

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 f990 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fcde 	bl	8000c2c <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000276:	f000 f8d5 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2102      	movs	r1, #2
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fbdf 	bl	8001a58 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002a0:	f000 f8c0 	bl	8000424 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3740      	adds	r7, #64	; 0x40
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_SPI2_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_SPI2_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_SPI2_Init+0x74>)
 80002b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_SPI2_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_SPI2_Init+0x74>)
 80002c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_SPI2_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <MX_SPI2_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_SPI2_Init+0x74>)
 80002da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_SPI2_Init+0x74>)
 80002e2:	2238      	movs	r2, #56	; 0x38
 80002e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_SPI2_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_SPI2_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_SPI2_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_SPI2_Init+0x74>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_SPI2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_SPI2_Init+0x74>)
 8000306:	2208      	movs	r2, #8
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_SPI2_Init+0x74>)
 800030c:	f001 fd8a 	bl	8001e24 <HAL_SPI_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000316:	f000 f885 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000030 	.word	0x20000030
 8000324:	40003800 	.word	0x40003800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <MX_GPIO_Init+0xec>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a34      	ldr	r2, [pc, #208]	; (8000414 <MX_GPIO_Init+0xec>)
 8000344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b32      	ldr	r3, [pc, #200]	; (8000414 <MX_GPIO_Init+0xec>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <MX_GPIO_Init+0xec>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <MX_GPIO_Init+0xec>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_GPIO_Init+0xec>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_GPIO_Init+0xec>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a28      	ldr	r2, [pc, #160]	; (8000414 <MX_GPIO_Init+0xec>)
 8000374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_GPIO_Init+0xec>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_GPIO_Init+0xec>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <MX_GPIO_Init+0xec>)
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_GPIO_Init+0xec>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f000 fc29 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b0:	4819      	ldr	r0, [pc, #100]	; (8000418 <MX_GPIO_Init+0xf0>)
 80003b2:	f000 fc23 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_GPIO_Init+0xf4>)
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4619      	mov	r1, r3
 80003ca:	4815      	ldr	r0, [pc, #84]	; (8000420 <MX_GPIO_Init+0xf8>)
 80003cc:	f000 fa8c 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d0:	2320      	movs	r3, #32
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fa7d 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fc:	2303      	movs	r3, #3
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000408:	f000 fa6e 	bl	80008e8 <HAL_GPIO_Init>

}
 800040c:	bf00      	nop
 800040e:	3728      	adds	r7, #40	; 0x28
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	48000400 	.word	0x48000400
 800041c:	10210000 	.word	0x10210000
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000466:	2007      	movs	r0, #7
 8000468:	f000 fa0a 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a25      	ldr	r2, [pc, #148]	; (800052c <HAL_SPI_MspInit+0xb4>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d144      	bne.n	8000524 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a24      	ldr	r2, [pc, #144]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a18      	ldr	r2, [pc, #96]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <HAL_SPI_MspInit+0xb8>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e2:	2302      	movs	r3, #2
 80004e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004f2:	2305      	movs	r3, #5
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <HAL_SPI_MspInit+0xbc>)
 80004fe:	f000 f9f3 	bl	80008e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000502:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000514:	2305      	movs	r3, #5
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <HAL_SPI_MspInit+0xc0>)
 8000520:	f000 f9e2 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3728      	adds	r7, #40	; 0x28
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40003800 	.word	0x40003800
 8000530:	40021000 	.word	0x40021000
 8000534:	48001400 	.word	0x48001400
 8000538:	48000400 	.word	0x48000400

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f884 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490e      	ldr	r1, [pc, #56]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0b      	ldr	r4, [pc, #44]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005de:	f7ff ffd7 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f001 ff95 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fdf5 	bl	80001d4 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80005f8:	080025b8 	.word	0x080025b8
  ldr r2, =_sbss
 80005fc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000600:	20000098 	.word	0x20000098

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f931 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff ff04 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f93b 	bl	80008ce <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f911 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000008 	.word	0x20000008
 800068c:	20000010 	.word	0x20000010
 8000690:	2000000c 	.word	0x2000000c

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000010 	.word	0x20000010
 80006b8:	20000094 	.word	0x20000094

080006bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000094 	.word	0x20000094

080006d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff ffee 	bl	80006bc <HAL_GetTick>
 80006e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ec:	d005      	beq.n	80006fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_Delay+0x44>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006fa:	bf00      	nop
 80006fc:	f7ff ffde 	bl	80006bc <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8f7      	bhi.n	80006fc <HAL_Delay+0x28>
  {
  }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000010 	.word	0x20000010

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e160      	b.n	8000bba <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8152 	beq.w	8000bb4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d00b      	beq.n	8000930 <HAL_GPIO_Init+0x48>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d007      	beq.n	8000930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000924:	2b11      	cmp	r3, #17
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b12      	cmp	r3, #18
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 0201 	and.w	r2, r3, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0xea>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80ac 	beq.w	8000bb4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a5d      	ldr	r2, [pc, #372]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a74:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <HAL_GPIO_Init+0x2f4>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9e:	d025      	beq.n	8000aec <HAL_GPIO_Init+0x204>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4f      	ldr	r2, [pc, #316]	; (8000be0 <HAL_GPIO_Init+0x2f8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d01f      	beq.n	8000ae8 <HAL_GPIO_Init+0x200>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_GPIO_Init+0x2fc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d019      	beq.n	8000ae4 <HAL_GPIO_Init+0x1fc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x300>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d013      	beq.n	8000ae0 <HAL_GPIO_Init+0x1f8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x304>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00d      	beq.n	8000adc <HAL_GPIO_Init+0x1f4>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a4b      	ldr	r2, [pc, #300]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x1f0>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a4a      	ldr	r2, [pc, #296]	; (8000bf4 <HAL_GPIO_Init+0x30c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d101      	bne.n	8000ad4 <HAL_GPIO_Init+0x1ec>
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	e00c      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	e00a      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000ad8:	2305      	movs	r3, #5
 8000ada:	e008      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x206>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2f4>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b30:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b36:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b5a:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b84:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f ae97 	bne.w	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	48001400 	.word	0x48001400
 8000bf4:	48001800 	.word	0x48001800
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f000 bf01 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8160 	beq.w	8000f16 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c56:	4bae      	ldr	r3, [pc, #696]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 030c 	and.w	r3, r3, #12
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d00c      	beq.n	8000c7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c62:	4bab      	ldr	r3, [pc, #684]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d159      	bne.n	8000d22 <HAL_RCC_OscConfig+0xf6>
 8000c6e:	4ba8      	ldr	r3, [pc, #672]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7a:	d152      	bne.n	8000d22 <HAL_RCC_OscConfig+0xf6>
 8000c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c88:	fa93 f3a3 	rbit	r3, r3
 8000c8c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d102      	bne.n	8000cae <HAL_RCC_OscConfig+0x82>
 8000ca8:	4b99      	ldr	r3, [pc, #612]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	e015      	b.n	8000cda <HAL_RCC_OscConfig+0xae>
 8000cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cd6:	4b8e      	ldr	r3, [pc, #568]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cde:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000ce2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000ce6:	fa92 f2a2 	rbit	r2, r2
 8000cea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000cee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	f042 0220 	orr.w	r2, r2, #32
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	f002 021f 	and.w	r2, r2, #31
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8102 	beq.w	8000f14 <HAL_RCC_OscConfig+0x2e8>
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 80fc 	bne.w	8000f14 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f000 be93 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d106      	bne.n	8000d3c <HAL_RCC_OscConfig+0x110>
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a77      	ldr	r2, [pc, #476]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e030      	b.n	8000d9e <HAL_RCC_OscConfig+0x172>
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x134>
 8000d46:	4b72      	ldr	r3, [pc, #456]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a71      	ldr	r2, [pc, #452]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a6e      	ldr	r2, [pc, #440]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01e      	b.n	8000d9e <HAL_RCC_OscConfig+0x172>
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d6a:	d10c      	bne.n	8000d86 <HAL_RCC_OscConfig+0x15a>
 8000d6c:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a67      	ldr	r2, [pc, #412]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a64      	ldr	r2, [pc, #400]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e00b      	b.n	8000d9e <HAL_RCC_OscConfig+0x172>
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a61      	ldr	r2, [pc, #388]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d059      	beq.n	8000e5c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc88 	bl	80006bc <HAL_GetTick>
 8000dac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	e00a      	b.n	8000dc8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db2:	f7ff fc83 	bl	80006bc <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d902      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f000 be40 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ddc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d102      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1ce>
 8000df4:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	e015      	b.n	8000e26 <HAL_RCC_OscConfig+0x1fa>
 8000dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e1a:	fa93 f3a3 	rbit	r3, r3
 8000e1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e2a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e32:	fa92 f2a2 	rbit	r2, r2
 8000e36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000e3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	f002 021f 	and.w	r2, r2, #31
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0ab      	beq.n	8000db2 <HAL_RCC_OscConfig+0x186>
 8000e5a:	e05c      	b.n	8000f16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc2e 	bl	80006bc <HAL_GetTick>
 8000e60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e66:	f7ff fc29 	bl	80006bc <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d902      	bls.n	8000e7c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f000 bde6 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000e90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_RCC_OscConfig+0x282>
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x2ae>
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000eca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_RCC_OscConfig+0x2e4>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ede:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ee2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000eee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ab      	bne.n	8000e66 <HAL_RCC_OscConfig+0x23a>
 8000f0e:	e002      	b.n	8000f16 <HAL_RCC_OscConfig+0x2ea>
 8000f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 8170 	beq.w	8001206 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f26:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00c      	beq.n	8000f4c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f32:	4bcd      	ldr	r3, [pc, #820]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d16d      	bne.n	800101a <HAL_RCC_OscConfig+0x3ee>
 8000f3e:	4bca      	ldr	r3, [pc, #808]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f4a:	d166      	bne.n	800101a <HAL_RCC_OscConfig+0x3ee>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000f5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x350>
 8000f76:	4bbc      	ldr	r3, [pc, #752]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e013      	b.n	8000fa4 <HAL_RCC_OscConfig+0x378>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fa0:	4bb1      	ldr	r3, [pc, #708]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000faa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000fb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3ba>
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d002      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f000 bd31 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4ba0      	ldr	r3, [pc, #640]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	21f8      	movs	r1, #248	; 0xf8
 8000ff6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000ffe:	fa91 f1a1 	rbit	r1, r1
 8001002:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001006:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800100a:	fab1 f181 	clz	r1, r1
 800100e:	b2c9      	uxtb	r1, r1
 8001010:	408b      	lsls	r3, r1
 8001012:	4995      	ldr	r1, [pc, #596]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001018:	e0f5      	b.n	8001206 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 8085 	beq.w	8001130 <HAL_RCC_OscConfig+0x504>
 8001026:	2301      	movs	r3, #1
 8001028:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001038:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	2301      	movs	r3, #1
 8001050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fb33 	bl	80006bc <HAL_GetTick>
 8001056:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105a:	e00a      	b.n	8001072 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fb2e 	bl	80006bc <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d902      	bls.n	8001072 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	f000 bceb 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001084:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_RCC_OscConfig+0x476>
 800109c:	4b72      	ldr	r3, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	e013      	b.n	80010ca <HAL_RCC_OscConfig+0x49e>
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	2202      	movs	r2, #2
 80010cc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80010d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80010d4:	fa92 f2a2 	rbit	r2, r2
 80010d8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80010dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f042 0220 	orr.w	r2, r2, #32
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	f002 021f 	and.w	r2, r2, #31
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0af      	beq.n	800105c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	21f8      	movs	r1, #248	; 0xf8
 800110c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001114:	fa91 f1a1 	rbit	r1, r1
 8001118:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800111c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001120:	fab1 f181 	clz	r1, r1
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	408b      	lsls	r3, r1
 8001128:	494f      	ldr	r1, [pc, #316]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
 800112e:	e06a      	b.n	8001206 <HAL_RCC_OscConfig+0x5da>
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001142:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff faae 	bl	80006bc <HAL_GetTick>
 8001160:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff faa9 	bl	80006bc <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d902      	bls.n	800117c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f000 bc66 	b.w	8001a48 <HAL_RCC_OscConfig+0xe1c>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800118e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x580>
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x5a8>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80011da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80011e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	f002 021f 	and.w	r2, r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1af      	bne.n	8001166 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80da 	beq.w	80013ca <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d069      	beq.n	80012f4 <HAL_RCC_OscConfig+0x6c8>
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001232:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_OscConfig+0x640>)
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	461a      	mov	r2, r3
 8001246:	2301      	movs	r3, #1
 8001248:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fa37 	bl	80006bc <HAL_GetTick>
 800124e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e00d      	b.n	8001270 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fa32 	bl	80006bc <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d905      	bls.n	8001270 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e3ef      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8001268:	40021000 	.word	0x40021000
 800126c:	10908120 	.word	0x10908120
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012a0:	2202      	movs	r2, #2
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	fa93 f2a3 	rbit	r2, r3
 80012ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b4:	4ba4      	ldr	r3, [pc, #656]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80012b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012bc:	2102      	movs	r1, #2
 80012be:	6019      	str	r1, [r3, #0]
 80012c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	fa93 f1a3 	rbit	r1, r3
 80012ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012ce:	6019      	str	r1, [r3, #0]
  return result;
 80012d0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0b0      	beq.n	8001254 <HAL_RCC_OscConfig+0x628>
 80012f2:	e06a      	b.n	80013ca <HAL_RCC_OscConfig+0x79e>
 80012f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	fa93 f2a3 	rbit	r2, r3
 8001306:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800130a:	601a      	str	r2, [r3, #0]
  return result;
 800130c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001310:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x920>)
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	2300      	movs	r3, #0
 8001324:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff f9c9 	bl	80006bc <HAL_GetTick>
 800132a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	e009      	b.n	8001344 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff f9c4 	bl	80006bc <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e381      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8001344:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001348:	2202      	movs	r2, #2
 800134a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	fa93 f2a3 	rbit	r2, r3
 8001356:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001360:	2202      	movs	r2, #2
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f2a3 	rbit	r2, r3
 800136e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001378:	2202      	movs	r2, #2
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	fa93 f2a3 	rbit	r2, r3
 8001386:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800138a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 800138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001390:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001394:	2102      	movs	r1, #2
 8001396:	6019      	str	r1, [r3, #0]
 8001398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f1a3 	rbit	r1, r3
 80013a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013a6:	6019      	str	r1, [r3, #0]
  return result;
 80013a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1b2      	bne.n	8001330 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8157 	beq.w	8001688 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e0:	4b59      	ldr	r3, [pc, #356]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d112      	bne.n	8001412 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a55      	ldr	r2, [pc, #340]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800140c:	2301      	movs	r3, #1
 800140e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x924>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11a      	bne.n	8001454 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x924>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x924>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142a:	f7ff f947 	bl	80006bc <HAL_GetTick>
 800142e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	e009      	b.n	8001448 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001434:	f7ff f942 	bl	80006bc <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	; 0x64
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e2ff      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x924>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0ef      	beq.n	8001434 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x840>
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a39      	ldr	r2, [pc, #228]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e02f      	b.n	80014cc <HAL_RCC_OscConfig+0x8a0>
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x864>
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0x8a0>
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x888>
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0x8a0>
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d06a      	beq.n	80015ac <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f8f1 	bl	80006bc <HAL_GetTick>
 80014da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff f8ec 	bl	80006bc <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e2a7      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 80014f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001526:	601a      	str	r2, [r3, #0]
  return result;
 8001528:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800152c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d108      	bne.n	8001554 <HAL_RCC_OscConfig+0x928>
 8001542:	4b01      	ldr	r3, [pc, #4]	; (8001548 <HAL_RCC_OscConfig+0x91c>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x944>
 8001548:	40021000 	.word	0x40021000
 800154c:	10908120 	.word	0x10908120
 8001550:	40007000 	.word	0x40007000
 8001554:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4bc0      	ldr	r3, [pc, #768]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001574:	2102      	movs	r1, #2
 8001576:	6011      	str	r1, [r2, #0]
 8001578:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	fa92 f1a2 	rbit	r1, r2
 8001582:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001586:	6011      	str	r1, [r2, #0]
  return result;
 8001588:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d09a      	beq.n	80014e0 <HAL_RCC_OscConfig+0x8b4>
 80015aa:	e063      	b.n	8001674 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff f886 	bl	80006bc <HAL_GetTick>
 80015b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff f881 	bl	80006bc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e23c      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 80015ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015fc:	601a      	str	r2, [r3, #0]
  return result;
 80015fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001602:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x9f2>
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	e00d      	b.n	800163a <HAL_RCC_OscConfig+0xa0e>
 800161e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001622:	2202      	movs	r2, #2
 8001624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4b8e      	ldr	r3, [pc, #568]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800163e:	2102      	movs	r1, #2
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	fa92 f1a2 	rbit	r1, r2
 800164c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001650:	6011      	str	r1, [r2, #0]
  return result;
 8001652:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fab2 f282 	clz	r2, r2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f002 021f 	and.w	r2, r2, #31
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1a0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001674:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 81d9 	beq.w	8001a46 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	f000 81a6 	beq.w	80019ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	f040 811e 	bne.w	80018ea <HAL_RCC_OscConfig+0xcbe>
 80016ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016c6:	601a      	str	r2, [r3, #0]
  return result;
 80016c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	461a      	mov	r2, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7fe ffea 	bl	80006bc <HAL_GetTick>
 80016e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e009      	b.n	8001702 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7fe ffe5 	bl	80006bc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1a2      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8001702:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800171a:	601a      	str	r2, [r3, #0]
  return result;
 800171c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0xb10>
 8001736:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0xb48>
 800173c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800175a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800177c:	6011      	str	r1, [r2, #0]
 800177e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	fa92 f1a2 	rbit	r1, r2
 8001788:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800178c:	6011      	str	r1, [r2, #0]
  return result;
 800178e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f042 0220 	orr.w	r2, r2, #32
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f002 021f 	and.w	r2, r2, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d19e      	bne.n	80016ee <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	f023 020f 	bic.w	r2, r3, #15
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	492c      	ldr	r1, [pc, #176]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a19      	ldr	r1, [r3, #32]
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	430b      	orrs	r3, r1
 80017da:	4925      	ldr	r1, [pc, #148]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017f8:	601a      	str	r2, [r3, #0]
  return result;
 80017fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800180a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	461a      	mov	r2, r3
 8001812:	2301      	movs	r3, #1
 8001814:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7fe ff51 	bl	80006bc <HAL_GetTick>
 800181a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7fe ff4c 	bl	80006bc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e109      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 8001834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800184c:	601a      	str	r2, [r3, #0]
  return result;
 800184e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001852:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0xc48>
 8001868:	4b01      	ldr	r3, [pc, #4]	; (8001870 <HAL_RCC_OscConfig+0xc44>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e01e      	b.n	80018ac <HAL_RCC_OscConfig+0xc80>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0xe28>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018b4:	6011      	str	r1, [r2, #0]
 80018b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	fa92 f1a2 	rbit	r1, r2
 80018c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018c4:	6011      	str	r1, [r2, #0]
  return result;
 80018c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fab2 f282 	clz	r2, r2
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f002 021f 	and.w	r2, r2, #31
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d09b      	beq.n	8001820 <HAL_RCC_OscConfig+0xbf4>
 80018e8:	e0ad      	b.n	8001a46 <HAL_RCC_OscConfig+0xe1a>
 80018ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fa93 f2a3 	rbit	r2, r3
 80018fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001902:	601a      	str	r2, [r3, #0]
  return result;
 8001904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001908:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe fecc 	bl	80006bc <HAL_GetTick>
 8001924:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e009      	b.n	800193e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7fe fec7 	bl	80006bc <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e084      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001956:	601a      	str	r2, [r3, #0]
  return result;
 8001958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0xd4c>
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0xe28>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e01b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd84>
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_OscConfig+0xe28>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f107 0214 	add.w	r2, r7, #20
 80019b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b8:	6011      	str	r1, [r2, #0]
 80019ba:	f107 0214 	add.w	r2, r7, #20
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	fa92 f1a2 	rbit	r1, r2
 80019c4:	f107 0210 	add.w	r2, r7, #16
 80019c8:	6011      	str	r1, [r2, #0]
  return result;
 80019ca:	f107 0210 	add.w	r2, r7, #16
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d19e      	bne.n	800192a <HAL_RCC_OscConfig+0xcfe>
 80019ec:	e02b      	b.n	8001a46 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e025      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0xe28>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_RCC_OscConfig+0xe28>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d111      	bne.n	8001a42 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d108      	bne.n	8001a42 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a34:	f003 020f 	and.w	r2, r3, #15
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09e      	sub	sp, #120	; 0x78
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e162      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b90      	ldr	r3, [pc, #576]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b8d      	ldr	r3, [pc, #564]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	498b      	ldr	r1, [pc, #556]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e14a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	497f      	ldr	r1, [pc, #508]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80dc 	beq.w	8001c84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d13c      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xf6>
 8001ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_ClockConfig+0xa6>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e00f      	b.n	8001b1e <HAL_RCC_ClockConfig+0xc6>
 8001afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	663b      	str	r3, [r7, #96]	; 0x60
 8001b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b22:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b26:	fa92 f2a2 	rbit	r2, r2
 8001b2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d17b      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0f3      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d13c      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x178>
 8001b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x128>
 8001b7a:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
 8001b80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40
 8001b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ba8:	fa92 f2a2 	rbit	r2, r2
 8001bac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d13a      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b2      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x1a0>
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e00d      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1bc>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2202      	movs	r2, #2
 8001c16:	61ba      	str	r2, [r7, #24]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	617a      	str	r2, [r7, #20]
  return result;
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	fab2 f282 	clz	r2, r2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f042 0220 	orr.w	r2, r2, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f002 021f 	and.w	r2, r2, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e079      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7fe fd32 	bl	80006bc <HAL_GetTick>
 8001c58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7fe fd2e 	bl	80006bc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e061      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d214      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HAL_RCC_ClockConfig+0x25c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e040      	b.n	8001d36 <HAL_RCC_ClockConfig+0x2de>
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_ClockConfig+0x2e8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	491a      	ldr	r1, [pc, #104]	; (8001d40 <HAL_RCC_ClockConfig+0x2e8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_RCC_ClockConfig+0x2e8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4912      	ldr	r1, [pc, #72]	; (8001d40 <HAL_RCC_ClockConfig+0x2e8>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cfa:	f000 f829 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_RCC_ClockConfig+0x2e8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d08:	22f0      	movs	r2, #240	; 0xf0
 8001d0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	fa92 f2a2 	rbit	r2, r2
 8001d12:	60fa      	str	r2, [r7, #12]
  return result;
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	40d3      	lsrs	r3, r2
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x2ec>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	fa21 f303 	lsr.w	r3, r1, r3
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_RCC_ClockConfig+0x2f0>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_RCC_ClockConfig+0x2f4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc80 	bl	8000634 <HAL_InitTick>
  
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3778      	adds	r7, #120	; 0x78
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08002580 	.word	0x08002580
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	2000000c 	.word	0x2000000c

08001d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b08b      	sub	sp, #44	; 0x2c
 8001d54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x30>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x36>
 8001d7e:	e03f      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d82:	623b      	str	r3, [r7, #32]
      break;
 8001d84:	e03f      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	fa92 f2a2 	rbit	r2, r2
 8001d98:	607a      	str	r2, [r7, #4]
  return result;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	40d3      	lsrs	r3, r2
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	220f      	movs	r2, #15
 8001db4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	fa92 f2a2 	rbit	r2, r2
 8001dbc:	60fa      	str	r2, [r7, #12]
  return result;
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	40d3      	lsrs	r3, r2
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e007      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	623b      	str	r3, [r7, #32]
      break;
 8001dfe:	e002      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e06:	6a3b      	ldr	r3, [r7, #32]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	372c      	adds	r7, #44	; 0x2c
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	08002590 	.word	0x08002590
 8001e20:	080025a0 	.word	0x080025a0

08001e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e09d      	b.n	8001f72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e46:	d009      	beq.n	8001e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
 8001e4e:	e005      	b.n	8001e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fafe 	bl	8000478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e9c:	d902      	bls.n	8001ea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e002      	b.n	8001eaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001eb2:	d007      	beq.n	8001ec4 <HAL_SPI_Init+0xa0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ebc:	d002      	beq.n	8001ec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	f003 0204 	and.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f40:	ea42 0103 	orr.w	r1, r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b088      	sub	sp, #32
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_SPI_Transmit+0x22>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e158      	b.n	800224e <HAL_SPI_Transmit+0x2d4>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa4:	f7fe fb8a 	bl	80006bc <HAL_GetTick>
 8001fa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fbe:	e13d      	b.n	800223c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_SPI_Transmit+0x52>
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fd0:	e134      	b.n	800223c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201c:	d10f      	bne.n	800203e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800203c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d007      	beq.n	800205c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002064:	d94b      	bls.n	80020fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Transmit+0xfa>
 800206e:	8afb      	ldrh	r3, [r7, #22]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d13e      	bne.n	80020f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002098:	e02b      	b.n	80020f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d112      	bne.n	80020ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020cc:	e011      	b.n	80020f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ce:	f7fe faf5 	bl	80006bc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d803      	bhi.n	80020e6 <HAL_SPI_Transmit+0x16c>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d102      	bne.n	80020ec <HAL_SPI_Transmit+0x172>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020f0:	e0a4      	b.n	800223c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ce      	bne.n	800209a <HAL_SPI_Transmit+0x120>
 80020fc:	e07c      	b.n	80021f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_Transmit+0x192>
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d170      	bne.n	80021ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d912      	bls.n	800213c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	1c9a      	adds	r2, r3, #2
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b02      	subs	r3, #2
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800213a:	e058      	b.n	80021ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002162:	e044      	b.n	80021ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d12b      	bne.n	80021ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d912      	bls.n	80021a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b02      	subs	r3, #2
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021a0:	e025      	b.n	80021ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021c8:	e011      	b.n	80021ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ca:	f7fe fa77 	bl	80006bc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d803      	bhi.n	80021e2 <HAL_SPI_Transmit+0x268>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d102      	bne.n	80021e8 <HAL_SPI_Transmit+0x26e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ec:	e026      	b.n	800223c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1b5      	bne.n	8002164 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f941 	bl	8002484 <SPI_EndRxTxTransaction>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	77fb      	strb	r3, [r7, #31]
 8002238:	e000      	b.n	800223c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800223a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800224c:	7ffb      	ldrb	r3, [r7, #31]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002268:	f7fe fa28 	bl	80006bc <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002278:	f7fe fa20 	bl	80006bc <HAL_GetTick>
 800227c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228e:	e054      	b.n	800233a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d050      	beq.n	800233a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002298:	f7fe fa10 	bl	80006bc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d902      	bls.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d13d      	bne.n	800232a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c6:	d111      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d0:	d004      	beq.n	80022dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d107      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	d10f      	bne.n	8002316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e017      	b.n	800235a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3b01      	subs	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4013      	ands	r3, r2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	429a      	cmp	r2, r3
 8002356:	d19b      	bne.n	8002290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008

08002368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002376:	f7fe f9a1 	bl	80006bc <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002386:	f7fe f999 	bl	80006bc <HAL_GetTick>
 800238a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800238c:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	0d1b      	lsrs	r3, r3, #20
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80023a4:	e05f      	b.n	8002466 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023ac:	d106      	bne.n	80023bc <SPI_WaitFifoStateUntilTimeout+0x54>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c2:	d050      	beq.n	8002466 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c4:	f7fe f97a 	bl	80006bc <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d902      	bls.n	80023da <SPI_WaitFifoStateUntilTimeout+0x72>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13d      	bne.n	8002456 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f2:	d111      	bne.n	8002418 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	d004      	beq.n	8002408 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d107      	bne.n	8002418 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002420:	d10f      	bne.n	8002442 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e010      	b.n	8002478 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3b01      	subs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d197      	bne.n	80023a6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000008 	.word	0x20000008

08002484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff ff63 	bl	8002368 <SPI_WaitFifoStateUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e027      	b.n	8002508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff fec8 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e014      	b.n	8002508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ff3c 	bl	8002368 <SPI_WaitFifoStateUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e000      	b.n	8002508 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	4d0d      	ldr	r5, [pc, #52]	; (8002548 <__libc_init_array+0x38>)
 8002514:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002516:	1b64      	subs	r4, r4, r5
 8002518:	10a4      	asrs	r4, r4, #2
 800251a:	2600      	movs	r6, #0
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	4d0b      	ldr	r5, [pc, #44]	; (8002550 <__libc_init_array+0x40>)
 8002522:	4c0c      	ldr	r4, [pc, #48]	; (8002554 <__libc_init_array+0x44>)
 8002524:	f000 f820 	bl	8002568 <_init>
 8002528:	1b64      	subs	r4, r4, r5
 800252a:	10a4      	asrs	r4, r4, #2
 800252c:	2600      	movs	r6, #0
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f855 3b04 	ldr.w	r3, [r5], #4
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080025b0 	.word	0x080025b0
 800254c:	080025b0 	.word	0x080025b0
 8002550:	080025b0 	.word	0x080025b0
 8002554:	080025b4 	.word	0x080025b4

08002558 <memset>:
 8002558:	4402      	add	r2, r0
 800255a:	4603      	mov	r3, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	f803 1b01 	strb.w	r1, [r3], #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <_init>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr

08002574 <_fini>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr
