
015_freetos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800481c  0800481c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800481c  0800481c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800481c  0800481c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000010  08004834  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08004834  000210ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001317c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b43  00000000  00000000  000331bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021840  00000000  00000000  00037d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bcb  00000000  00000000  00059578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d166c  00000000  00000000  0006c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d7af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  0013d804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004734 	.word	0x08004734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004734 	.word	0x08004734

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fad7 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f84b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f8d7 	bl	80003d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000226:	f000 f8a5 	bl	8000374 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800022a:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <main+0x8c>)
 800022c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000230:	461d      	mov	r5, r3
 8000232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000236:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800023a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800023e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f003 f82b 	bl	80032a0 <osThreadCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <main+0x90>)
 800024e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0x94>)
 8000252:	f107 0420 	add.w	r4, r7, #32
 8000256:	461d      	mov	r5, r3
 8000258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000264:	f107 0320 	add.w	r3, r7, #32
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 f818 	bl	80032a0 <osThreadCreate>
 8000270:	4603      	mov	r3, r0
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <main+0x98>)
 8000274:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <main+0x9c>)
 8000278:	1d3c      	adds	r4, r7, #4
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f003 f807 	bl	80032a0 <osThreadCreate>
 8000292:	4603      	mov	r3, r0
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <main+0xa0>)
 8000296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f002 fffb 	bl	8003292 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x88>
 800029e:	bf00      	nop
 80002a0:	08004770 	.word	0x08004770
 80002a4:	20000fcc 	.word	0x20000fcc
 80002a8:	0800478c 	.word	0x0800478c
 80002ac:	20000fd0 	.word	0x20000fd0
 80002b0:	080047a8 	.word	0x080047a8
 80002b4:	20000fd4 	.word	0x20000fd4

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b0a6      	sub	sp, #152	; 0x98
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fa2c 	bl	8004724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2258      	movs	r2, #88	; 0x58
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 fa1e 	bl	8004724 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fd12 	bl	8000d40 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f931 	bl	8000588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000336:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fc12 	bl	8001b6c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f91b 	bl	8000588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000352:	2302      	movs	r3, #2
 8000354:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fe6d 	bl	800203c <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000368:	f000 f90e 	bl	8000588 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3798      	adds	r7, #152	; 0x98
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_USART2_UART_Init+0x5c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000380:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b8:	f002 fb34 	bl	8002a24 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c2:	f000 f8e1 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000fd8 	.word	0x20000fd8
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a2a      	ldr	r2, [pc, #168]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a24      	ldr	r2, [pc, #144]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fc5d 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_GPIO_Init+0xc8>)
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	; (80004a0 <MX_GPIO_Init+0xcc>)
 800046c:	f000 fac6 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000470:	2320      	movs	r3, #32
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fab7 	bl	80009fc <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	; 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	10210000 	.word	0x10210000
 80004a0:	48000800 	.word	0x48000800

080004a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t data[]="task1\n";
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <StartDefaultTask+0x38>)
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b6:	6018      	str	r0, [r3, #0]
 80004b8:	3304      	adds	r3, #4
 80004ba:	8019      	strh	r1, [r3, #0]
 80004bc:	3302      	adds	r3, #2
 80004be:	0c0a      	lsrs	r2, r1, #16
 80004c0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 80004c2:	f107 0108 	add.w	r1, r7, #8
 80004c6:	2364      	movs	r3, #100	; 0x64
 80004c8:	2207      	movs	r2, #7
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <StartDefaultTask+0x3c>)
 80004cc:	f002 faf8 	bl	8002ac0 <HAL_UART_Transmit>
    osDelay(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f002 ff30 	bl	8003338 <osDelay>
	HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 80004d8:	e7f3      	b.n	80004c2 <StartDefaultTask+0x1e>
 80004da:	bf00      	nop
 80004dc:	080047c4 	.word	0x080047c4
 80004e0:	20000fd8 	.word	0x20000fd8

080004e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint8_t data[]="task2\n";
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <StartTask02+0x38>)
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f6:	6018      	str	r0, [r3, #0]
 80004f8:	3304      	adds	r3, #4
 80004fa:	8019      	strh	r1, [r3, #0]
 80004fc:	3302      	adds	r3, #2
 80004fe:	0c0a      	lsrs	r2, r1, #16
 8000500:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 8000502:	f107 0108 	add.w	r1, r7, #8
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2207      	movs	r2, #7
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <StartTask02+0x3c>)
 800050c:	f002 fad8 	bl	8002ac0 <HAL_UART_Transmit>
	    osDelay(2000);
 8000510:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000514:	f002 ff10 	bl	8003338 <osDelay>
		HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 8000518:	e7f3      	b.n	8000502 <StartTask02+0x1e>
 800051a:	bf00      	nop
 800051c:	080047cc 	.word	0x080047cc
 8000520:	20000fd8 	.word	0x20000fd8

08000524 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint8_t data[]="task3\n";
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <StartTask03+0x38>)
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000536:	6018      	str	r0, [r3, #0]
 8000538:	3304      	adds	r3, #4
 800053a:	8019      	strh	r1, [r3, #0]
 800053c:	3302      	adds	r3, #2
 800053e:	0c0a      	lsrs	r2, r1, #16
 8000540:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 8000542:	f107 0108 	add.w	r1, r7, #8
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	2207      	movs	r2, #7
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <StartTask03+0x3c>)
 800054c:	f002 fab8 	bl	8002ac0 <HAL_UART_Transmit>
	    osDelay(3000);
 8000550:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000554:	f002 fef0 	bl	8003338 <osDelay>
		HAL_UART_Transmit(&huart2, data, sizeof(data),100);
 8000558:	e7f3      	b.n	8000542 <StartTask03+0x1e>
 800055a:	bf00      	nop
 800055c:	080047d4 	.word	0x080047d4
 8000560:	20000fd8 	.word	0x20000fd8

08000564 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d101      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000576:	f000 f93f 	bl	80007f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40012c00 	.word	0x40012c00

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_MspInit+0x4c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <HAL_MspInit+0x4c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x4c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_MspInit+0x4c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_MspInit+0x4c>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_MspInit+0x4c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210f      	movs	r1, #15
 80005ce:	f06f 0001 	mvn.w	r0, #1
 80005d2:	f000 f9e9 	bl	80009a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_UART_MspInit+0x7c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d128      	bne.n	8000658 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_UART_MspInit+0x80>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_UART_MspInit+0x80>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_UART_MspInit+0x80>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_UART_MspInit+0x80>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <HAL_UART_MspInit+0x80>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_UART_MspInit+0x80>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000636:	230c      	movs	r3, #12
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000646:	2307      	movs	r3, #7
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 f9d2 	bl	80009fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40004400 	.word	0x40004400
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2019      	movs	r0, #25
 800067e:	f000 f993 	bl	80009a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000682:	2019      	movs	r0, #25
 8000684:	f000 f9ac 	bl	80009e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_InitTick+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <HAL_InitTick+0x9c>)
 800068e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_InitTick+0x9c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a0:	f107 0210 	add.w	r2, r7, #16
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fc94 	bl	8001fd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006b0:	f001 fc70 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 80006b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_InitTick+0xa0>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9b      	lsrs	r3, r3, #18
 80006c0:	3b01      	subs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_InitTick+0xa4>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <HAL_InitTick+0xa8>)
 80006c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_InitTick+0xa4>)
 80006cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <HAL_InitTick+0xa4>)
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_InitTick+0xa4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <HAL_InitTick+0xa4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_InitTick+0xa4>)
 80006e6:	f001 fec7 	bl	8002478 <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d104      	bne.n	80006fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <HAL_InitTick+0xa4>)
 80006f2:	f001 ff23 	bl	800253c <HAL_TIM_Base_Start_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	431bde83 	.word	0x431bde83
 800070c:	2000105c 	.word	0x2000105c
 8000710:	40012c00 	.word	0x40012c00

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000746:	f001 ff69 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000105c 	.word	0x2000105c

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490e      	ldr	r1, [pc, #56]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0b      	ldr	r4, [pc, #44]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a2:	f7ff ffd7 	bl	8000754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f003 ff99 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007aa:	f7ff fd33 	bl	8000214 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007bc:	08004824 	.word	0x08004824
  ldr r2, =_sbss
 80007c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007c4:	200010ac 	.word	0x200010ac

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
	...

080007cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f8d8 	bl	8000992 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ff40 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff fed4 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	200010a8 	.word	0x200010a8

08000820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;  
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200010a8 	.word	0x200010a8

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0b      	blt.n	80008c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	4907      	ldr	r1, [pc, #28]	; (80008d4 <__NVIC_EnableIRQ+0x38>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ff4c 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ba:	f7ff ff61 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	6978      	ldr	r0, [r7, #20]
 80009c6:	f7ff ffb1 	bl	800092c <NVIC_EncodePriority>
 80009ca:	4602      	mov	r2, r0
 80009cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff80 	bl	80008d8 <__NVIC_SetPriority>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff54 	bl	800089c <__NVIC_EnableIRQ>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e160      	b.n	8000cce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8152 	beq.w	8000cc8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d00b      	beq.n	8000a44 <HAL_GPIO_Init+0x48>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a38:	2b11      	cmp	r3, #17
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b12      	cmp	r3, #18
 8000a42:	d130      	bne.n	8000aa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	f003 0201 	and.w	r2, r3, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0xea>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d123      	bne.n	8000b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	6939      	ldr	r1, [r7, #16]
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0203 	and.w	r2, r3, #3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 80ac 	beq.w	8000cc8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b88:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <HAL_GPIO_Init+0x2f4>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb2:	d025      	beq.n	8000c00 <HAL_GPIO_Init+0x204>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_GPIO_Init+0x2f8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d01f      	beq.n	8000bfc <HAL_GPIO_Init+0x200>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_GPIO_Init+0x2fc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d019      	beq.n	8000bf8 <HAL_GPIO_Init+0x1fc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <HAL_GPIO_Init+0x300>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x304>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_GPIO_Init+0x308>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x30c>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1ec>
 8000be4:	2306      	movs	r3, #6
 8000be6:	e00c      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000be8:	2307      	movs	r3, #7
 8000bea:	e00a      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bec:	2305      	movs	r3, #5
 8000bee:	e008      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000c00:	2300      	movs	r3, #0
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2f4>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c44:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f47f ae97 	bne.w	8000a0c <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	48001000 	.word	0x48001000
 8000d04:	48001400 	.word	0x48001400
 8000d08:	48001800 	.word	0x48001800
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f000 bf01 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 8160 	beq.w	800102a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d6a:	4bae      	ldr	r3, [pc, #696]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d00c      	beq.n	8000d90 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d76:	4bab      	ldr	r3, [pc, #684]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d159      	bne.n	8000e36 <HAL_RCC_OscConfig+0xf6>
 8000d82:	4ba8      	ldr	r3, [pc, #672]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8e:	d152      	bne.n	8000e36 <HAL_RCC_OscConfig+0xf6>
 8000d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000da4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x82>
 8000dbc:	4b99      	ldr	r3, [pc, #612]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	e015      	b.n	8000dee <HAL_RCC_OscConfig+0xae>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dde:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dea:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000df6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000dfa:	fa92 f2a2 	rbit	r2, r2
 8000dfe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	f042 0220 	orr.w	r2, r2, #32
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	f002 021f 	and.w	r2, r2, #31
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8102 	beq.w	8001028 <HAL_RCC_OscConfig+0x2e8>
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 80fc 	bne.w	8001028 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f000 be93 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e40:	d106      	bne.n	8000e50 <HAL_RCC_OscConfig+0x110>
 8000e42:	4b78      	ldr	r3, [pc, #480]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a77      	ldr	r2, [pc, #476]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e030      	b.n	8000eb2 <HAL_RCC_OscConfig+0x172>
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x134>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a71      	ldr	r2, [pc, #452]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01e      	b.n	8000eb2 <HAL_RCC_OscConfig+0x172>
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x15a>
 8000e80:	4b68      	ldr	r3, [pc, #416]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a67      	ldr	r2, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b65      	ldr	r3, [pc, #404]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a64      	ldr	r2, [pc, #400]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e00b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x172>
 8000e9a:	4b62      	ldr	r3, [pc, #392]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a61      	ldr	r2, [pc, #388]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d059      	beq.n	8000f70 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fcb0 	bl	8000820 <HAL_GetTick>
 8000ec0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fcab 	bl	8000820 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d902      	bls.n	8000edc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f000 be40 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ef0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x1ce>
 8000f08:	4b46      	ldr	r3, [pc, #280]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x1fa>
 8000f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f12:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f2a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f3e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f42:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f46:	fa92 f2a2 	rbit	r2, r2
 8000f4a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f002 021f 	and.w	r2, r2, #31
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0ab      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x186>
 8000f6e:	e05c      	b.n	800102a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc56 	bl	8000820 <HAL_GetTick>
 8000f74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fc51 	bl	8000820 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d902      	bls.n	8000f90 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f000 bde6 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fa4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa8:	fab3 f383 	clz	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x282>
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	e015      	b.n	8000fee <HAL_RCC_OscConfig+0x2ae>
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_RCC_OscConfig+0x2e4>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ff6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ffa:	fa92 f2a2 	rbit	r2, r2
 8000ffe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001002:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001006:	fab2 f282 	clz	r2, r2
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f002 021f 	and.w	r2, r2, #31
 8001016:	2101      	movs	r1, #1
 8001018:	fa01 f202 	lsl.w	r2, r1, r2
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ab      	bne.n	8000f7a <HAL_RCC_OscConfig+0x23a>
 8001022:	e002      	b.n	800102a <HAL_RCC_OscConfig+0x2ea>
 8001024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8170 	beq.w	800131a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103a:	4bd0      	ldr	r3, [pc, #832]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001046:	4bcd      	ldr	r3, [pc, #820]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b08      	cmp	r3, #8
 8001050:	d16d      	bne.n	800112e <HAL_RCC_OscConfig+0x3ee>
 8001052:	4bca      	ldr	r3, [pc, #808]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800105a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800105e:	d166      	bne.n	800112e <HAL_RCC_OscConfig+0x3ee>
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001072:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x350>
 800108a:	4bbc      	ldr	r3, [pc, #752]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	e013      	b.n	80010b8 <HAL_RCC_OscConfig+0x378>
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010b4:	4bb1      	ldr	r3, [pc, #708]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2202      	movs	r2, #2
 80010ba:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010be:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010c2:	fa92 f2a2 	rbit	r2, r2
 80010c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f002 021f 	and.w	r2, r2, #31
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_OscConfig+0x3ba>
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d002      	beq.n	80010fa <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f000 bd31 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4ba0      	ldr	r3, [pc, #640]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	21f8      	movs	r1, #248	; 0xf8
 800110a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001112:	fa91 f1a1 	rbit	r1, r1
 8001116:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800111a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800111e:	fab1 f181 	clz	r1, r1
 8001122:	b2c9      	uxtb	r1, r1
 8001124:	408b      	lsls	r3, r1
 8001126:	4995      	ldr	r1, [pc, #596]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112c:	e0f5      	b.n	800131a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8085 	beq.w	8001244 <HAL_RCC_OscConfig+0x504>
 800113a:	2301      	movs	r3, #1
 800113c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800114c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800115a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	2301      	movs	r3, #1
 8001164:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fb5b 	bl	8000820 <HAL_GetTick>
 800116a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fb56 	bl	8000820 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d902      	bls.n	8001186 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	f000 bceb 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001198:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d102      	bne.n	80011b6 <HAL_RCC_OscConfig+0x476>
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	e013      	b.n	80011de <HAL_RCC_OscConfig+0x49e>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011da:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2202      	movs	r2, #2
 80011e0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011e8:	fa92 f2a2 	rbit	r2, r2
 80011ec:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011f4:	fab2 f282 	clz	r2, r2
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f042 0220 	orr.w	r2, r2, #32
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0af      	beq.n	8001170 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	21f8      	movs	r1, #248	; 0xf8
 8001220:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001228:	fa91 f1a1 	rbit	r1, r1
 800122c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001230:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001234:	fab1 f181 	clz	r1, r1
 8001238:	b2c9      	uxtb	r1, r1
 800123a:	408b      	lsls	r3, r1
 800123c:	494f      	ldr	r1, [pc, #316]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
 8001242:	e06a      	b.n	800131a <HAL_RCC_OscConfig+0x5da>
 8001244:	2301      	movs	r3, #1
 8001246:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	461a      	mov	r2, r3
 800126c:	2300      	movs	r3, #0
 800126e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fad6 	bl	8000820 <HAL_GetTick>
 8001274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fad1 	bl	8000820 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d902      	bls.n	8001290 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	f000 bc66 	b.w	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	095b      	lsrs	r3, r3, #5
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x580>
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	e013      	b.n	80012e8 <HAL_RCC_OscConfig+0x5a8>
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_RCC_OscConfig+0x63c>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2202      	movs	r2, #2
 80012ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1af      	bne.n	800127a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80da 	beq.w	80014de <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d069      	beq.n	8001408 <HAL_RCC_OscConfig+0x6c8>
 8001334:	2301      	movs	r3, #1
 8001336:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001346:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x640>)
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fa5f 	bl	8000820 <HAL_GetTick>
 8001362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e00d      	b.n	8001384 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fa5a 	bl	8000820 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d905      	bls.n	8001384 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e3ef      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 800137c:	40021000 	.word	0x40021000
 8001380:	10908120 	.word	0x10908120
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800139c:	2202      	movs	r2, #2
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f2a3 	rbit	r2, r3
 80013c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c8:	4ba4      	ldr	r3, [pc, #656]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80013ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013d0:	2102      	movs	r1, #2
 80013d2:	6019      	str	r1, [r3, #0]
 80013d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f1a3 	rbit	r1, r3
 80013de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013e2:	6019      	str	r1, [r3, #0]
  return result;
 80013e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0b0      	beq.n	8001368 <HAL_RCC_OscConfig+0x628>
 8001406:	e06a      	b.n	80014de <HAL_RCC_OscConfig+0x79e>
 8001408:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800141e:	601a      	str	r2, [r3, #0]
  return result;
 8001420:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001424:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <HAL_RCC_OscConfig+0x920>)
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	2300      	movs	r3, #0
 8001438:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff f9f1 	bl	8000820 <HAL_GetTick>
 800143e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	e009      	b.n	8001458 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff f9ec 	bl	8000820 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e381      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800149e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b6e      	ldr	r3, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80014a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a8:	2102      	movs	r1, #2
 80014aa:	6019      	str	r1, [r3, #0]
 80014ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fa93 f1a3 	rbit	r1, r3
 80014b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014ba:	6019      	str	r1, [r3, #0]
  return result;
 80014bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1b2      	bne.n	8001444 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8157 	beq.w	800179c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	4b56      	ldr	r3, [pc, #344]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	61d3      	str	r3, [r2, #28]
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <HAL_RCC_OscConfig+0x924>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x924>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <HAL_RCC_OscConfig+0x924>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff f96f 	bl	8000820 <HAL_GetTick>
 8001542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	e009      	b.n	800155c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff f96a 	bl	8000820 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e2ff      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x924>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x840>
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a39      	ldr	r2, [pc, #228]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6213      	str	r3, [r2, #32]
 800157e:	e02f      	b.n	80015e0 <HAL_RCC_OscConfig+0x8a0>
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x864>
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a33      	ldr	r2, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0x8a0>
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x888>
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6213      	str	r3, [r2, #32]
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x8a0>
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a20      	ldr	r2, [pc, #128]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06a      	beq.n	80016c0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f919 	bl	8000820 <HAL_GetTick>
 80015ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff f914 	bl	8000820 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2a7      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 800160c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800163a:	601a      	str	r2, [r3, #0]
  return result;
 800163c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001640:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x928>
 8001656:	4b01      	ldr	r3, [pc, #4]	; (800165c <HAL_RCC_OscConfig+0x91c>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	e013      	b.n	8001684 <HAL_RCC_OscConfig+0x944>
 800165c:	40021000 	.word	0x40021000
 8001660:	10908120 	.word	0x10908120
 8001664:	40007000 	.word	0x40007000
 8001668:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	4bc0      	ldr	r3, [pc, #768]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001688:	2102      	movs	r1, #2
 800168a:	6011      	str	r1, [r2, #0]
 800168c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	fa92 f1a2 	rbit	r1, r2
 8001696:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800169a:	6011      	str	r1, [r2, #0]
  return result;
 800169c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	fab2 f282 	clz	r2, r2
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f002 021f 	and.w	r2, r2, #31
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d09a      	beq.n	80015f4 <HAL_RCC_OscConfig+0x8b4>
 80016be:	e063      	b.n	8001788 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff f8ae 	bl	8000820 <HAL_GetTick>
 80016c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	e00b      	b.n	80016e2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff f8a9 	bl	8000820 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e23c      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 80016e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016fe:	2202      	movs	r2, #2
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001710:	601a      	str	r2, [r3, #0]
  return result;
 8001712:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001716:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d102      	bne.n	8001732 <HAL_RCC_OscConfig+0x9f2>
 800172c:	4b95      	ldr	r3, [pc, #596]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	e00d      	b.n	800174e <HAL_RCC_OscConfig+0xa0e>
 8001732:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001736:	2202      	movs	r2, #2
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4b8e      	ldr	r3, [pc, #568]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001752:	2102      	movs	r1, #2
 8001754:	6011      	str	r1, [r2, #0]
 8001756:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	fa92 f1a2 	rbit	r1, r2
 8001760:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001764:	6011      	str	r1, [r2, #0]
  return result;
 8001766:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1a0      	bne.n	80016ca <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001788:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a7b      	ldr	r2, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 81d9 	beq.w	8001b5a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	f000 81a6 	beq.w	8001b02 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	f040 811e 	bne.w	80019fe <HAL_RCC_OscConfig+0xcbe>
 80017c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017da:	601a      	str	r2, [r3, #0]
  return result;
 80017dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f812 	bl	8000820 <HAL_GetTick>
 80017fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	e009      	b.n	8001816 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f80d 	bl	8000820 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1a2      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001816:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800181a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800182e:	601a      	str	r2, [r3, #0]
  return result;
 8001830:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001834:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0xb10>
 800184a:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e01b      	b.n	8001888 <HAL_RCC_OscConfig+0xb48>
 8001850:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800186e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800188c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fa92 f1a2 	rbit	r1, r2
 800189c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018a0:	6011      	str	r1, [r2, #0]
  return result;
 80018a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d19e      	bne.n	8001802 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	f023 020f 	bic.w	r2, r3, #15
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	492c      	ldr	r1, [pc, #176]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a19      	ldr	r1, [r3, #32]
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001912:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	461a      	mov	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7fe ff79 	bl	8000820 <HAL_GetTick>
 800192e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001932:	e009      	b.n	8001948 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe ff74 	bl	8000820 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e109      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800194c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0xc48>
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_RCC_OscConfig+0xc44>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e01e      	b.n	80019c0 <HAL_RCC_OscConfig+0xc80>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0xe28>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c8:	6011      	str	r1, [r2, #0]
 80019ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fa92 f1a2 	rbit	r1, r2
 80019d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019d8:	6011      	str	r1, [r2, #0]
  return result;
 80019da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d09b      	beq.n	8001934 <HAL_RCC_OscConfig+0xbf4>
 80019fc:	e0ad      	b.n	8001b5a <HAL_RCC_OscConfig+0xe1a>
 80019fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a16:	601a      	str	r2, [r3, #0]
  return result;
 8001a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7fe fef4 	bl	8000820 <HAL_GetTick>
 8001a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe feef 	bl	8000820 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e084      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
 8001a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	601a      	str	r2, [r3, #0]
  return result;
 8001a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0xd4c>
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCC_OscConfig+0xe28>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e01b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd84>
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCC_OscConfig+0xe28>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f107 0214 	add.w	r2, r7, #20
 8001ac8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001acc:	6011      	str	r1, [r2, #0]
 8001ace:	f107 0214 	add.w	r2, r7, #20
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fa92 f1a2 	rbit	r1, r2
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	6011      	str	r1, [r2, #0]
  return result;
 8001ade:	f107 0210 	add.w	r2, r7, #16
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d19e      	bne.n	8001a3e <HAL_RCC_OscConfig+0xcfe>
 8001b00:	e02b      	b.n	8001b5a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e025      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0xe28>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_OscConfig+0xe28>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d111      	bne.n	8001b56 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d108      	bne.n	8001b56 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09e      	sub	sp, #120	; 0x78
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e162      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b90      	ldr	r3, [pc, #576]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b8d      	ldr	r3, [pc, #564]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	498b      	ldr	r1, [pc, #556]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e14a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	497f      	ldr	r1, [pc, #508]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80dc 	beq.w	8001d98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d13c      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xf6>
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xa6>
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e00f      	b.n	8001c32 <HAL_RCC_ClockConfig+0xc6>
 8001c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c24:	663b      	str	r3, [r7, #96]	; 0x60
 8001c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3a:	fa92 f2a2 	rbit	r2, r2
 8001c3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d17b      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0f3      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d13c      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x178>
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x128>
 8001c8e:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e00f      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x148>
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb0:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cbc:	fa92 f2a2 	rbit	r2, r2
 8001cc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d13a      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b2      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x1a0>
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e00d      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1bc>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	2302      	movs	r3, #2
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	2202      	movs	r2, #2
 8001d2a:	61ba      	str	r2, [r7, #24]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	617a      	str	r2, [r7, #20]
  return result;
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e079      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	491a      	ldr	r1, [pc, #104]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fd5a 	bl	8000820 <HAL_GetTick>
 8001d6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7fe fd56 	bl	8000820 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e061      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d214      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e040      	b.n	8001e4a <HAL_RCC_ClockConfig+0x2de>
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_ClockConfig+0x2e8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	491a      	ldr	r1, [pc, #104]	; (8001e54 <HAL_RCC_ClockConfig+0x2e8>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_ClockConfig+0x2e8>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4912      	ldr	r1, [pc, #72]	; (8001e54 <HAL_RCC_ClockConfig+0x2e8>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e0e:	f000 f829 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e12:	4601      	mov	r1, r0
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_RCC_ClockConfig+0x2e8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1c:	22f0      	movs	r2, #240	; 0xf0
 8001e1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	fa92 f2a2 	rbit	r2, r2
 8001e26:	60fa      	str	r2, [r7, #12]
  return result;
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	40d3      	lsrs	r3, r2
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x2ec>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	fa21 f303 	lsr.w	r3, r1, r3
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_RCC_ClockConfig+0x2f0>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x2f4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fc10 	bl	8000668 <HAL_InitTick>
  
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3778      	adds	r7, #120	; 0x78
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	080047e4 	.word	0x080047e4
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x30>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x36>
 8001e92:	e03f      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e96:	623b      	str	r3, [r7, #32]
      break;
 8001e98:	e03f      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ea0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ea4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	fa92 f2a2 	rbit	r2, r2
 8001eac:	607a      	str	r2, [r7, #4]
  return result;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	40d3      	lsrs	r3, r2
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	40d3      	lsrs	r3, r2
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	e007      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	623b      	str	r3, [r7, #32]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	372c      	adds	r7, #44	; 0x2c
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	080047fc 	.word	0x080047fc
 8001f34:	0800480c 	.word	0x0800480c

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f56:	f7ff ffef 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	603a      	str	r2, [r7, #0]
  return result;
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	40d3      	lsrs	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080047f4 	.word	0x080047f4

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f9a:	f7ff ffcd 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fa8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	603a      	str	r2, [r7, #0]
  return result;
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	40d3      	lsrs	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	080047f4 	.word	0x080047f4

08001fd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_GetClockConfig+0x5c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_RCC_GetClockConfig+0x5c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_RCC_GetClockConfig+0x60>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0207 	and.w	r2, r3, #7
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b092      	sub	sp, #72	; 0x48
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80d4 	beq.w	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002060:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10e      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a4a      	ldr	r2, [pc, #296]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002076:	61d3      	str	r3, [r2, #28]
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a41      	ldr	r2, [pc, #260]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fbbd 	bl	8000820 <HAL_GetTick>
 80020a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7fe fbb9 	bl	8000820 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1d6      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8084 	beq.w	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d07c      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	461a      	mov	r2, r3
 8002112:	2301      	movs	r3, #1
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2300      	movs	r3, #0
 8002138:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d04b      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fb69 	bl	8000820 <HAL_GetTick>
 800214e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fb65 	bl	8000820 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e180      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	2302      	movs	r3, #2
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	61fb      	str	r3, [r7, #28]
  return result;
 8002180:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d108      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002196:	4b01      	ldr	r3, [pc, #4]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	e00d      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
 80021a4:	10908100 	.word	0x10908100
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	613a      	str	r2, [r7, #16]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	60fa      	str	r2, [r7, #12]
  return result;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0b7      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021e2:	4b95      	ldr	r3, [pc, #596]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4992      	ldr	r1, [pc, #584]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4a8d      	ldr	r2, [pc, #564]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002214:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f023 0203 	bic.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4985      	ldr	r1, [pc, #532]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002232:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	497e      	ldr	r1, [pc, #504]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4976      	ldr	r1, [pc, #472]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226e:	4b72      	ldr	r3, [pc, #456]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f023 0210 	bic.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	496f      	ldr	r1, [pc, #444]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800228c:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	4967      	ldr	r1, [pc, #412]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f023 0220 	bic.w	r2, r3, #32
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4960      	ldr	r1, [pc, #384]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	4958      	ldr	r1, [pc, #352]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022e6:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4951      	ldr	r1, [pc, #324]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4949      	ldr	r1, [pc, #292]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4942      	ldr	r1, [pc, #264]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	493a      	ldr	r1, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	4933      	ldr	r1, [pc, #204]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	492b      	ldr	r1, [pc, #172]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4924      	ldr	r1, [pc, #144]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	491c      	ldr	r1, [pc, #112]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	4915      	ldr	r1, [pc, #84]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	490d      	ldr	r1, [pc, #52]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	4906      	ldr	r1, [pc, #24]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002430:	4b01      	ldr	r3, [pc, #4]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	e002      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	490b      	ldr	r1, [pc, #44]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002446:	4313      	orrs	r3, r2
 8002448:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	4904      	ldr	r1, [pc, #16]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002464:	4313      	orrs	r3, r2
 8002466:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3748      	adds	r7, #72	; 0x48
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e049      	b.n	800251e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f841 	bl	8002526 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 f9f8 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e04f      	b.n	80025f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <HAL_TIM_Base_Start_IT+0xc4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d018      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_TIM_Base_Start_IT+0xc8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_TIM_Base_Start_IT+0xcc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_TIM_Base_Start_IT+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_TIM_Base_Start_IT+0xd4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x76>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_TIM_Base_Start_IT+0xd8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d115      	bne.n	80025de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_TIM_Base_Start_IT+0xdc>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d015      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0xb4>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d011      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	e008      	b.n	80025f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40013400 	.word	0x40013400
 8002610:	40014000 	.word	0x40014000
 8002614:	40015000 	.word	0x40015000
 8002618:	00010007 	.word	0x00010007

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f905 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8f7 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f908 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8db 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8cd 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8de 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8b1 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8a3 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8b4 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f887 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f879 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f88a 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fd fee2 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f918 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027da:	d10e      	bne.n	80027fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d107      	bne.n	80027fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f90b 	bl	8002a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d10e      	bne.n	8002826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d107      	bne.n	8002826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f838 	bl	8002896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b20      	cmp	r3, #32
 8002832:	d10e      	bne.n	8002852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b20      	cmp	r3, #32
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f06f 0220 	mvn.w	r2, #32
 800284a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f8cb 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d00f      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	; (80029cc <TIM_Base_SetConfig+0x120>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <TIM_Base_SetConfig+0x128>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <TIM_Base_SetConfig+0x12c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <TIM_Base_SetConfig+0x120>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <TIM_Base_SetConfig+0x128>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <TIM_Base_SetConfig+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <TIM_Base_SetConfig+0x134>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <TIM_Base_SetConfig+0x138>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x9a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0x12c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <TIM_Base_SetConfig+0x128>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00f      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <TIM_Base_SetConfig+0x130>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <TIM_Base_SetConfig+0x134>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <TIM_Base_SetConfig+0x138>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0x100>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <TIM_Base_SetConfig+0x12c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40013400 	.word	0x40013400
 80029d8:	40015000 	.word	0x40015000
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e040      	b.n	8002ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fd fdcc 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2224      	movs	r2, #36	; 0x24
 8002a50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8c0 	bl	8002be8 <UART_SetConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa8a 	bl	8002f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fb11 	bl	80030d8 <UART_CheckIdleState>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	f040 8082 	bne.w	8002bde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_UART_Transmit+0x26>
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07a      	b.n	8002be0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Transmit+0x38>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e073      	b.n	8002be0 <HAL_UART_Transmit+0x120>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2221      	movs	r2, #33	; 0x21
 8002b0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0e:	f7fd fe87 	bl	8000820 <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	d108      	bne.n	8002b40 <HAL_UART_Transmit+0x80>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e003      	b.n	8002b48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b50:	e02d      	b.n	8002bae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fb04 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e039      	b.n	8002be0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7e:	b292      	uxth	r2, r2
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3302      	adds	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e008      	b.n	8002b9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b292      	uxth	r2, r2
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1cb      	bne.n	8002b52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2140      	movs	r1, #64	; 0x40
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fad0 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e005      	b.n	8002be0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4bab      	ldr	r3, [pc, #684]	; (8002ec0 <UART_SetConfig+0x2d8>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a99      	ldr	r2, [pc, #612]	; (8002ec4 <UART_SetConfig+0x2dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d120      	bne.n	8002ca6 <UART_SetConfig+0xbe>
 8002c64:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <UART_SetConfig+0x2e0>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d817      	bhi.n	8002ca0 <UART_SetConfig+0xb8>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0x90>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c95 	.word	0x08002c95
 8002c80:	08002c9b 	.word	0x08002c9b
 8002c84:	08002c8f 	.word	0x08002c8f
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e0b5      	b.n	8002dfa <UART_SetConfig+0x212>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e0b2      	b.n	8002dfa <UART_SetConfig+0x212>
 8002c94:	2304      	movs	r3, #4
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e0af      	b.n	8002dfa <UART_SetConfig+0x212>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e0ac      	b.n	8002dfa <UART_SetConfig+0x212>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e0a9      	b.n	8002dfa <UART_SetConfig+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <UART_SetConfig+0x2e4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d124      	bne.n	8002cfa <UART_SetConfig+0x112>
 8002cb0:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <UART_SetConfig+0x2e0>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cbc:	d011      	beq.n	8002ce2 <UART_SetConfig+0xfa>
 8002cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cc2:	d817      	bhi.n	8002cf4 <UART_SetConfig+0x10c>
 8002cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc8:	d011      	beq.n	8002cee <UART_SetConfig+0x106>
 8002cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cce:	d811      	bhi.n	8002cf4 <UART_SetConfig+0x10c>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <UART_SetConfig+0xf4>
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d006      	beq.n	8002ce8 <UART_SetConfig+0x100>
 8002cda:	e00b      	b.n	8002cf4 <UART_SetConfig+0x10c>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	e08b      	b.n	8002dfa <UART_SetConfig+0x212>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	77fb      	strb	r3, [r7, #31]
 8002ce6:	e088      	b.n	8002dfa <UART_SetConfig+0x212>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e085      	b.n	8002dfa <UART_SetConfig+0x212>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e082      	b.n	8002dfa <UART_SetConfig+0x212>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e07f      	b.n	8002dfa <UART_SetConfig+0x212>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a74      	ldr	r2, [pc, #464]	; (8002ed0 <UART_SetConfig+0x2e8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d124      	bne.n	8002d4e <UART_SetConfig+0x166>
 8002d04:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <UART_SetConfig+0x2e0>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d10:	d011      	beq.n	8002d36 <UART_SetConfig+0x14e>
 8002d12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d16:	d817      	bhi.n	8002d48 <UART_SetConfig+0x160>
 8002d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d1c:	d011      	beq.n	8002d42 <UART_SetConfig+0x15a>
 8002d1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d22:	d811      	bhi.n	8002d48 <UART_SetConfig+0x160>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <UART_SetConfig+0x148>
 8002d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2c:	d006      	beq.n	8002d3c <UART_SetConfig+0x154>
 8002d2e:	e00b      	b.n	8002d48 <UART_SetConfig+0x160>
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e061      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d36:	2302      	movs	r3, #2
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e05e      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e05b      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d42:	2308      	movs	r3, #8
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e058      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e055      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <UART_SetConfig+0x2ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d124      	bne.n	8002da2 <UART_SetConfig+0x1ba>
 8002d58:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <UART_SetConfig+0x2e0>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d64:	d011      	beq.n	8002d8a <UART_SetConfig+0x1a2>
 8002d66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d6a:	d817      	bhi.n	8002d9c <UART_SetConfig+0x1b4>
 8002d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d70:	d011      	beq.n	8002d96 <UART_SetConfig+0x1ae>
 8002d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d76:	d811      	bhi.n	8002d9c <UART_SetConfig+0x1b4>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <UART_SetConfig+0x19c>
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d80:	d006      	beq.n	8002d90 <UART_SetConfig+0x1a8>
 8002d82:	e00b      	b.n	8002d9c <UART_SetConfig+0x1b4>
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e037      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	77fb      	strb	r3, [r7, #31]
 8002d8e:	e034      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d90:	2304      	movs	r3, #4
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e031      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d96:	2308      	movs	r3, #8
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e02e      	b.n	8002dfa <UART_SetConfig+0x212>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e02b      	b.n	8002dfa <UART_SetConfig+0x212>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <UART_SetConfig+0x2f0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d124      	bne.n	8002df6 <UART_SetConfig+0x20e>
 8002dac:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <UART_SetConfig+0x2e0>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002db4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db8:	d011      	beq.n	8002dde <UART_SetConfig+0x1f6>
 8002dba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dbe:	d817      	bhi.n	8002df0 <UART_SetConfig+0x208>
 8002dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dc4:	d011      	beq.n	8002dea <UART_SetConfig+0x202>
 8002dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dca:	d811      	bhi.n	8002df0 <UART_SetConfig+0x208>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <UART_SetConfig+0x1f0>
 8002dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd4:	d006      	beq.n	8002de4 <UART_SetConfig+0x1fc>
 8002dd6:	e00b      	b.n	8002df0 <UART_SetConfig+0x208>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e00d      	b.n	8002dfa <UART_SetConfig+0x212>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e00a      	b.n	8002dfa <UART_SetConfig+0x212>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e007      	b.n	8002dfa <UART_SetConfig+0x212>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e004      	b.n	8002dfa <UART_SetConfig+0x212>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e001      	b.n	8002dfa <UART_SetConfig+0x212>
 8002df6:	2310      	movs	r3, #16
 8002df8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	d16d      	bne.n	8002ee0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002e04:	7ffb      	ldrb	r3, [r7, #31]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d827      	bhi.n	8002e5a <UART_SetConfig+0x272>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x228>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e5b 	.word	0x08002e5b
 8002e20:	08002e4b 	.word	0x08002e4b
 8002e24:	08002e5b 	.word	0x08002e5b
 8002e28:	08002e5b 	.word	0x08002e5b
 8002e2c:	08002e5b 	.word	0x08002e5b
 8002e30:	08002e53 	.word	0x08002e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff f88c 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8002e38:	61b8      	str	r0, [r7, #24]
        break;
 8002e3a:	e013      	b.n	8002e64 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f7ff f8aa 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8002e40:	61b8      	str	r0, [r7, #24]
        break;
 8002e42:	e00f      	b.n	8002e64 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <UART_SetConfig+0x2f4>)
 8002e46:	61bb      	str	r3, [r7, #24]
        break;
 8002e48:	e00c      	b.n	8002e64 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7ff f80b 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8002e4e:	61b8      	str	r0, [r7, #24]
        break;
 8002e50:	e008      	b.n	8002e64 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e004      	b.n	8002e64 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77bb      	strb	r3, [r7, #30]
        break;
 8002e62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8086 	beq.w	8002f78 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	005a      	lsls	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d916      	bls.n	8002eb8 <UART_SetConfig+0x2d0>
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d212      	bcs.n	8002eb8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	89fb      	ldrh	r3, [r7, #14]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	89fa      	ldrh	r2, [r7, #14]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e05f      	b.n	8002f78 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77bb      	strb	r3, [r7, #30]
 8002ebc:	e05c      	b.n	8002f78 <UART_SetConfig+0x390>
 8002ebe:	bf00      	nop
 8002ec0:	efff69f3 	.word	0xefff69f3
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40004400 	.word	0x40004400
 8002ed0:	40004800 	.word	0x40004800
 8002ed4:	40004c00 	.word	0x40004c00
 8002ed8:	40005000 	.word	0x40005000
 8002edc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ee0:	7ffb      	ldrb	r3, [r7, #31]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d827      	bhi.n	8002f36 <UART_SetConfig+0x34e>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x304>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f37 	.word	0x08002f37
 8002efc:	08002f27 	.word	0x08002f27
 8002f00:	08002f37 	.word	0x08002f37
 8002f04:	08002f37 	.word	0x08002f37
 8002f08:	08002f37 	.word	0x08002f37
 8002f0c:	08002f2f 	.word	0x08002f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7ff f81e 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8002f14:	61b8      	str	r0, [r7, #24]
        break;
 8002f16:	e013      	b.n	8002f40 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7ff f83c 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	61b8      	str	r0, [r7, #24]
        break;
 8002f1e:	e00f      	b.n	8002f40 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <UART_SetConfig+0x3a8>)
 8002f22:	61bb      	str	r3, [r7, #24]
        break;
 8002f24:	e00c      	b.n	8002f40 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f26:	f7fe ff9d 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8002f2a:	61b8      	str	r0, [r7, #24]
        break;
 8002f2c:	e008      	b.n	8002f40 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f32:	61bb      	str	r3, [r7, #24]
        break;
 8002f34:	e004      	b.n	8002f40 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	085a      	lsrs	r2, r3, #1
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	d908      	bls.n	8002f74 <UART_SetConfig+0x38c>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d204      	bcs.n	8002f74 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	e001      	b.n	8002f78 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f84:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01a      	beq.n	80030aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003092:	d10a      	bne.n	80030aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030e8:	f7fd fb9a 	bl	8000820 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d10e      	bne.n	800311a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f82d 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e023      	b.n	8003162 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b04      	cmp	r3, #4
 8003126:	d10e      	bne.n	8003146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f817 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e00d      	b.n	8003162 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317a:	e05e      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d05a      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7fd fb4c 	bl	8000820 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <UART_WaitOnFlagUntilTimeout+0x30>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11b      	bne.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e043      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02c      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ee:	d124      	bne.n	800323a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003208:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e00f      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d091      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003274:	2b84      	cmp	r3, #132	; 0x84
 8003276:	d005      	beq.n	8003284 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	3303      	adds	r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003284:	68fb      	ldr	r3, [r7, #12]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003296:	f000 fad5 	bl	8003844 <vTaskStartScheduler>
  
  return osOK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}

080032a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <osThreadCreate+0x54>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01c      	beq.n	80032f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685c      	ldr	r4, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691e      	ldr	r6, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ffc8 	bl	8003262 <makeFreeRtosPriority>
 80032d2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	9100      	str	r1, [sp, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4632      	mov	r2, r6
 80032e6:	4629      	mov	r1, r5
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f8ed 	bl	80034c8 <xTaskCreateStatic>
 80032ee:	4603      	mov	r3, r0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e01c      	b.n	800332e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685c      	ldr	r4, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003300:	b29e      	uxth	r6, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffaa 	bl	8003262 <makeFreeRtosPriority>
 800330e:	4602      	mov	r2, r0
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	9200      	str	r2, [sp, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4632      	mov	r2, r6
 800331c:	4629      	mov	r1, r5
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f92e 	bl	8003580 <xTaskCreate>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003338 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <osDelay+0x16>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	e000      	b.n	8003350 <osDelay+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fa43 	bl	80037dc <vTaskDelay>
  
  return osOK;
 8003356:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0208 	add.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f103 0208 	add.w	r2, r3, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 0208 	add.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d103      	bne.n	8003422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e00c      	b.n	800343c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3308      	adds	r3, #8
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e002      	b.n	8003430 <vListInsert+0x2e>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d2f6      	bcs.n	800342a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6852      	ldr	r2, [r2, #4]
 8003494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d103      	bne.n	80034a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08e      	sub	sp, #56	; 0x38
 80034cc:	af04      	add	r7, sp, #16
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCreateStatic+0x46>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61fb      	str	r3, [r7, #28]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800350e:	2354      	movs	r3, #84	; 0x54
 8003510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b54      	cmp	r3, #84	; 0x54
 8003516:	d00a      	beq.n	800352e <xTaskCreateStatic+0x66>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61bb      	str	r3, [r7, #24]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01e      	beq.n	8003572 <xTaskCreateStatic+0xaa>
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01b      	beq.n	8003572 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003542:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800354c:	2300      	movs	r3, #0
 800354e:	9303      	str	r3, [sp, #12]
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f850 	bl	800360a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800356a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356c:	f000 f8cc 	bl	8003708 <prvAddNewTaskToReadyList>
 8003570:	e001      	b.n	8003576 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003576:	697b      	ldr	r3, [r7, #20]
	}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af04      	add	r7, sp, #16
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fec7 	bl	8004328 <pvPortMalloc>
 800359a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035a2:	2054      	movs	r0, #84	; 0x54
 80035a4:	f000 fec0 	bl	8004328 <pvPortMalloc>
 80035a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
 80035b6:	e005      	b.n	80035c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f000 ff79 	bl	80044b0 <vPortFree>
 80035be:	e001      	b.n	80035c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9303      	str	r3, [sp, #12]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f80e 	bl	800360a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035ee:	69f8      	ldr	r0, [r7, #28]
 80035f0:	f000 f88a 	bl	8003708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035f4:	2301      	movs	r3, #1
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e002      	b.n	8003600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003600:	69bb      	ldr	r3, [r7, #24]
	}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003622:	3b01      	subs	r3, #1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f023 0307 	bic.w	r3, r3, #7
 8003630:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <prvInitialiseNewTask+0x48>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	617b      	str	r3, [r7, #20]
}
 800364e:	bf00      	nop
 8003650:	e7fe      	b.n	8003650 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e012      	b.n	800367e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	7819      	ldrb	r1, [r3, #0]
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	3334      	adds	r3, #52	; 0x34
 8003668:	460a      	mov	r2, r1
 800366a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d9e9      	bls.n	8003658 <prvInitialiseNewTask+0x4e>
 8003684:	e000      	b.n	8003688 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003686:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	2b06      	cmp	r3, #6
 8003694:	d901      	bls.n	800369a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003696:	2306      	movs	r3, #6
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2200      	movs	r2, #0
 80036aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	3304      	adds	r3, #4
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe75 	bl	80033a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	3318      	adds	r3, #24
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fe70 	bl	80033a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	f1c3 0207 	rsb	r2, r3, #7
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	69b8      	ldr	r0, [r7, #24]
 80036ea:	f000 fc11 	bl	8003f10 <pxPortInitialiseStack>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003710:	f000 fd28 	bl	8004164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <prvAddNewTaskToReadyList+0xb8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <prvAddNewTaskToReadyList+0xb8>)
 800371c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <prvAddNewTaskToReadyList+0xbc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003726:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <prvAddNewTaskToReadyList+0xbc>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <prvAddNewTaskToReadyList+0xb8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d110      	bne.n	8003756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003734:	f000 fac2 	bl	8003cbc <prvInitialiseTaskLists>
 8003738:	e00d      	b.n	8003756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <prvAddNewTaskToReadyList+0xc0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <prvAddNewTaskToReadyList+0xbc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	429a      	cmp	r2, r3
 800374e:	d802      	bhi.n	8003756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <prvAddNewTaskToReadyList+0xbc>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <prvAddNewTaskToReadyList+0xc4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <prvAddNewTaskToReadyList+0xc4>)
 800375e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <prvAddNewTaskToReadyList+0xc8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <prvAddNewTaskToReadyList+0xc8>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <prvAddNewTaskToReadyList+0xcc>)
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7ff fe16 	bl	80033ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800378e:	f000 fd19 	bl	80041c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <prvAddNewTaskToReadyList+0xc0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvAddNewTaskToReadyList+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d207      	bcs.n	80037b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <prvAddNewTaskToReadyList+0xd0>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000380 	.word	0x20000380
 80037c4:	20000280 	.word	0x20000280
 80037c8:	2000038c 	.word	0x2000038c
 80037cc:	2000039c 	.word	0x2000039c
 80037d0:	20000388 	.word	0x20000388
 80037d4:	20000284 	.word	0x20000284
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d017      	beq.n	800381e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <vTaskDelay+0x60>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <vTaskDelay+0x30>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	60bb      	str	r3, [r7, #8]
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800380c:	f000 f87a 	bl	8003904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003810:	2100      	movs	r1, #0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb16 	bl	8003e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003818:	f000 f882 	bl	8003920 <xTaskResumeAll>
 800381c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <vTaskDelay+0x64>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200003a8 	.word	0x200003a8
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003852:	463a      	mov	r2, r7
 8003854:	1d39      	adds	r1, r7, #4
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcc0 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	460a      	mov	r2, r1
 8003872:	491e      	ldr	r1, [pc, #120]	; (80038ec <vTaskStartScheduler+0xa8>)
 8003874:	481e      	ldr	r0, [pc, #120]	; (80038f0 <vTaskStartScheduler+0xac>)
 8003876:	f7ff fe27 	bl	80034c8 <xTaskCreateStatic>
 800387a:	4603      	mov	r3, r0
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <vTaskStartScheduler+0xb0>)
 800387e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <vTaskStartScheduler+0xb0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e001      	b.n	8003892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d116      	bne.n	80038c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	613b      	str	r3, [r7, #16]
}
 80038aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <vTaskStartScheduler+0xb4>)
 80038ae:	f04f 32ff 	mov.w	r2, #4294967295
 80038b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <vTaskStartScheduler+0xb8>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <vTaskStartScheduler+0xbc>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038c0:	f000 fbae 	bl	8004020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038c4:	e00e      	b.n	80038e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d10a      	bne.n	80038e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60fb      	str	r3, [r7, #12]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <vTaskStartScheduler+0x9e>
}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	080047dc 	.word	0x080047dc
 80038f0:	08003c8d 	.word	0x08003c8d
 80038f4:	200003a4 	.word	0x200003a4
 80038f8:	200003a0 	.word	0x200003a0
 80038fc:	2000038c 	.word	0x2000038c
 8003900:	20000384 	.word	0x20000384

08003904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <vTaskSuspendAll+0x18>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	4a03      	ldr	r2, [pc, #12]	; (800391c <vTaskSuspendAll+0x18>)
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	200003a8 	.word	0x200003a8

08003920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <xTaskResumeAll+0x114>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <xTaskResumeAll+0x2c>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	603b      	str	r3, [r7, #0]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800394c:	f000 fc0a 	bl	8004164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003950:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <xTaskResumeAll+0x114>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3b01      	subs	r3, #1
 8003956:	4a37      	ldr	r2, [pc, #220]	; (8003a34 <xTaskResumeAll+0x114>)
 8003958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <xTaskResumeAll+0x114>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d161      	bne.n	8003a26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003962:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <xTaskResumeAll+0x118>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d05d      	beq.n	8003a26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800396a:	e02e      	b.n	80039ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <xTaskResumeAll+0x11c>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3318      	adds	r3, #24
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fd7b 	bl	8003474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3304      	adds	r3, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fd76 	bl	8003474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <xTaskResumeAll+0x120>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <xTaskResumeAll+0x120>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <xTaskResumeAll+0x124>)
 80039a8:	441a      	add	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7ff fd02 	bl	80033ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <xTaskResumeAll+0x128>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <xTaskResumeAll+0x12c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ca:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <xTaskResumeAll+0x11c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1cc      	bne.n	800396c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039d8:	f000 fa0e 	bl	8003df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <xTaskResumeAll+0x130>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039e8:	f000 f836 	bl	8003a58 <xTaskIncrementTick>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <xTaskResumeAll+0x12c>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f1      	bne.n	80039e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <xTaskResumeAll+0x130>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <xTaskResumeAll+0x12c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <xTaskResumeAll+0x134>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a26:	f000 fbcd 	bl	80041c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200003a8 	.word	0x200003a8
 8003a38:	20000380 	.word	0x20000380
 8003a3c:	20000340 	.word	0x20000340
 8003a40:	20000388 	.word	0x20000388
 8003a44:	20000284 	.word	0x20000284
 8003a48:	20000280 	.word	0x20000280
 8003a4c:	20000394 	.word	0x20000394
 8003a50:	20000390 	.word	0x20000390
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <xTaskIncrementTick+0x150>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 808d 	bne.w	8003b86 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a74:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <xTaskIncrementTick+0x154>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d120      	bne.n	8003ac2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	603b      	str	r3, [r7, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	e7fe      	b.n	8003a9e <xTaskIncrementTick+0x46>
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <xTaskIncrementTick+0x15c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <xTaskIncrementTick+0x15c>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b40      	ldr	r3, [pc, #256]	; (8003bb8 <xTaskIncrementTick+0x160>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a3f      	ldr	r2, [pc, #252]	; (8003bb8 <xTaskIncrementTick+0x160>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	f000 f99b 	bl	8003df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <xTaskIncrementTick+0x164>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d34d      	bcc.n	8003b68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <xTaskIncrementTick+0x82>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xTaskIncrementTick+0x84>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <xTaskIncrementTick+0x164>)
 8003ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae6:	601a      	str	r2, [r3, #0]
					break;
 8003ae8:	e03e      	b.n	8003b68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <xTaskIncrementTick+0x158>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d203      	bcs.n	8003b0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <xTaskIncrementTick+0x164>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6013      	str	r3, [r2, #0]
						break;
 8003b08:	e02e      	b.n	8003b68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fcb0 	bl	8003474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fca7 	bl	8003474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <xTaskIncrementTick+0x168>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <xTaskIncrementTick+0x168>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <xTaskIncrementTick+0x16c>)
 8003b46:	441a      	add	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7ff fc33 	bl	80033ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <xTaskIncrementTick+0x170>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3b4      	bcc.n	8003acc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b66:	e7b1      	b.n	8003acc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <xTaskIncrementTick+0x170>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	4915      	ldr	r1, [pc, #84]	; (8003bc4 <xTaskIncrementTick+0x16c>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d907      	bls.n	8003b90 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e004      	b.n	8003b90 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <xTaskIncrementTick+0x174>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <xTaskIncrementTick+0x174>)
 8003b8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <xTaskIncrementTick+0x178>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b9c:	697b      	ldr	r3, [r7, #20]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200003a8 	.word	0x200003a8
 8003bac:	20000384 	.word	0x20000384
 8003bb0:	20000338 	.word	0x20000338
 8003bb4:	2000033c 	.word	0x2000033c
 8003bb8:	20000398 	.word	0x20000398
 8003bbc:	200003a0 	.word	0x200003a0
 8003bc0:	20000388 	.word	0x20000388
 8003bc4:	20000284 	.word	0x20000284
 8003bc8:	20000280 	.word	0x20000280
 8003bcc:	20000390 	.word	0x20000390
 8003bd0:	20000394 	.word	0x20000394

08003bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <vTaskSwitchContext+0xa4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <vTaskSwitchContext+0xa8>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003be8:	e03f      	b.n	8003c6a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <vTaskSwitchContext+0xa8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <vTaskSwitchContext+0xac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	f1c3 031f 	rsb	r3, r3, #31
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	491f      	ldr	r1, [pc, #124]	; (8003c84 <vTaskSwitchContext+0xb0>)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vTaskSwitchContext+0x5a>
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <vTaskSwitchContext+0xb0>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3308      	adds	r3, #8
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d104      	bne.n	8003c60 <vTaskSwitchContext+0x8c>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <vTaskSwitchContext+0xb4>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200003a8 	.word	0x200003a8
 8003c7c:	20000394 	.word	0x20000394
 8003c80:	20000388 	.word	0x20000388
 8003c84:	20000284 	.word	0x20000284
 8003c88:	20000280 	.word	0x20000280

08003c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c94:	f000 f852 	bl	8003d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <prvIdleTask+0x28>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d9f9      	bls.n	8003c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <prvIdleTask+0x2c>)
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cb0:	e7f0      	b.n	8003c94 <prvIdleTask+0x8>
 8003cb2:	bf00      	nop
 8003cb4:	20000284 	.word	0x20000284
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	e00c      	b.n	8003ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <prvInitialiseTaskLists+0x60>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fb42 	bl	8003360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d9ef      	bls.n	8003cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ce8:	480d      	ldr	r0, [pc, #52]	; (8003d20 <prvInitialiseTaskLists+0x64>)
 8003cea:	f7ff fb39 	bl	8003360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cee:	480d      	ldr	r0, [pc, #52]	; (8003d24 <prvInitialiseTaskLists+0x68>)
 8003cf0:	f7ff fb36 	bl	8003360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf4:	480c      	ldr	r0, [pc, #48]	; (8003d28 <prvInitialiseTaskLists+0x6c>)
 8003cf6:	f7ff fb33 	bl	8003360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cfa:	480c      	ldr	r0, [pc, #48]	; (8003d2c <prvInitialiseTaskLists+0x70>)
 8003cfc:	f7ff fb30 	bl	8003360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d00:	480b      	ldr	r0, [pc, #44]	; (8003d30 <prvInitialiseTaskLists+0x74>)
 8003d02:	f7ff fb2d 	bl	8003360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <prvInitialiseTaskLists+0x78>)
 8003d08:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <prvInitialiseTaskLists+0x64>)
 8003d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <prvInitialiseTaskLists+0x7c>)
 8003d0e:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <prvInitialiseTaskLists+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000284 	.word	0x20000284
 8003d20:	20000310 	.word	0x20000310
 8003d24:	20000324 	.word	0x20000324
 8003d28:	20000340 	.word	0x20000340
 8003d2c:	20000354 	.word	0x20000354
 8003d30:	2000036c 	.word	0x2000036c
 8003d34:	20000338 	.word	0x20000338
 8003d38:	2000033c 	.word	0x2000033c

08003d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d42:	e019      	b.n	8003d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d44:	f000 fa0e 	bl	8004164 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <prvCheckTasksWaitingTermination+0x50>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fb8d 	bl	8003474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <prvCheckTasksWaitingTermination+0x54>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <prvCheckTasksWaitingTermination+0x54>)
 8003d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <prvCheckTasksWaitingTermination+0x58>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <prvCheckTasksWaitingTermination+0x58>)
 8003d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d6e:	f000 fa29 	bl	80041c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f810 	bl	8003d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <prvCheckTasksWaitingTermination+0x58>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e1      	bne.n	8003d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000354 	.word	0x20000354
 8003d90:	20000380 	.word	0x20000380
 8003d94:	20000368 	.word	0x20000368

08003d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb7e 	bl	80044b0 <vPortFree>
				vPortFree( pxTCB );
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb7b 	bl	80044b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dba:	e018      	b.n	8003dee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d103      	bne.n	8003dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fb72 	bl	80044b0 <vPortFree>
	}
 8003dcc:	e00f      	b.n	8003dee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d00a      	beq.n	8003dee <prvDeleteTCB+0x56>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <prvDeleteTCB+0x54>
	}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <prvResetNextTaskUnblockTime+0x44>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <prvResetNextTaskUnblockTime+0x14>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <prvResetNextTaskUnblockTime+0x16>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <prvResetNextTaskUnblockTime+0x48>)
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e1a:	e008      	b.n	8003e2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <prvResetNextTaskUnblockTime+0x44>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <prvResetNextTaskUnblockTime+0x48>)
 8003e2c:	6013      	str	r3, [r2, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000338 	.word	0x20000338
 8003e40:	200003a0 	.word	0x200003a0

08003e44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fb0a 	bl	8003474 <uxListRemove>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d10a      	bne.n	8003e9c <prvAddCurrentTaskToDelayedList+0x58>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	481a      	ldr	r0, [pc, #104]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e96:	f7ff fa90 	bl	80033ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e9a:	e026      	b.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d209      	bcs.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7ff fa9e 	bl	8003402 <vListInsert>
}
 8003ec6:	e010      	b.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7ff fa94 	bl	8003402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d202      	bcs.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000384 	.word	0x20000384
 8003ef8:	20000280 	.word	0x20000280
 8003efc:	20000388 	.word	0x20000388
 8003f00:	2000036c 	.word	0x2000036c
 8003f04:	2000033c 	.word	0x2000033c
 8003f08:	20000338 	.word	0x20000338
 8003f0c:	200003a0 	.word	0x200003a0

08003f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b04      	subs	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b04      	subs	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f40:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <pxPortInitialiseStack+0x64>)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b14      	subs	r3, #20
 8003f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f06f 0202 	mvn.w	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3b20      	subs	r3, #32
 8003f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	08003f79 	.word	0x08003f79

08003f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <prvTaskExitError+0x54>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d00a      	beq.n	8003fa2 <prvTaskExitError+0x2a>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <prvTaskExitError+0x28>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fb6:	bf00      	nop
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0fc      	beq.n	8003fb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <pxCurrentTCBConst2>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	6808      	ldr	r0, [r1, #0]
 8003fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	f380 8809 	msr	PSP, r0
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	4770      	bx	lr
 8003fec:	f3af 8000 	nop.w

08003ff0 <pxCurrentTCBConst2>:
 8003ff0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ff8:	4808      	ldr	r0, [pc, #32]	; (800401c <prvPortStartFirstTask+0x24>)
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	6800      	ldr	r0, [r0, #0]
 8003ffe:	f380 8808 	msr	MSP, r0
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f380 8814 	msr	CONTROL, r0
 800400a:	b662      	cpsie	i
 800400c:	b661      	cpsie	f
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	df00      	svc	0
 8004018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800401a:	bf00      	nop
 800401c:	e000ed08 	.word	0xe000ed08

08004020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004026:	4b46      	ldr	r3, [pc, #280]	; (8004140 <xPortStartScheduler+0x120>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a46      	ldr	r2, [pc, #280]	; (8004144 <xPortStartScheduler+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10a      	bne.n	8004046 <xPortStartScheduler+0x26>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	613b      	str	r3, [r7, #16]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <xPortStartScheduler+0x120>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <xPortStartScheduler+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10a      	bne.n	8004066 <xPortStartScheduler+0x46>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <xPortStartScheduler+0x12c>)
 8004068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	22ff      	movs	r2, #255	; 0xff
 8004076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <xPortStartScheduler+0x130>)
 800408c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <xPortStartScheduler+0x134>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004094:	e009      	b.n	80040aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <xPortStartScheduler+0x134>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3b01      	subs	r3, #1
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <xPortStartScheduler+0x134>)
 800409e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d0ef      	beq.n	8004096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <xPortStartScheduler+0x134>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00a      	beq.n	80040d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040d8:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <xPortStartScheduler+0x134>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <xPortStartScheduler+0x134>)
 80040e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <xPortStartScheduler+0x134>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <xPortStartScheduler+0x134>)
 80040ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <xPortStartScheduler+0x138>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <xPortStartScheduler+0x138>)
 80040fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <xPortStartScheduler+0x138>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a14      	ldr	r2, [pc, #80]	; (8004158 <xPortStartScheduler+0x138>)
 8004108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800410c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800410e:	f000 f8dd 	bl	80042cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <xPortStartScheduler+0x13c>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004118:	f000 f8fc 	bl	8004314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <xPortStartScheduler+0x140>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <xPortStartScheduler+0x140>)
 8004122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004128:	f7ff ff66 	bl	8003ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800412c:	f7ff fd52 	bl	8003bd4 <vTaskSwitchContext>
	prvTaskExitError();
 8004130:	f7ff ff22 	bl	8003f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00
 8004144:	410fc271 	.word	0x410fc271
 8004148:	410fc270 	.word	0x410fc270
 800414c:	e000e400 	.word	0xe000e400
 8004150:	200003ac 	.word	0x200003ac
 8004154:	200003b0 	.word	0x200003b0
 8004158:	e000ed20 	.word	0xe000ed20
 800415c:	2000000c 	.word	0x2000000c
 8004160:	e000ef34 	.word	0xe000ef34

08004164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <vPortEnterCritical+0x58>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <vPortEnterCritical+0x58>)
 8004186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <vPortEnterCritical+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10f      	bne.n	80041b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <vPortEnterCritical+0x5c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	603b      	str	r3, [r7, #0]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vPortEnterCritical+0x4a>
	}
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	2000000c 	.word	0x2000000c
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <vPortExitCritical+0x50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <vPortExitCritical+0x24>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	607b      	str	r3, [r7, #4]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <vPortExitCritical+0x50>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <vPortExitCritical+0x50>)
 80041f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <vPortExitCritical+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <vPortExitCritical+0x42>
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c
	...

08004220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004220:	f3ef 8009 	mrs	r0, PSP
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <pxCurrentTCBConst>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f01e 0f10 	tst.w	lr, #16
 8004230:	bf08      	it	eq
 8004232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	6010      	str	r0, [r2, #0]
 800423c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004244:	f380 8811 	msr	BASEPRI, r0
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f7ff fcc0 	bl	8003bd4 <vTaskSwitchContext>
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f380 8811 	msr	BASEPRI, r0
 800425c:	bc09      	pop	{r0, r3}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004266:	f01e 0f10 	tst.w	lr, #16
 800426a:	bf08      	it	eq
 800426c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004270:	f380 8809 	msr	PSP, r0
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst>:
 8004280:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
}
 80042a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042a2:	f7ff fbd9 	bl	8003a58 <xTaskIncrementTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <SysTick_Handler+0x40>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f383 8811 	msr	BASEPRI, r3
}
 80042be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <vPortSetupTimerInterrupt+0x38>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <vPortSetupTimerInterrupt+0x3c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <vPortSetupTimerInterrupt+0x40>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <vPortSetupTimerInterrupt+0x44>)
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010
 8004304:	e000e018 	.word	0xe000e018
 8004308:	20000000 	.word	0x20000000
 800430c:	10624dd3 	.word	0x10624dd3
 8004310:	e000e014 	.word	0xe000e014

08004314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004324 <vPortEnableVFP+0x10>
 8004318:	6801      	ldr	r1, [r0, #0]
 800431a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800431e:	6001      	str	r1, [r0, #0]
 8004320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004322:	bf00      	nop
 8004324:	e000ed88 	.word	0xe000ed88

08004328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004334:	f7ff fae6 	bl	8003904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <pvPortMalloc+0x174>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004340:	f000 f910 	bl	8004564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004344:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <pvPortMalloc+0x178>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 808e 	bne.w	800446e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01d      	beq.n	8004394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004358:	2208      	movs	r2, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <pvPortMalloc+0x6c>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	617b      	str	r3, [r7, #20]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d069      	beq.n	800446e <pvPortMalloc+0x146>
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <pvPortMalloc+0x17c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d864      	bhi.n	800446e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <pvPortMalloc+0x180>)
 80043a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043a8:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <pvPortMalloc+0x180>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ae:	e004      	b.n	80043ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d903      	bls.n	80043cc <pvPortMalloc+0xa4>
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f1      	bne.n	80043b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <pvPortMalloc+0x174>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d04b      	beq.n	800446e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	4413      	add	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	2308      	movs	r3, #8
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d91f      	bls.n	8004438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <pvPortMalloc+0xf8>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	613b      	str	r3, [r7, #16]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004432:	69b8      	ldr	r0, [r7, #24]
 8004434:	f000 f8f8 	bl	8004628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <pvPortMalloc+0x17c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <pvPortMalloc+0x17c>)
 8004444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <pvPortMalloc+0x17c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <pvPortMalloc+0x184>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d203      	bcs.n	800445a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <pvPortMalloc+0x17c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <pvPortMalloc+0x184>)
 8004458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <pvPortMalloc+0x178>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	431a      	orrs	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800446e:	f7ff fa57 	bl	8003920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <pvPortMalloc+0x16a>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <pvPortMalloc+0x168>
	return pvReturn;
 8004492:	69fb      	ldr	r3, [r7, #28]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000fbc 	.word	0x20000fbc
 80044a0:	20000fc8 	.word	0x20000fc8
 80044a4:	20000fc0 	.word	0x20000fc0
 80044a8:	20000fb4 	.word	0x20000fb4
 80044ac:	20000fc4 	.word	0x20000fc4

080044b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d048      	beq.n	8004554 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044c2:	2308      	movs	r3, #8
 80044c4:	425b      	negs	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <vPortFree+0xac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vPortFree+0x44>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <vPortFree+0x62>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <vPortFree+0xac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d115      	bne.n	8004554 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <vPortFree+0xac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004538:	f7ff f9e4 	bl	8003904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <vPortFree+0xb0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4413      	add	r3, r2
 8004546:	4a06      	ldr	r2, [pc, #24]	; (8004560 <vPortFree+0xb0>)
 8004548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f000 f86c 	bl	8004628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004550:	f7ff f9e6 	bl	8003920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000fc8 	.word	0x20000fc8
 8004560:	20000fc0 	.word	0x20000fc0

08004564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800456a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800456e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <prvHeapInit+0xac>)
 8004572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3307      	adds	r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <prvHeapInit+0xac>)
 8004594:	4413      	add	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <prvHeapInit+0xb0>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <prvHeapInit+0xb0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4413      	add	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045b0:	2208      	movs	r2, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a15      	ldr	r2, [pc, #84]	; (8004618 <prvHeapInit+0xb4>)
 80045c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <prvHeapInit+0xb4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <prvHeapInit+0xb4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <prvHeapInit+0xb4>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <prvHeapInit+0xb8>)
 80045f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <prvHeapInit+0xbc>)
 80045fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <prvHeapInit+0xc0>)
 80045fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	200003b4 	.word	0x200003b4
 8004614:	20000fb4 	.word	0x20000fb4
 8004618:	20000fbc 	.word	0x20000fbc
 800461c:	20000fc4 	.word	0x20000fc4
 8004620:	20000fc0 	.word	0x20000fc0
 8004624:	20000fc8 	.word	0x20000fc8

08004628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004630:	4b28      	ldr	r3, [pc, #160]	; (80046d4 <prvInsertBlockIntoFreeList+0xac>)
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e002      	b.n	800463c <prvInsertBlockIntoFreeList+0x14>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d8f7      	bhi.n	8004636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d108      	bne.n	800466a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	441a      	add	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d118      	bne.n	80046b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d00d      	beq.n	80046a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <prvInsertBlockIntoFreeList+0xb0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e003      	b.n	80046b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d002      	beq.n	80046c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000fb4 	.word	0x20000fb4
 80046d8:	20000fbc 	.word	0x20000fbc

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4d0d      	ldr	r5, [pc, #52]	; (8004714 <__libc_init_array+0x38>)
 80046e0:	4c0d      	ldr	r4, [pc, #52]	; (8004718 <__libc_init_array+0x3c>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	2600      	movs	r6, #0
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	4d0b      	ldr	r5, [pc, #44]	; (800471c <__libc_init_array+0x40>)
 80046ee:	4c0c      	ldr	r4, [pc, #48]	; (8004720 <__libc_init_array+0x44>)
 80046f0:	f000 f820 	bl	8004734 <_init>
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	2600      	movs	r6, #0
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	0800481c 	.word	0x0800481c
 8004718:	0800481c 	.word	0x0800481c
 800471c:	0800481c 	.word	0x0800481c
 8004720:	08004820 	.word	0x08004820

08004724 <memset>:
 8004724:	4402      	add	r2, r0
 8004726:	4603      	mov	r3, r0
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <memset+0xa>
 800472c:	4770      	bx	lr
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <memset+0x4>

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
