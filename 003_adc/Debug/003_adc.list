
003_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003900  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003adc  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007210  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001443  00000000  00000000  0002724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00028690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1ab  00000000  00000000  00029118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087b5  00000000  00000000  000482c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0467  00000000  00000000  00050a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000161c  00000000  00000000  00110f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a80 	.word	0x08003a80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003a80 	.word	0x08003a80

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	0000      	movs	r0, r0
	...

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fa42 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f83c 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f90a 	bl	8000c3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a28:	f000 f898 	bl	8000b5c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000a2c:	4818      	ldr	r0, [pc, #96]	; (8000a90 <main+0x78>)
 8000a2e:	f000 fc99 	bl	8001364 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_VALUE=HAL_ADC_GetValue(&hadc1);
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <main+0x78>)
 8000a34:	f000 fdac 	bl	8001590 <HAL_ADC_GetValue>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <main+0x7c>)
 8000a3e:	801a      	strh	r2, [r3, #0]
	  ADC_VOLTAGE=(3.3*ADC_VALUE)/4095;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <main+0x7c>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd19 	bl	800047c <__aeabi_i2d>
 8000a4a:	a30d      	add	r3, pc, #52	; (adr r3, 8000a80 <main+0x68>)
 8000a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a50:	f7ff fd7e 	bl	8000550 <__aeabi_dmul>
 8000a54:	4602      	mov	r2, r0
 8000a56:	460b      	mov	r3, r1
 8000a58:	4610      	mov	r0, r2
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	a30a      	add	r3, pc, #40	; (adr r3, 8000a88 <main+0x70>)
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	f7ff fe9f 	bl	80007a4 <__aeabi_ddiv>
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff ff81 	bl	8000974 <__aeabi_d2f>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <main+0x80>)
 8000a76:	6013      	str	r3, [r2, #0]
	  ADC_VALUE=HAL_ADC_GetValue(&hadc1);
 8000a78:	e7db      	b.n	8000a32 <main+0x1a>
 8000a7a:	bf00      	nop
 8000a7c:	f3af 8000 	nop.w
 8000a80:	66666666 	.word	0x66666666
 8000a84:	400a6666 	.word	0x400a6666
 8000a88:	00000000 	.word	0x00000000
 8000a8c:	40affe00 	.word	0x40affe00
 8000a90:	20000028 	.word	0x20000028
 8000a94:	20000078 	.word	0x20000078
 8000a98:	2000007c 	.word	0x2000007c

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0a6      	sub	sp, #152	; 0x98
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 ffe0 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2258      	movs	r2, #88	; 0x58
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ffd2 	bl	8003a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ae8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fc7a 	bl	80023f4 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b06:	f000 f901 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fb7a 	bl	8003220 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b32:	f000 f8eb 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fd52 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b4e:	f000 f8dd 	bl	8000d0c <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3798      	adds	r7, #152	; 0x98
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000b80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd8:	4817      	ldr	r0, [pc, #92]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bda:	f000 f9c9 	bl	8000f70 <HAL_ADC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f892 	bl	8000d0c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000bf4:	f000 ffc6 	bl	8001b84 <HAL_ADCEx_MultiModeConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bfe:	f000 f885 	bl	8000d0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_ADC1_Init+0xdc>)
 8000c20:	f000 fcc4 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c2a:	f000 f86f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000028 	.word	0x20000028

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a2a      	ldr	r2, [pc, #168]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_GPIO_Init+0xc4>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f001 fb83 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_GPIO_Init+0xc8>)
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_GPIO_Init+0xcc>)
 8000cd4:	f001 f9ec 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f001 f9dd 	bl	80020b0 <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	10210000 	.word	0x10210000
 8000d08:	48000800 	.word	0x48000800

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f001 f97a 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d80:	d124      	bne.n	8000dcc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f001 f972 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f884 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f002 fdd3 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff fdc9 	bl	8000a18 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e94:	08003ad0 	.word	0x08003ad0
  ldr r2, =_sbss
 8000e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e9c:	20000084 	.word	0x20000084

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x28>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f001 f8c7 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff ff2a 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 f8d1 	bl	8002096 <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f001 f8a7 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000080 	.word	0x20000080

08000f58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000080 	.word	0x20000080

08000f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b09a      	sub	sp, #104	; 0x68
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e1e3      	b.n	8001358 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d176      	bne.n	8001090 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d152      	bne.n	8001050 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fecb 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d13b      	bne.n	8001050 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 ff23 	bl	8001e24 <ADC_Disable>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12f      	bne.n	8001050 <HAL_ADC_Init+0xe0>
 8000ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d12b      	bne.n	8001050 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	f043 0202 	orr.w	r2, r3, #2
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800101a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800102c:	4b92      	ldr	r3, [pc, #584]	; (8001278 <HAL_ADC_Init+0x308>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a92      	ldr	r2, [pc, #584]	; (800127c <HAL_ADC_Init+0x30c>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9a      	lsrs	r2, r3, #18
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001042:	e002      	b.n	800104a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3b01      	subs	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f9      	bne.n	8001044 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800106c:	d110      	bne.n	8001090 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0312 	bic.w	r3, r3, #18
 8001076:	f043 0210 	orr.w	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	f040 8150 	bne.w	800133e <HAL_ADC_Init+0x3ce>
 800109e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 814b 	bne.w	800133e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 8143 	bne.w	800133e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010c0:	f043 0202 	orr.w	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d0:	d004      	beq.n	80010dc <HAL_ADC_Init+0x16c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_ADC_Init+0x310>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_Init+0x170>
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <HAL_ADC_Init+0x314>)
 80010de:	e000      	b.n	80010e2 <HAL_ADC_Init+0x172>
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <HAL_ADC_Init+0x318>)
 80010e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ec:	d102      	bne.n	80010f4 <HAL_ADC_Init+0x184>
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <HAL_ADC_Init+0x310>)
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	e01a      	b.n	800112a <HAL_ADC_Init+0x1ba>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a61      	ldr	r2, [pc, #388]	; (8001280 <HAL_ADC_Init+0x310>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d103      	bne.n	8001106 <HAL_ADC_Init+0x196>
 80010fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e011      	b.n	800112a <HAL_ADC_Init+0x1ba>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_ADC_Init+0x31c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d102      	bne.n	8001116 <HAL_ADC_Init+0x1a6>
 8001110:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <HAL_ADC_Init+0x320>)
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e009      	b.n	800112a <HAL_ADC_Init+0x1ba>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a5d      	ldr	r2, [pc, #372]	; (8001290 <HAL_ADC_Init+0x320>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d102      	bne.n	8001126 <HAL_ADC_Init+0x1b6>
 8001120:	4b5a      	ldr	r3, [pc, #360]	; (800128c <HAL_ADC_Init+0x31c>)
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e001      	b.n	800112a <HAL_ADC_Init+0x1ba>
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_ADC_Init+0x1da>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x1da>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_ADC_Init+0x1dc>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11c      	bne.n	800118a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001150:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d010      	beq.n	8001178 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_ADC_Init+0x202>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x202>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_ADC_Init+0x204>
 8001172:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	431a      	orrs	r2, r3
 8001186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001188:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e5b      	ldrb	r3, [r3, #25]
 800118e:	035b      	lsls	r3, r3, #13
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001194:	2a01      	cmp	r2, #1
 8001196:	d002      	beq.n	800119e <HAL_ADC_Init+0x22e>
 8001198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119c:	e000      	b.n	80011a0 <HAL_ADC_Init+0x230>
 800119e:	2200      	movs	r2, #0
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b0:	4313      	orrs	r3, r2
 80011b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7e5b      	ldrb	r3, [r3, #25]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	3b01      	subs	r3, #1
 80011cc:	045a      	lsls	r2, r3, #17
 80011ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d0:	4313      	orrs	r3, r2
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
 80011d8:	e00d      	b.n	80011f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011e2:	f043 0220 	orr.w	r2, r3, #32
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d054      	beq.n	80012a8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_ADC_Init+0x31c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d004      	beq.n	8001212 <HAL_ADC_Init+0x2a2>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_ADC_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d140      	bne.n	8001294 <HAL_ADC_Init+0x324>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800121a:	d02a      	beq.n	8001272 <HAL_ADC_Init+0x302>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d022      	beq.n	800126c <HAL_ADC_Init+0x2fc>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800122e:	d01a      	beq.n	8001266 <HAL_ADC_Init+0x2f6>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001238:	d012      	beq.n	8001260 <HAL_ADC_Init+0x2f0>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001242:	d00a      	beq.n	800125a <HAL_ADC_Init+0x2ea>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800124c:	d002      	beq.n	8001254 <HAL_ADC_Init+0x2e4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	e023      	b.n	800129c <HAL_ADC_Init+0x32c>
 8001254:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001258:	e020      	b.n	800129c <HAL_ADC_Init+0x32c>
 800125a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800125e:	e01d      	b.n	800129c <HAL_ADC_Init+0x32c>
 8001260:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001264:	e01a      	b.n	800129c <HAL_ADC_Init+0x32c>
 8001266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126a:	e017      	b.n	800129c <HAL_ADC_Init+0x32c>
 800126c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001270:	e014      	b.n	800129c <HAL_ADC_Init+0x32c>
 8001272:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001276:	e011      	b.n	800129c <HAL_ADC_Init+0x32c>
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83
 8001280:	50000100 	.word	0x50000100
 8001284:	50000300 	.word	0x50000300
 8001288:	50000700 	.word	0x50000700
 800128c:	50000400 	.word	0x50000400
 8001290:	50000500 	.word	0x50000500
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012a4:	4313      	orrs	r3, r2
 80012a6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d114      	bne.n	80012e0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0302 	bic.w	r3, r3, #2
 80012c8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7e1b      	ldrb	r3, [r3, #24]
 80012ce:	039a      	lsls	r2, r3, #14
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4313      	orrs	r3, r2
 80012da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012dc:	4313      	orrs	r3, r2
 80012de:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_ADC_Init+0x3f0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012f0:	430b      	orrs	r3, r1
 80012f2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10c      	bne.n	8001316 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f023 010f 	bic.w	r1, r3, #15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	631a      	str	r2, [r3, #48]	; 0x30
 8001314:	e007      	b.n	8001326 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 020f 	bic.w	r2, r2, #15
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f023 0303 	bic.w	r3, r3, #3
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
 800133c:	e00a      	b.n	8001354 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f023 0312 	bic.w	r3, r3, #18
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800134e:	2301      	movs	r3, #1
 8001350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001354:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001358:	4618      	mov	r0, r3
 800135a:	3768      	adds	r7, #104	; 0x68
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	fff0c007 	.word	0xfff0c007

08001364 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 80f9 	bne.w	8001572 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_Start+0x2a>
 800138a:	2302      	movs	r3, #2
 800138c:	e0f4      	b.n	8001578 <HAL_ADC_Start+0x214>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fce6 	bl	8001d68 <ADC_Enable>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 80e0 	bne.w	8001568 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c4:	d004      	beq.n	80013d0 <HAL_ADC_Start+0x6c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <HAL_ADC_Start+0x21c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d106      	bne.n	80013de <HAL_ADC_Start+0x7a>
 80013d0:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <HAL_ADC_Start+0x220>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d010      	beq.n	80013fe <HAL_ADC_Start+0x9a>
 80013dc:	e005      	b.n	80013ea <HAL_ADC_Start+0x86>
 80013de:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_ADC_Start+0x224>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_ADC_Start+0x9a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f2:	d004      	beq.n	80013fe <HAL_ADC_Start+0x9a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a64      	ldr	r2, [pc, #400]	; (800158c <HAL_ADC_Start+0x228>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d115      	bne.n	800142a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d036      	beq.n	8001486 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001420:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001428:	e02d      	b.n	8001486 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800143e:	d004      	beq.n	800144a <HAL_ADC_Start+0xe6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_ADC_Start+0x21c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10a      	bne.n	8001460 <HAL_ADC_Start+0xfc>
 800144a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e008      	b.n	8001472 <HAL_ADC_Start+0x10e>
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_ADC_Start+0x228>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001492:	d106      	bne.n	80014a2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f023 0206 	bic.w	r2, r3, #6
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	221c      	movs	r2, #28
 80014b6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c0:	d004      	beq.n	80014cc <HAL_ADC_Start+0x168>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <HAL_ADC_Start+0x21c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d106      	bne.n	80014da <HAL_ADC_Start+0x176>
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_ADC_Start+0x220>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d03e      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 80014d8:	e005      	b.n	80014e6 <HAL_ADC_Start+0x182>
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_ADC_Start+0x224>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d037      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ee:	d004      	beq.n	80014fa <HAL_ADC_Start+0x196>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_ADC_Start+0x21c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_Start+0x1a4>
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_ADC_Start+0x220>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b05      	cmp	r3, #5
 8001504:	d027      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 8001506:	e005      	b.n	8001514 <HAL_ADC_Start+0x1b0>
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_ADC_Start+0x224>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2b05      	cmp	r3, #5
 8001512:	d020      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d004      	beq.n	8001528 <HAL_ADC_Start+0x1c4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_ADC_Start+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <HAL_ADC_Start+0x1d2>
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_ADC_Start+0x220>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b09      	cmp	r3, #9
 8001532:	d010      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 8001534:	e005      	b.n	8001542 <HAL_ADC_Start+0x1de>
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_ADC_Start+0x224>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2b09      	cmp	r3, #9
 8001540:	d009      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start+0x1f2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_ADC_Start+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10f      	bne.n	8001576 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0204 	orr.w	r2, r2, #4
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	e006      	b.n	8001576 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001570:	e001      	b.n	8001576 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	50000100 	.word	0x50000100
 8001584:	50000300 	.word	0x50000300
 8001588:	50000700 	.word	0x50000700
 800158c:	50000400 	.word	0x50000400

08001590 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b09b      	sub	sp, #108	; 0x6c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x22>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e2cb      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x5ba>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 82af 	bne.w	8001b44 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d81c      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	461a      	mov	r2, r3
 8001602:	231f      	movs	r3, #31
 8001604:	4093      	lsls	r3, r2
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
 8001626:	e063      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d81e      	bhi.n	800166e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	3b1e      	subs	r3, #30
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4019      	ands	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3b1e      	subs	r3, #30
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
 800166c:	e040      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b0e      	cmp	r3, #14
 8001674:	d81e      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3b3c      	subs	r3, #60	; 0x3c
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	3b3c      	subs	r3, #60	; 0x3c
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	e01d      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	3b5a      	subs	r3, #90	; 0x5a
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	3b5a      	subs	r3, #90	; 0x5a
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80e5 	bne.w	80018ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d91c      	bls.n	8001742 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6999      	ldr	r1, [r3, #24]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1e      	subs	r3, #30
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1e      	subs	r3, #30
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	e019      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	3b01      	subs	r3, #1
 8001794:	2b03      	cmp	r3, #3
 8001796:	d84f      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x28c>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017d3 	.word	0x080017d3
 80017a8:	080017f5 	.word	0x080017f5
 80017ac:	08001817 	.word	0x08001817
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b6:	4b9f      	ldr	r3, [pc, #636]	; (8001a34 <HAL_ADC_ConfigChannel+0x488>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	0691      	lsls	r1, r2, #26
 80017c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d0:	e07e      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d8:	4b96      	ldr	r3, [pc, #600]	; (8001a34 <HAL_ADC_ConfigChannel+0x488>)
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	0691      	lsls	r1, r2, #26
 80017e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e4:	430a      	orrs	r2, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f2:	e06d      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017fa:	4b8e      	ldr	r3, [pc, #568]	; (8001a34 <HAL_ADC_ConfigChannel+0x488>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	0691      	lsls	r1, r2, #26
 8001804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001806:	430a      	orrs	r2, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001812:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001814:	e05c      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800181c:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_ADC_ConfigChannel+0x488>)
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	0691      	lsls	r1, r2, #26
 8001826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001828:	430a      	orrs	r2, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001836:	e04b      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	069b      	lsls	r3, r3, #26
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10a      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018c8:	e001      	b.n	80018ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x346>
 80018f0:	2300      	movs	r3, #0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8131 	bne.w	8001b5a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00f      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800191e:	e049      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	409a      	lsls	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b09      	cmp	r3, #9
 8001940:	d91c      	bls.n	800197c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6999      	ldr	r1, [r3, #24]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	3b1b      	subs	r3, #27
 8001954:	2207      	movs	r2, #7
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6898      	ldr	r0, [r3, #8]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1b      	subs	r3, #27
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	e01b      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019bc:	d004      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x41c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_ADC_ConfigChannel+0x48c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x420>
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_ADC_ConfigChannel+0x490>)
 80019ca:	e000      	b.n	80019ce <HAL_ADC_ConfigChannel+0x422>
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_ADC_ConfigChannel+0x494>)
 80019ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d015      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019e8:	2b11      	cmp	r3, #17
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	f040 80ac 	bne.w	8001b5a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80a5 	bne.w	8001b5a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a18:	d102      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x474>
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_ADC_ConfigChannel+0x48c>)
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e023      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x4bc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_ADC_ConfigChannel+0x48c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10c      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x498>
 8001a2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e01a      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x4bc>
 8001a32:	bf00      	nop
 8001a34:	83fff000 	.word	0x83fff000
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	50000300 	.word	0x50000300
 8001a40:	50000700 	.word	0x50000700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d102      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x4a8>
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e009      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x4bc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x4b8>
 8001a5e:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e001      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x4bc>
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4dc>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4dc>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x4de>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d150      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d010      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x504>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x504>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x506>
 8001ab0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d13c      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d11d      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x54e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac6:	d118      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_ADC_ConfigChannel+0x5d0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_ADC_ConfigChannel+0x5d4>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0c9a      	lsrs	r2, r3, #18
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af8:	e02e      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b11      	cmp	r3, #17
 8001b00:	d10b      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x56e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0a:	d106      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b16:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b18:	e01e      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b12      	cmp	r3, #18
 8001b20:	d11a      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2e:	e013      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b42:	e00a      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b58:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	376c      	adds	r7, #108	; 0x6c
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	50000400 	.word	0x50000400
 8001b78:	50000500 	.word	0x50000500
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b099      	sub	sp, #100	; 0x64
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9c:	d102      	bne.n	8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	e01a      	b.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d103      	bne.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	e011      	b.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	e009      	b.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a64      	ldr	r2, [pc, #400]	; (8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bd0:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	e001      	b.n	8001bda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b0      	b.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e0a9      	b.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 808d 	bne.w	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 8086 	bne.w	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c20:	d004      	beq.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c2e:	e000      	b.n	8001c32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c30:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c32:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d040      	beq.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4e:	035b      	lsls	r3, r3, #13
 8001c50:	430b      	orrs	r3, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c56:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d15c      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001c9a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d14b      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ca8:	f023 030f 	bic.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	6811      	ldr	r1, [r2, #0]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	6892      	ldr	r2, [r2, #8]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cbc:	e03c      	b.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d123      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d0c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d112      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d1a:	f023 030f 	bic.w	r3, r3, #15
 8001d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d20:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d22:	e009      	b.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d36:	e000      	b.n	8001d3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d38:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d46:	4618      	mov	r0, r3
 8001d48:	3764      	adds	r7, #100	; 0x64
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	50000100 	.word	0x50000100
 8001d58:	50000400 	.word	0x50000400
 8001d5c:	50000500 	.word	0x50000500
 8001d60:	50000300 	.word	0x50000300
 8001d64:	50000700 	.word	0x50000700

08001d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d108      	bne.n	8001d94 <ADC_Enable+0x2c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <ADC_Enable+0x2c>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <ADC_Enable+0x2e>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d13c      	bne.n	8001e14 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <ADC_Enable+0xb8>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e028      	b.n	8001e16 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dd4:	f7ff f8c0 	bl	8000f58 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dda:	e014      	b.n	8001e06 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ddc:	f7ff f8bc 	bl	8000f58 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d90d      	bls.n	8001e06 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e007      	b.n	8001e16 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d1e3      	bne.n	8001ddc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	8000003f 	.word	0x8000003f

08001e24 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <ADC_Disable+0x2c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <ADC_Disable+0x2c>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <ADC_Disable+0x2e>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 030d 	and.w	r3, r3, #13
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10f      	bne.n	8001e84 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0202 	orr.w	r2, r2, #2
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f86c 	bl	8000f58 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e82:	e022      	b.n	8001eca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0210 	orr.w	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e01c      	b.n	8001eda <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ea0:	f7ff f85a 	bl	8000f58 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d90d      	bls.n	8001eca <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e007      	b.n	8001eda <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d0e3      	beq.n	8001ea0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff47 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff5c 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffb0 	bl	8002004 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	e160      	b.n	8002382 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8152 	beq.w	800237c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00b      	beq.n	80020f8 <HAL_GPIO_Init+0x48>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ec:	2b11      	cmp	r3, #17
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b12      	cmp	r3, #18
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0xea>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b12      	cmp	r3, #18
 8002198:	d123      	bne.n	80021e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80ac 	beq.w	800237c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <HAL_GPIO_Init+0x2f0>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a5d      	ldr	r2, [pc, #372]	; (80023a0 <HAL_GPIO_Init+0x2f0>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_GPIO_Init+0x2f0>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800223c:	4a59      	ldr	r2, [pc, #356]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002266:	d025      	beq.n	80022b4 <HAL_GPIO_Init+0x204>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a4f      	ldr	r2, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01f      	beq.n	80022b0 <HAL_GPIO_Init+0x200>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_GPIO_Init+0x2fc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d019      	beq.n	80022ac <HAL_GPIO_Init+0x1fc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x300>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_GPIO_Init+0x1f8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00d      	beq.n	80022a4 <HAL_GPIO_Init+0x1f4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_GPIO_Init+0x308>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <HAL_GPIO_Init+0x1f0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4a      	ldr	r2, [pc, #296]	; (80023bc <HAL_GPIO_Init+0x30c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_GPIO_Init+0x1ec>
 8002298:	2306      	movs	r3, #6
 800229a:	e00c      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 800229c:	2307      	movs	r3, #7
 800229e:	e00a      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022a0:	2305      	movs	r3, #5
 80022a2:	e008      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e006      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022a8:	2303      	movs	r3, #3
 80022aa:	e004      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e002      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_GPIO_Init+0x206>
 80022b4:	2300      	movs	r3, #0
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	f002 0203 	and.w	r2, r2, #3
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	4093      	lsls	r3, r2
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c6:	4937      	ldr	r1, [pc, #220]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_GPIO_Init+0x310>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_GPIO_Init+0x310>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_GPIO_Init+0x310>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002322:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_GPIO_Init+0x310>)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_GPIO_Init+0x310>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_GPIO_Init+0x310>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_GPIO_Init+0x310>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_GPIO_Init+0x310>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f ae97 	bne.w	80020c0 <HAL_GPIO_Init+0x10>
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	48000400 	.word	0x48000400
 80023ac:	48000800 	.word	0x48000800
 80023b0:	48000c00 	.word	0x48000c00
 80023b4:	48001000 	.word	0x48001000
 80023b8:	48001400 	.word	0x48001400
 80023bc:	48001800 	.word	0x48001800
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	f000 bf01 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8160 	beq.w	80026de <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800241e:	4bae      	ldr	r3, [pc, #696]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242a:	4bab      	ldr	r3, [pc, #684]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d159      	bne.n	80024ea <HAL_RCC_OscConfig+0xf6>
 8002436:	4ba8      	ldr	r3, [pc, #672]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d152      	bne.n	80024ea <HAL_RCC_OscConfig+0xf6>
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002458:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x82>
 8002470:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0xae>
 8002476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800248a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002492:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80024aa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80024b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8102 	beq.w	80026dc <HAL_RCC_OscConfig+0x2e8>
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80fc 	bne.w	80026dc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f000 be93 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x110>
 80024f6:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a77      	ldr	r2, [pc, #476]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e030      	b.n	8002566 <HAL_RCC_OscConfig+0x172>
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x134>
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01e      	b.n	8002566 <HAL_RCC_OscConfig+0x172>
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x15a>
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 800253a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a64      	ldr	r2, [pc, #400]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x172>
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a61      	ldr	r2, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d059      	beq.n	8002624 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fcf2 	bl	8000f58 <HAL_GetTick>
 8002574:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257a:	f7fe fced 	bl	8000f58 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d902      	bls.n	8002590 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	f000 be40 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002594:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80025a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1ce>
 80025bc:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1fa>
 80025c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80025f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ab      	beq.n	800257a <HAL_RCC_OscConfig+0x186>
 8002622:	e05c      	b.n	80026de <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fc98 	bl	8000f58 <HAL_GetTick>
 8002628:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262e:	f7fe fc93 	bl	8000f58 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d902      	bls.n	8002644 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	f000 bde6 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HAL_RCC_OscConfig+0x282>
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ae>
 8002676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800267a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800268a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_RCC_OscConfig+0x2e4>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80026aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80026b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ab      	bne.n	800262e <HAL_RCC_OscConfig+0x23a>
 80026d6:	e002      	b.n	80026de <HAL_RCC_OscConfig+0x2ea>
 80026d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8170 	beq.w	80029ce <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026ee:	4bd0      	ldr	r3, [pc, #832]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026fa:	4bcd      	ldr	r3, [pc, #820]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b08      	cmp	r3, #8
 8002704:	d16d      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3ee>
 8002706:	4bca      	ldr	r3, [pc, #808]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800270e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002712:	d166      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3ee>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002726:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x350>
 800273e:	4bbc      	ldr	r3, [pc, #752]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x378>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800275c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002768:	4bb1      	ldr	r3, [pc, #708]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002772:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800277e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_RCC_OscConfig+0x3ba>
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d002      	beq.n	80027ae <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f000 bd31 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4ba0      	ldr	r3, [pc, #640]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	21f8      	movs	r1, #248	; 0xf8
 80027be:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80027c6:	fa91 f1a1 	rbit	r1, r1
 80027ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80027ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027d2:	fab1 f181 	clz	r1, r1
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	408b      	lsls	r3, r1
 80027da:	4995      	ldr	r1, [pc, #596]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e0:	e0f5      	b.n	80029ce <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8085 	beq.w	80028f8 <HAL_RCC_OscConfig+0x504>
 80027ee:	2301      	movs	r3, #1
 80027f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002800:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800280e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	461a      	mov	r2, r3
 8002816:	2301      	movs	r3, #1
 8002818:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fb9d 	bl	8000f58 <HAL_GetTick>
 800281e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fb98 	bl	8000f58 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d902      	bls.n	800283a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	f000 bceb 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800284c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x476>
 8002864:	4b72      	ldr	r3, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e013      	b.n	8002892 <HAL_RCC_OscConfig+0x49e>
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002882:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2202      	movs	r2, #2
 8002894:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002898:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80028a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0af      	beq.n	8002824 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	21f8      	movs	r1, #248	; 0xf8
 80028d4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80028dc:	fa91 f1a1 	rbit	r1, r1
 80028e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80028e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028e8:	fab1 f181 	clz	r1, r1
 80028ec:	b2c9      	uxtb	r1, r1
 80028ee:	408b      	lsls	r3, r1
 80028f0:	494f      	ldr	r1, [pc, #316]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
 80028f6:	e06a      	b.n	80029ce <HAL_RCC_OscConfig+0x5da>
 80028f8:	2301      	movs	r3, #1
 80028fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800290a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	461a      	mov	r2, r3
 8002920:	2300      	movs	r3, #0
 8002922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fb18 	bl	8000f58 <HAL_GetTick>
 8002928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe fb13 	bl	8000f58 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	f000 bc66 	b.w	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_OscConfig+0x580>
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e013      	b.n	800299c <HAL_RCC_OscConfig+0x5a8>
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800298c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_OscConfig+0x63c>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80029ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f002 021f 	and.w	r2, r2, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1af      	bne.n	800292e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80da 	beq.w	8002b92 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d069      	beq.n	8002abc <HAL_RCC_OscConfig+0x6c8>
 80029e8:	2301      	movs	r3, #1
 80029ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80029fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_OscConfig+0x640>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe faa1 	bl	8000f58 <HAL_GetTick>
 8002a16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e00d      	b.n	8002a38 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fa9c 	bl	8000f58 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d905      	bls.n	8002a38 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e3ef      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	10908120 	.word	0x10908120
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a50:	2202      	movs	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7c:	4ba4      	ldr	r3, [pc, #656]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a84:	2102      	movs	r1, #2
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f1a3 	rbit	r1, r3
 8002a92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a96:	6019      	str	r1, [r3, #0]
  return result;
 8002a98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0b0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x628>
 8002aba:	e06a      	b.n	8002b92 <HAL_RCC_OscConfig+0x79e>
 8002abc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ad2:	601a      	str	r2, [r3, #0]
  return result;
 8002ad4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ad8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x920>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2300      	movs	r3, #0
 8002aec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fa33 	bl	8000f58 <HAL_GetTick>
 8002af2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af6:	e009      	b.n	8002b0c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe fa2e 	bl	8000f58 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e381      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002b0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b40:	2202      	movs	r2, #2
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b6e      	ldr	r3, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	6019      	str	r1, [r3, #0]
 8002b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f1a3 	rbit	r1, r3
 8002b6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b6e:	6019      	str	r1, [r3, #0]
  return result;
 8002b70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1b2      	bne.n	8002af8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8157 	beq.w	8002e50 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d112      	bne.n	8002bda <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a55      	ldr	r2, [pc, #340]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	61d3      	str	r3, [r2, #28]
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCC_OscConfig+0x924>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCC_OscConfig+0x924>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x924>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe f9b1 	bl	8000f58 <HAL_GetTick>
 8002bf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	e009      	b.n	8002c10 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe f9ac 	bl	8000f58 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e2ff      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x924>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x840>
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6213      	str	r3, [r2, #32]
 8002c32:	e02f      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a0>
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x864>
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a0>
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x888>
 8002c62:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a0>
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002c8e:	f023 0304 	bic.w	r3, r3, #4
 8002c92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06a      	beq.n	8002d74 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe f95b 	bl	8000f58 <HAL_GetTick>
 8002ca2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe f956 	bl	8000f58 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e2a7      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002cc0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cee:	601a      	str	r2, [r3, #0]
  return result;
 8002cf0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cf4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d108      	bne.n	8002d1c <HAL_RCC_OscConfig+0x928>
 8002d0a:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <HAL_RCC_OscConfig+0x91c>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	e013      	b.n	8002d38 <HAL_RCC_OscConfig+0x944>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	10908120 	.word	0x10908120
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d20:	2202      	movs	r2, #2
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4bc0      	ldr	r3, [pc, #768]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	6011      	str	r1, [r2, #0]
 8002d40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	fa92 f1a2 	rbit	r1, r2
 8002d4a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d4e:	6011      	str	r1, [r2, #0]
  return result;
 8002d50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d09a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x8b4>
 8002d72:	e063      	b.n	8002e3c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d74:	f7fe f8f0 	bl	8000f58 <HAL_GetTick>
 8002d78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	e00b      	b.n	8002d96 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe f8eb 	bl	8000f58 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e23c      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002d96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002db2:	2202      	movs	r2, #2
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dc4:	601a      	str	r2, [r3, #0]
  return result;
 8002dc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x9f2>
 8002de0:	4b95      	ldr	r3, [pc, #596]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	e00d      	b.n	8002e02 <HAL_RCC_OscConfig+0xa0e>
 8002de6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	4b8e      	ldr	r3, [pc, #568]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e06:	2102      	movs	r1, #2
 8002e08:	6011      	str	r1, [r2, #0]
 8002e0a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fa92 f1a2 	rbit	r1, r2
 8002e14:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e18:	6011      	str	r1, [r2, #0]
  return result;
 8002e1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1a0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b7c      	ldr	r3, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a7b      	ldr	r2, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 81d9 	beq.w	800320e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f000 81a6 	beq.w	80031b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 811e 	bne.w	80030b2 <HAL_RCC_OscConfig+0xcbe>
 8002e76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e8e:	601a      	str	r2, [r3, #0]
  return result;
 8002e90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe f854 	bl	8000f58 <HAL_GetTick>
 8002eb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe f84f 	bl	8000f58 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1a2      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002eca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ee2:	601a      	str	r2, [r3, #0]
  return result;
 8002ee4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0xb10>
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e01b      	b.n	8002f3c <HAL_RCC_OscConfig+0xb48>
 8002f04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d19e      	bne.n	8002eb6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f023 020f 	bic.w	r2, r3, #15
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	492c      	ldr	r1, [pc, #176]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a19      	ldr	r1, [r3, #32]
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fc0:	601a      	str	r2, [r3, #0]
  return result;
 8002fc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fc6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fd ffbb 	bl	8000f58 <HAL_GetTick>
 8002fe2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe6:	e009      	b.n	8002ffc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fd ffb6 	bl	8000f58 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e109      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8002ffc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fa93 f2a3 	rbit	r2, r3
 8003010:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003014:	601a      	str	r2, [r3, #0]
  return result;
 8003016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800301a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0xc48>
 8003030:	4b01      	ldr	r3, [pc, #4]	; (8003038 <HAL_RCC_OscConfig+0xc44>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	e01e      	b.n	8003074 <HAL_RCC_OscConfig+0xc80>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fa93 f2a3 	rbit	r2, r3
 8003050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0xe28>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003078:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800307c:	6011      	str	r1, [r2, #0]
 800307e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	fa92 f1a2 	rbit	r1, r2
 8003088:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800308c:	6011      	str	r1, [r2, #0]
  return result;
 800308e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d09b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xbf4>
 80030b0:	e0ad      	b.n	800320e <HAL_RCC_OscConfig+0xe1a>
 80030b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ca:	601a      	str	r2, [r3, #0]
  return result;
 80030cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	461a      	mov	r2, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fd ff36 	bl	8000f58 <HAL_GetTick>
 80030ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	e009      	b.n	8003106 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fd ff31 	bl	8000f58 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e084      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
 8003106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800310a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800311e:	601a      	str	r2, [r3, #0]
  return result;
 8003120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003124:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_RCC_OscConfig+0xd4c>
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_RCC_OscConfig+0xe28>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e01b      	b.n	8003178 <HAL_RCC_OscConfig+0xd84>
 8003140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	fa93 f2a3 	rbit	r2, r3
 8003154:	f107 0320 	add.w	r3, r7, #32
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f107 0318 	add.w	r3, r7, #24
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0xe28>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f107 0214 	add.w	r2, r7, #20
 800317c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	f107 0214 	add.w	r2, r7, #20
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fa92 f1a2 	rbit	r1, r2
 800318c:	f107 0210 	add.w	r2, r7, #16
 8003190:	6011      	str	r1, [r2, #0]
  return result;
 8003192:	f107 0210 	add.w	r2, r7, #16
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d19e      	bne.n	80030f2 <HAL_RCC_OscConfig+0xcfe>
 80031b4:	e02b      	b.n	800320e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e025      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_RCC_OscConfig+0xe28>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_RCC_OscConfig+0xe28>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031d8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d111      	bne.n	800320a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d108      	bne.n	800320a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b09e      	sub	sp, #120	; 0x78
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e162      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b8d      	ldr	r3, [pc, #564]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	498b      	ldr	r1, [pc, #556]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e14a      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	497f      	ldr	r1, [pc, #508]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80dc 	beq.w	800344c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d13c      	bne.n	8003316 <HAL_RCC_ClockConfig+0xf6>
 800329c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xa6>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e00f      	b.n	80032e6 <HAL_RCC_ClockConfig+0xc6>
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	667b      	str	r3, [r7, #100]	; 0x64
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	663b      	str	r3, [r7, #96]	; 0x60
 80032da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d17b      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0f3      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d13c      	bne.n	8003398 <HAL_RCC_ClockConfig+0x178>
 800331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_RCC_ClockConfig+0x128>
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e00f      	b.n	8003368 <HAL_RCC_ClockConfig+0x148>
 8003348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
 800335c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336c:	63ba      	str	r2, [r7, #56]	; 0x38
 800336e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f042 0220 	orr.w	r2, r2, #32
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f002 021f 	and.w	r2, r2, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d13a      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b2      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
 8003398:	2302      	movs	r3, #2
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e00d      	b.n	80033dc <HAL_RCC_ClockConfig+0x1bc>
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	2302      	movs	r3, #2
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2202      	movs	r2, #2
 80033de:	61ba      	str	r2, [r7, #24]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	617a      	str	r2, [r7, #20]
  return result;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e079      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	491a      	ldr	r1, [pc, #104]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fd fd9c 	bl	8000f58 <HAL_GetTick>
 8003420:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd fd98 	bl	8000f58 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e061      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d214      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4906      	ldr	r1, [pc, #24]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e040      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
 800347c:	40022000 	.word	0x40022000
 8003480:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4912      	ldr	r1, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034c2:	f000 f829 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d0:	22f0      	movs	r2, #240	; 0xf0
 80034d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	fa92 f2a2 	rbit	r2, r2
 80034da:	60fa      	str	r2, [r7, #12]
  return result;
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	40d3      	lsrs	r3, r2
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x2ec>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	fa21 f303 	lsr.w	r3, r1, r3
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCC_ClockConfig+0x2f0>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCC_ClockConfig+0x2f4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fcea 	bl	8000ed0 <HAL_InitTick>
  
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3778      	adds	r7, #120	; 0x78
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	08003a98 	.word	0x08003a98
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x30>
 8003542:	2b08      	cmp	r3, #8
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x36>
 8003546:	e03f      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800354a:	623b      	str	r3, [r7, #32]
      break;
 800354c:	e03f      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003554:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003558:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	fa92 f2a2 	rbit	r2, r2
 8003560:	607a      	str	r2, [r7, #4]
  return result;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	40d3      	lsrs	r3, r2
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	220f      	movs	r2, #15
 800357c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	60fa      	str	r2, [r7, #12]
  return result;
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	40d3      	lsrs	r3, r2
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	e007      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ca:	623b      	str	r3, [r7, #32]
      break;
 80035cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	372c      	adds	r7, #44	; 0x2c
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40021000 	.word	0x40021000
 80035e0:	007a1200 	.word	0x007a1200
 80035e4:	08003aa8 	.word	0x08003aa8
 80035e8:	08003ab8 	.word	0x08003ab8

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b092      	sub	sp, #72	; 0x48
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80d4 	beq.w	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10e      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fd fc81 	bl	8000f58 <HAL_GetTick>
 8003656:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd fc7d 	bl	8000f58 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b64      	cmp	r3, #100	; 0x64
 8003666:	d901      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1d6      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8084 	beq.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003694:	429a      	cmp	r2, r3
 8003696:	d07c      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	461a      	mov	r2, r3
 80036c2:	2301      	movs	r3, #1
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fd fc2d 	bl	8000f58 <HAL_GetTick>
 80036fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fd fc29 	bl	8000f58 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e180      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003718:	2302      	movs	r3, #2
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	61fb      	str	r3, [r7, #28]
  return result;
 8003730:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d108      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003746:	4b01      	ldr	r3, [pc, #4]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	e00d      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	10908100 	.word	0x10908100
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	4ba0      	ldr	r3, [pc, #640]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	613a      	str	r2, [r7, #16]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	60fa      	str	r2, [r7, #12]
  return result;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0b7      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003792:	4b95      	ldr	r3, [pc, #596]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4992      	ldr	r1, [pc, #584]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4a8d      	ldr	r2, [pc, #564]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4985      	ldr	r1, [pc, #532]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e2:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	497e      	ldr	r1, [pc, #504]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003800:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	4976      	ldr	r1, [pc, #472]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f023 0210 	bic.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	496f      	ldr	r1, [pc, #444]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	4967      	ldr	r1, [pc, #412]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f023 0220 	bic.w	r2, r3, #32
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4960      	ldr	r1, [pc, #384]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003878:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4958      	ldr	r1, [pc, #352]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003896:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4951      	ldr	r1, [pc, #324]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4949      	ldr	r1, [pc, #292]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038d2:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4942      	ldr	r1, [pc, #264]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038f0:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	493a      	ldr	r1, [pc, #232]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	4933      	ldr	r1, [pc, #204]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	492b      	ldr	r1, [pc, #172]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4924      	ldr	r1, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	491c      	ldr	r1, [pc, #112]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	4915      	ldr	r1, [pc, #84]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	490d      	ldr	r1, [pc, #52]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	4906      	ldr	r1, [pc, #24]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f4:	490b      	ldr	r1, [pc, #44]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3748      	adds	r7, #72	; 0x48
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	4d0d      	ldr	r5, [pc, #52]	; (8003a60 <__libc_init_array+0x38>)
 8003a2c:	4c0d      	ldr	r4, [pc, #52]	; (8003a64 <__libc_init_array+0x3c>)
 8003a2e:	1b64      	subs	r4, r4, r5
 8003a30:	10a4      	asrs	r4, r4, #2
 8003a32:	2600      	movs	r6, #0
 8003a34:	42a6      	cmp	r6, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	4d0b      	ldr	r5, [pc, #44]	; (8003a68 <__libc_init_array+0x40>)
 8003a3a:	4c0c      	ldr	r4, [pc, #48]	; (8003a6c <__libc_init_array+0x44>)
 8003a3c:	f000 f820 	bl	8003a80 <_init>
 8003a40:	1b64      	subs	r4, r4, r5
 8003a42:	10a4      	asrs	r4, r4, #2
 8003a44:	2600      	movs	r6, #0
 8003a46:	42a6      	cmp	r6, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a50:	4798      	blx	r3
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5a:	4798      	blx	r3
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	08003ac8 	.word	0x08003ac8
 8003a64:	08003ac8 	.word	0x08003ac8
 8003a68:	08003ac8 	.word	0x08003ac8
 8003a6c:	08003acc 	.word	0x08003acc

08003a70 <memset>:
 8003a70:	4402      	add	r2, r0
 8003a72:	4603      	mov	r3, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
