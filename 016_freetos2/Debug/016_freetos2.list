
016_freetos2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d4c  08005d4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005d4c  08005d4c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d4c  08005d4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  20000074  08005dc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000112c  08005dc8  0002112c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015495  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fec  00000000  00000000  00035539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023504  00000000  00000000  0003a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b77  00000000  00000000  0005dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b61  00000000  00000000  0007175b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001452bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  00145310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bc8 	.word	0x08005bc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005bc8 	.word	0x08005bc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000090 	.word	0x20000090
 80002b0:	200000e4 	.word	0x200000e4

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b08e      	sub	sp, #56	; 0x38
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fb71 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f833 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8bf 	bl	8000444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c6:	f000 f88d 	bl	80003e4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <main+0x64>)
 80002cc:	f107 041c 	add.w	r4, r7, #28
 80002d0:	461d      	mov	r5, r3
 80002d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 f843 	bl	8003370 <osThreadCreate>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <main+0x68>)
 80002ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <main+0x6c>)
 80002f2:	463c      	mov	r4, r7
 80002f4:	461d      	mov	r5, r3
 80002f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000302:	463b      	mov	r3, r7
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 f832 	bl	8003370 <osThreadCreate>
 800030c:	4603      	mov	r3, r0
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <main+0x70>)
 8000310:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000312:	f003 f826 	bl	8003362 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000316:	e7fe      	b.n	8000316 <main+0x62>
 8000318:	08005bf8 	.word	0x08005bf8
 800031c:	20001040 	.word	0x20001040
 8000320:	08005c14 	.word	0x08005c14
 8000324:	20001044 	.word	0x20001044

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b0a6      	sub	sp, #152	; 0x98
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fc72 	bl	8004c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2258      	movs	r2, #88	; 0x58
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fc64 	bl	8004c20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000358:	2301      	movs	r3, #1
 800035a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000360:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000374:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fdc4 	bl	8000f14 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f917 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003b0:	2102      	movs	r1, #2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fcc4 	bl	8001d40 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003be:	f000 f901 	bl	80005c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 ff1f 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003d8:	f000 f8f4 	bl	80005c4 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3798      	adds	r7, #152	; 0x98
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <MX_USART2_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART2_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000428:	f002 fbe6 	bl	8002bf8 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 f8c7 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20001048 	.word	0x20001048
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a2a      	ldr	r2, [pc, #168]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a24      	ldr	r2, [pc, #144]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_GPIO_Init+0xc4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a18      	ldr	r2, [pc, #96]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2120      	movs	r1, #32
 80004be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c2:	f000 fd0f 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0xc8>)
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_GPIO_Init+0xcc>)
 80004dc:	f000 fb78 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004e0:	2320      	movs	r3, #32
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 fb69 	bl	8000bd0 <HAL_GPIO_Init>

}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	10210000 	.word	0x10210000
 8000510:	48000800 	.word	0x48000800

08000514 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf ("default\n");
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <StartDefaultTask+0x18>)
 800051e:	f004 fc0d 	bl	8004d3c <puts>
    osDelay(2000);
 8000522:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000526:	f002 ff6f 	bl	8003408 <osDelay>
	printf ("default\n");
 800052a:	e7f7      	b.n	800051c <StartDefaultTask+0x8>
 800052c:	08005c30 	.word	0x08005c30

08000530 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		printf ("Task2 = %d\n", indx++);
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <StartTask02+0x5c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	b2d1      	uxtb	r1, r2
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <StartTask02+0x5c>)
 8000542:	7011      	strb	r1, [r2, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <StartTask02+0x60>)
 8000548:	f004 fb72 	bl	8004c30 <iprintf>
	     osDelay(2000);
 800054c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000550:	f002 ff5a 	bl	8003408 <osDelay>

		if (indx==4)
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <StartTask02+0x5c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b04      	cmp	r3, #4
 800055a:	d107      	bne.n	800056c <StartTask02+0x3c>
		{
	           printf ("suspending DefaultTask\n");
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <StartTask02+0x64>)
 800055e:	f004 fbed 	bl	8004d3c <puts>
                 osThreadSuspend(defaultTaskHandle);
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <StartTask02+0x68>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f002 ff62 	bl	8003430 <osThreadSuspend>

		}
		if (indx ==7)
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <StartTask02+0x5c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b07      	cmp	r3, #7
 8000572:	d107      	bne.n	8000584 <StartTask02+0x54>
		{
		   printf ("Resuming DefaultTask\n");
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <StartTask02+0x6c>)
 8000576:	f004 fbe1 	bl	8004d3c <puts>
		   osThreadResume(defaultTaskHandle);
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <StartTask02+0x68>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f002 ff62 	bl	8003448 <osThreadResume>
	        }
    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f002 ff3f 	bl	8003408 <osDelay>
		printf ("Task2 = %d\n", indx++);
 800058a:	e7d5      	b.n	8000538 <StartTask02+0x8>
 800058c:	200002e4 	.word	0x200002e4
 8000590:	08005c38 	.word	0x08005c38
 8000594:	08005c44 	.word	0x08005c44
 8000598:	20001040 	.word	0x20001040
 800059c:	08005c5c 	.word	0x08005c5c

080005a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d101      	bne.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005b2:	f000 fa0b 	bl	80009cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40012c00 	.word	0x40012c00

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_MspInit+0x4c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <HAL_MspInit+0x4c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x4c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_MspInit+0x4c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_MspInit+0x4c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x4c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	210f      	movs	r1, #15
 800060a:	f06f 0001 	mvn.w	r0, #1
 800060e:	f000 fab5 	bl	8000b7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_UART_MspInit+0x7c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d128      	bne.n	8000694 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_UART_MspInit+0x80>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000672:	230c      	movs	r3, #12
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000682:	2307      	movs	r3, #7
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fa9e 	bl	8000bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40004400 	.word	0x40004400
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	2019      	movs	r0, #25
 80006ba:	f000 fa5f 	bl	8000b7c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006be:	2019      	movs	r0, #25
 80006c0:	f000 fa78 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_InitTick+0x9c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_InitTick+0x9c>)
 80006ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_InitTick+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006dc:	f107 0210 	add.w	r2, r7, #16
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd60 	bl	80021ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006ec:	f001 fd3c 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80006f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <HAL_InitTick+0xa0>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	0c9b      	lsrs	r3, r3, #18
 80006fc:	3b01      	subs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_InitTick+0xa4>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <HAL_InitTick+0xa8>)
 8000704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_InitTick+0xa4>)
 8000708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_InitTick+0xa4>)
 8000710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000712:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_InitTick+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_InitTick+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <HAL_InitTick+0xa4>)
 8000722:	f001 ff93 	bl	800264c <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_InitTick+0xa4>)
 800072e:	f001 ffef 	bl	8002710 <HAL_TIM_Base_Start_IT>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3730      	adds	r7, #48	; 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	431bde83 	.word	0x431bde83
 8000748:	200010cc 	.word	0x200010cc
 800074c:	40012c00 	.word	0x40012c00

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000782:	f002 f835 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200010cc 	.word	0x200010cc

08000790 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ITM_SendChar+0x48>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <ITM_SendChar+0x48>)
 80007a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <ITM_SendChar+0x4c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <ITM_SendChar+0x4c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007b2:	bf00      	nop
 80007b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f8      	beq.n	80007b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000edfc 	.word	0xe000edfc
 80007dc:	e0000e00 	.word	0xe0000e00

080007e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
	}

return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ffab 	bl	8000790 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf1      	blt.n	800082c <_write+0x12>
	}
	return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087a:	605a      	str	r2, [r3, #4]
	return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f004 f96e 	bl	8004bcc <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20010000 	.word	0x20010000
 800091c:	00000400 	.word	0x00000400
 8000920:	200002e8 	.word	0x200002e8
 8000924:	20001130 	.word	0x20001130

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000976:	f7ff ffd7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f004 f92d 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fc99 	bl	80002b4 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000984:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000990:	08005d54 	.word	0x08005d54
  ldr r2, =_sbss
 8000994:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000998:	2000112c 	.word	0x2000112c

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f8d8 	bl	8000b66 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fe74 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe08 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20001118 	.word	0x20001118

080009f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20001118 	.word	0x20001118

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff4c 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8e:	f7ff ff61 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	6978      	ldr	r0, [r7, #20]
 8000b9a:	f7ff ffb1 	bl	8000b00 <NVIC_EncodePriority>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff80 	bl	8000aac <__NVIC_SetPriority>
}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff54 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e160      	b.n	8000ea2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 8152 	beq.w	8000e9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d00b      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0c:	2b11      	cmp	r3, #17
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b12      	cmp	r3, #18
 8000c16:	d130      	bne.n	8000c7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	f003 0201 	and.w	r2, r3, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0xea>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d123      	bne.n	8000d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0203 	and.w	r2, r3, #3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 80ac 	beq.w	8000e9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d44:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a5d      	ldr	r2, [pc, #372]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d5c:	4a59      	ldr	r2, [pc, #356]	; (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d86:	d025      	beq.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4f      	ldr	r2, [pc, #316]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d01f      	beq.n	8000dd0 <HAL_GPIO_Init+0x200>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d019      	beq.n	8000dcc <HAL_GPIO_Init+0x1fc>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d013      	beq.n	8000dc8 <HAL_GPIO_Init+0x1f8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00d      	beq.n	8000dc4 <HAL_GPIO_Init+0x1f4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a4b      	ldr	r2, [pc, #300]	; (8000ed8 <HAL_GPIO_Init+0x308>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x1f0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a4a      	ldr	r2, [pc, #296]	; (8000edc <HAL_GPIO_Init+0x30c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000db8:	2306      	movs	r3, #6
 8000dba:	e00c      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	e00a      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	e008      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e006      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x206>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de6:	4937      	ldr	r1, [pc, #220]	; (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e18:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e42:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f ae97 	bne.w	8000be0 <HAL_GPIO_Init+0x10>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	48001400 	.word	0x48001400
 8000edc:	48001800 	.word	0x48001800
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f000 bf01 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8160 	beq.w	80011fe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f3e:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d00c      	beq.n	8000f64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f4a:	4bab      	ldr	r3, [pc, #684]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d159      	bne.n	800100a <HAL_RCC_OscConfig+0xf6>
 8000f56:	4ba8      	ldr	r3, [pc, #672]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d152      	bne.n	800100a <HAL_RCC_OscConfig+0xf6>
 8000f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d102      	bne.n	8000f96 <HAL_RCC_OscConfig+0x82>
 8000f90:	4b99      	ldr	r3, [pc, #612]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	e015      	b.n	8000fc2 <HAL_RCC_OscConfig+0xae>
 8000f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fb2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fbe:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fce:	fa92 f2a2 	rbit	r2, r2
 8000fd2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fda:	fab2 f282 	clz	r2, r2
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	f002 021f 	and.w	r2, r2, #31
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8102 	beq.w	80011fc <HAL_RCC_OscConfig+0x2e8>
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 80fc 	bne.w	80011fc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	f000 be93 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d106      	bne.n	8001024 <HAL_RCC_OscConfig+0x110>
 8001016:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e030      	b.n	8001086 <HAL_RCC_OscConfig+0x172>
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x134>
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01e      	b.n	8001086 <HAL_RCC_OscConfig+0x172>
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x15a>
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 800105a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x172>
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a61      	ldr	r2, [pc, #388]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d059      	beq.n	8001144 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcb0 	bl	80009f4 <HAL_GetTick>
 8001094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109a:	f7ff fcab 	bl	80009f4 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d902      	bls.n	80010b0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f000 be40 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
 80010b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1ce>
 80010dc:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x1fa>
 80010e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001112:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001116:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001122:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f002 021f 	and.w	r2, r2, #31
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0ab      	beq.n	800109a <HAL_RCC_OscConfig+0x186>
 8001142:	e05c      	b.n	80011fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc56 	bl	80009f4 <HAL_GetTick>
 8001148:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114c:	e00a      	b.n	8001164 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114e:	f7ff fc51 	bl	80009f4 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d902      	bls.n	8001164 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	f000 bde6 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
 8001164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001168:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001178:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d102      	bne.n	8001196 <HAL_RCC_OscConfig+0x282>
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x2ae>
 8001196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_RCC_OscConfig+0x2e4>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011ce:	fa92 f2a2 	rbit	r2, r2
 80011d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011da:	fab2 f282 	clz	r2, r2
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f042 0220 	orr.w	r2, r2, #32
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f002 021f 	and.w	r2, r2, #31
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ab      	bne.n	800114e <HAL_RCC_OscConfig+0x23a>
 80011f6:	e002      	b.n	80011fe <HAL_RCC_OscConfig+0x2ea>
 80011f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8170 	beq.w	80014ee <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800120e:	4bd0      	ldr	r3, [pc, #832]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121a:	4bcd      	ldr	r3, [pc, #820]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b08      	cmp	r3, #8
 8001224:	d16d      	bne.n	8001302 <HAL_RCC_OscConfig+0x3ee>
 8001226:	4bca      	ldr	r3, [pc, #808]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800122e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001232:	d166      	bne.n	8001302 <HAL_RCC_OscConfig+0x3ee>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001246:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x350>
 800125e:	4bbc      	ldr	r3, [pc, #752]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x378>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800127c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001288:	4bb1      	ldr	r3, [pc, #708]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2202      	movs	r2, #2
 800128e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001292:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800129e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f002 021f 	and.w	r2, r2, #31
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_RCC_OscConfig+0x3ba>
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d002      	beq.n	80012ce <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f000 bd31 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	21f8      	movs	r1, #248	; 0xf8
 80012de:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012e6:	fa91 f1a1 	rbit	r1, r1
 80012ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012f2:	fab1 f181 	clz	r1, r1
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	408b      	lsls	r3, r1
 80012fa:	4995      	ldr	r1, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001300:	e0f5      	b.n	80014ee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8085 	beq.w	8001418 <HAL_RCC_OscConfig+0x504>
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001320:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	461a      	mov	r2, r3
 8001336:	2301      	movs	r3, #1
 8001338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fb5b 	bl	80009f4 <HAL_GetTick>
 800133e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fb56 	bl	80009f4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d902      	bls.n	800135a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	f000 bceb 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800136c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x476>
 8001384:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x49e>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2202      	movs	r2, #2
 80013b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013bc:	fa92 f2a2 	rbit	r2, r2
 80013c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f002 021f 	and.w	r2, r2, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0af      	beq.n	8001344 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	21f8      	movs	r1, #248	; 0xf8
 80013f4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013fc:	fa91 f1a1 	rbit	r1, r1
 8001400:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001404:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001408:	fab1 f181 	clz	r1, r1
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	408b      	lsls	r3, r1
 8001410:	494f      	ldr	r1, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
 8001416:	e06a      	b.n	80014ee <HAL_RCC_OscConfig+0x5da>
 8001418:	2301      	movs	r3, #1
 800141a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800142a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001438:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	461a      	mov	r2, r3
 8001440:	2300      	movs	r3, #0
 8001442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fad6 	bl	80009f4 <HAL_GetTick>
 8001448:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fad1 	bl	80009f4 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d902      	bls.n	8001464 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	f000 bc66 	b.w	8001d30 <HAL_RCC_OscConfig+0xe1c>
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <HAL_RCC_OscConfig+0x580>
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e013      	b.n	80014bc <HAL_RCC_OscConfig+0x5a8>
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x63c>)
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	2202      	movs	r2, #2
 80014be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014c6:	fa92 f2a2 	rbit	r2, r2
 80014ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	f042 0220 	orr.w	r2, r2, #32
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f002 021f 	and.w	r2, r2, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1af      	bne.n	800144e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80da 	beq.w	80016b2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d069      	beq.n	80015dc <HAL_RCC_OscConfig+0x6c8>
 8001508:	2301      	movs	r3, #1
 800150a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800151a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x640>)
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	461a      	mov	r2, r3
 800152e:	2301      	movs	r3, #1
 8001530:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa5f 	bl	80009f4 <HAL_GetTick>
 8001536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e00d      	b.n	8001558 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa5a 	bl	80009f4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d905      	bls.n	8001558 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e3ef      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 8001550:	40021000 	.word	0x40021000
 8001554:	10908120 	.word	0x10908120
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800159a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	4ba4      	ldr	r3, [pc, #656]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015a4:	2102      	movs	r1, #2
 80015a6:	6019      	str	r1, [r3, #0]
 80015a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f1a3 	rbit	r1, r3
 80015b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015b6:	6019      	str	r1, [r3, #0]
  return result;
 80015b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0b0      	beq.n	800153c <HAL_RCC_OscConfig+0x628>
 80015da:	e06a      	b.n	80016b2 <HAL_RCC_OscConfig+0x79e>
 80015dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015f2:	601a      	str	r2, [r3, #0]
  return result;
 80015f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x920>)
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	2300      	movs	r3, #0
 800160c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff f9f1 	bl	80009f4 <HAL_GetTick>
 8001612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	e009      	b.n	800162c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f9ec 	bl	80009f4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e381      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 800162c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001630:	2202      	movs	r2, #2
 8001632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001660:	2202      	movs	r2, #2
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	fa93 f2a3 	rbit	r2, r3
 800166e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001672:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b6e      	ldr	r3, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800167c:	2102      	movs	r1, #2
 800167e:	6019      	str	r1, [r3, #0]
 8001680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f1a3 	rbit	r1, r3
 800168a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800168e:	6019      	str	r1, [r3, #0]
  return result;
 8001690:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fab3 f383 	clz	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1b2      	bne.n	8001618 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8157 	beq.w	8001970 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d112      	bne.n	80016fa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4a55      	ldr	r2, [pc, #340]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	61d3      	str	r3, [r2, #28]
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <HAL_RCC_OscConfig+0x924>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x924>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_RCC_OscConfig+0x924>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff f96f 	bl	80009f4 <HAL_GetTick>
 8001716:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	e009      	b.n	8001730 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff f96a 	bl	80009f4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e2ff      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_OscConfig+0x924>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ef      	beq.n	800171c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x840>
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a39      	ldr	r2, [pc, #228]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e02f      	b.n	80017b4 <HAL_RCC_OscConfig+0x8a0>
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x864>
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a33      	ldr	r2, [pc, #204]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a30      	ldr	r2, [pc, #192]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0x8a0>
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x888>
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0x8a0>
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a23      	ldr	r2, [pc, #140]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 80017ae:	f023 0304 	bic.w	r3, r3, #4
 80017b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d06a      	beq.n	8001894 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff f919 	bl	80009f4 <HAL_GetTick>
 80017c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff f914 	bl	80009f4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e2a7      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 80017e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800180e:	601a      	str	r2, [r3, #0]
  return result;
 8001810:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001814:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x928>
 800182a:	4b01      	ldr	r3, [pc, #4]	; (8001830 <HAL_RCC_OscConfig+0x91c>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x944>
 8001830:	40021000 	.word	0x40021000
 8001834:	10908120 	.word	0x10908120
 8001838:	40007000 	.word	0x40007000
 800183c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4bc0      	ldr	r3, [pc, #768]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800185c:	2102      	movs	r1, #2
 800185e:	6011      	str	r1, [r2, #0]
 8001860:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	fa92 f1a2 	rbit	r1, r2
 800186a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800186e:	6011      	str	r1, [r2, #0]
  return result;
 8001870:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f002 021f 	and.w	r2, r2, #31
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d09a      	beq.n	80017c8 <HAL_RCC_OscConfig+0x8b4>
 8001892:	e063      	b.n	800195c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff f8ae 	bl	80009f4 <HAL_GetTick>
 8001898:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	e00b      	b.n	80018b6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff f8a9 	bl	80009f4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e23c      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 80018b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e4:	601a      	str	r2, [r3, #0]
  return result;
 80018e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x9f2>
 8001900:	4b95      	ldr	r3, [pc, #596]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	e00d      	b.n	8001922 <HAL_RCC_OscConfig+0xa0e>
 8001906:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	4b8e      	ldr	r3, [pc, #568]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001926:	2102      	movs	r1, #2
 8001928:	6011      	str	r1, [r2, #0]
 800192a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	fa92 f1a2 	rbit	r1, r2
 8001934:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001938:	6011      	str	r1, [r2, #0]
  return result;
 800193a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	fab2 f282 	clz	r2, r2
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1a0      	bne.n	800189e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4a7b      	ldr	r2, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 81d9 	beq.w	8001d2e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	f000 81a6 	beq.w	8001cd6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b02      	cmp	r3, #2
 8001992:	f040 811e 	bne.w	8001bd2 <HAL_RCC_OscConfig+0xcbe>
 8001996:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800199a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019ae:	601a      	str	r2, [r3, #0]
  return result;
 80019b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	461a      	mov	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f812 	bl	80009f4 <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f80d 	bl	80009f4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1a2      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 80019ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a02:	601a      	str	r2, [r3, #0]
  return result;
 8001a04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0xb10>
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0xb48>
 8001a24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fa92 f1a2 	rbit	r1, r2
 8001a70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a74:	6011      	str	r1, [r2, #0]
  return result;
 8001a76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d19e      	bne.n	80019d6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f023 020f 	bic.w	r2, r3, #15
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	492c      	ldr	r1, [pc, #176]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a19      	ldr	r1, [r3, #32]
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	4925      	ldr	r1, [pc, #148]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae0:	601a      	str	r2, [r3, #0]
  return result;
 8001ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	2301      	movs	r3, #1
 8001afc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe ff79 	bl	80009f4 <HAL_GetTick>
 8001b02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b06:	e009      	b.n	8001b1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7fe ff74 	bl	80009f4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e109      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 8001b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0xc48>
 8001b50:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <HAL_RCC_OscConfig+0xc44>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	e01e      	b.n	8001b94 <HAL_RCC_OscConfig+0xc80>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0xe28>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fa92 f1a2 	rbit	r1, r2
 8001ba8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bac:	6011      	str	r1, [r2, #0]
  return result;
 8001bae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d09b      	beq.n	8001b08 <HAL_RCC_OscConfig+0xbf4>
 8001bd0:	e0ad      	b.n	8001d2e <HAL_RCC_OscConfig+0xe1a>
 8001bd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe fef4 	bl	80009f4 <HAL_GetTick>
 8001c0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7fe feef 	bl	80009f4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e084      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3e:	601a      	str	r2, [r3, #0]
  return result;
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0xd4c>
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0xe28>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e01b      	b.n	8001c98 <HAL_RCC_OscConfig+0xd84>
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_OscConfig+0xe28>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f107 0214 	add.w	r2, r7, #20
 8001c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f107 0214 	add.w	r2, r7, #20
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fa92 f1a2 	rbit	r1, r2
 8001cac:	f107 0210 	add.w	r2, r7, #16
 8001cb0:	6011      	str	r1, [r2, #0]
  return result;
 8001cb2:	f107 0210 	add.w	r2, r7, #16
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f002 021f 	and.w	r2, r2, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d19e      	bne.n	8001c12 <HAL_RCC_OscConfig+0xcfe>
 8001cd4:	e02b      	b.n	8001d2e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e025      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0xe28>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_OscConfig+0xe28>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cf8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d111      	bne.n	8001d2a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d108      	bne.n	8001d2a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b09e      	sub	sp, #120	; 0x78
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e162      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b90      	ldr	r3, [pc, #576]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b8d      	ldr	r3, [pc, #564]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	498b      	ldr	r1, [pc, #556]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e14a      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	497f      	ldr	r1, [pc, #508]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80dc 	beq.w	8001f6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d13c      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xf6>
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xa6>
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e00f      	b.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
 8001de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	667b      	str	r3, [r7, #100]	; 0x64
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d17b      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0f3      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d13c      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x178>
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x128>
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_ClockConfig+0x148>
 8001e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e90:	fa92 f2a2 	rbit	r2, r2
 8001e94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d13a      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b2      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e00d      	b.n	8001efc <HAL_RCC_ClockConfig+0x1bc>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2202      	movs	r2, #2
 8001efe:	61ba      	str	r2, [r7, #24]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	fa92 f2a2 	rbit	r2, r2
 8001f06:	617a      	str	r2, [r7, #20]
  return result;
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f002 021f 	and.w	r2, r2, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e079      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	491a      	ldr	r1, [pc, #104]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fd5a 	bl	80009f4 <HAL_GetTick>
 8001f40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fd56 	bl	80009f4 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e061      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d214      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4906      	ldr	r1, [pc, #24]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e040      	b.n	800201e <HAL_RCC_ClockConfig+0x2de>
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	491a      	ldr	r1, [pc, #104]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4912      	ldr	r1, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fe2:	f000 f829 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff0:	22f0      	movs	r2, #240	; 0xf0
 8001ff2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	60fa      	str	r2, [r7, #12]
  return result;
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	40d3      	lsrs	r3, r2
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x2ec>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	fa21 f303 	lsr.w	r3, r1, r3
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_RCC_ClockConfig+0x2f0>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x2f4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fb44 	bl	80006a4 <HAL_InitTick>
  
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3778      	adds	r7, #120	; 0x78
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	08005c7c 	.word	0x08005c7c
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	; 0x2c
 800203c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d002      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x30>
 8002062:	2b08      	cmp	r3, #8
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x36>
 8002066:	e03f      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc8>)
 800206a:	623b      	str	r3, [r7, #32]
      break;
 800206c:	e03f      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002074:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002078:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	607a      	str	r2, [r7, #4]
  return result;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_RCC_GetSysClockFreq+0xcc>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	220f      	movs	r2, #15
 800209c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	60fa      	str	r2, [r7, #12]
  return result;
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	e007      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	623b      	str	r3, [r7, #32]
      break;
 80020e6:	e002      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ee:	6a3b      	ldr	r3, [r7, #32]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	372c      	adds	r7, #44	; 0x2c
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40021000 	.word	0x40021000
 8002100:	007a1200 	.word	0x007a1200
 8002104:	08005c94 	.word	0x08005c94
 8002108:	08005ca4 	.word	0x08005ca4

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800212a:	f7ff ffef 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002138:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800213c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	603a      	str	r2, [r7, #0]
  return result;
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	40d3      	lsrs	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08005c8c 	.word	0x08005c8c

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800216e:	f7ff ffcd 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002172:	4601      	mov	r1, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800217c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	603a      	str	r2, [r7, #0]
  return result;
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	40d3      	lsrs	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08005c8c 	.word	0x08005c8c

080021ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	220f      	movs	r2, #15
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetClockConfig+0x60>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0207 	and.w	r2, r3, #7
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b092      	sub	sp, #72	; 0x48
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80d4 	beq.w	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10e      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	61d3      	str	r3, [r2, #28]
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a41      	ldr	r2, [pc, #260]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe fbbd 	bl	80009f4 <HAL_GetTick>
 800227a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fbb9 	bl	80009f4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1d6      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8084 	beq.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d07c      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2300      	movs	r3, #0
 800230c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04b      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fb69 	bl	80009f4 <HAL_GetTick>
 8002322:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fb65 	bl	80009f4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e180      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800233c:	2302      	movs	r3, #2
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	61fb      	str	r3, [r7, #28]
  return result;
 8002354:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d108      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800236a:	4b01      	ldr	r3, [pc, #4]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	e00d      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	10908100 	.word	0x10908100
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	4ba0      	ldr	r3, [pc, #640]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2202      	movs	r2, #2
 800238e:	613a      	str	r2, [r7, #16]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	60fa      	str	r2, [r7, #12]
  return result;
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0b7      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023b6:	4b95      	ldr	r3, [pc, #596]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4992      	ldr	r1, [pc, #584]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d0:	4b8e      	ldr	r3, [pc, #568]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4a8d      	ldr	r2, [pc, #564]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e8:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4985      	ldr	r1, [pc, #532]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002406:	4b81      	ldr	r3, [pc, #516]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	497e      	ldr	r1, [pc, #504]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002424:	4b79      	ldr	r3, [pc, #484]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4976      	ldr	r1, [pc, #472]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f023 0210 	bic.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	496f      	ldr	r1, [pc, #444]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	4967      	ldr	r1, [pc, #412]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f023 0220 	bic.w	r2, r3, #32
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4960      	ldr	r1, [pc, #384]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	4958      	ldr	r1, [pc, #352]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ba:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4951      	ldr	r1, [pc, #324]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4949      	ldr	r1, [pc, #292]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4942      	ldr	r1, [pc, #264]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	493a      	ldr	r1, [pc, #232]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	4933      	ldr	r1, [pc, #204]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	492b      	ldr	r1, [pc, #172]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4924      	ldr	r1, [pc, #144]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	491c      	ldr	r1, [pc, #112]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	4915      	ldr	r1, [pc, #84]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	490d      	ldr	r1, [pc, #52]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	4906      	ldr	r1, [pc, #24]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00c      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	e002      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800261a:	4313      	orrs	r3, r2
 800261c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002638:	4313      	orrs	r3, r2
 800263a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3748      	adds	r7, #72	; 0x48
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e049      	b.n	80026f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f841 	bl	80026fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 f9f8 	bl	8002a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d001      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04f      	b.n	80027c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01d      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d018      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x76>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d115      	bne.n	80027b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_TIM_Base_Start_IT+0xdc>)
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d015      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0xb4>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d011      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e008      	b.n	80027c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40015000 	.word	0x40015000
 80027ec:	00010007 	.word	0x00010007

080027f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0202 	mvn.w	r2, #2
 800281c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f905 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8f7 	bl	8002a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f908 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0204 	mvn.w	r2, #4
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8db 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8cd 	bl	8002a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8de 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0208 	mvn.w	r2, #8
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8b1 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8a3 	bl	8002a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f8b4 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f887 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f879 	bl	8002a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f88a 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0201 	mvn.w	r2, #1
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd fe16 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f918 	bl	8002bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ae:	d10e      	bne.n	80029ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b80      	cmp	r3, #128	; 0x80
 80029bc:	d107      	bne.n	80029ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f90b 	bl	8002be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d10e      	bne.n	80029fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f838 	bl	8002a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d10e      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d107      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0220 	mvn.w	r2, #32
 8002a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8cb 	bl	8002bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <TIM_Base_SetConfig+0x11c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <TIM_Base_SetConfig+0x120>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	; (8002ba4 <TIM_Base_SetConfig+0x124>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <TIM_Base_SetConfig+0x11c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d01b      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <TIM_Base_SetConfig+0x120>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d017      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <TIM_Base_SetConfig+0x124>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00f      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <TIM_Base_SetConfig+0x130>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <TIM_Base_SetConfig+0x134>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_Base_SetConfig+0x9a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <TIM_Base_SetConfig+0x11c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <TIM_Base_SetConfig+0x100>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00f      	beq.n	8002b80 <TIM_Base_SetConfig+0x100>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <TIM_Base_SetConfig+0x130>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <TIM_Base_SetConfig+0x100>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <TIM_Base_SetConfig+0x134>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <TIM_Base_SetConfig+0x100>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0x100>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d103      	bne.n	8002b88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	615a      	str	r2, [r3, #20]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40013400 	.word	0x40013400
 8002bac:	40015000 	.word	0x40015000
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800

08002bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e040      	b.n	8002c8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fd00 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f82c 	bl	8002c94 <UART_SetConfig>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e022      	b.n	8002c8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9f6 	bl	8003040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fa7d 	bl	8003184 <UART_CheckIdleState>
 8002c8a:	4603      	mov	r3, r0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <UART_SetConfig+0x2d8>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a99      	ldr	r2, [pc, #612]	; (8002f70 <UART_SetConfig+0x2dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d120      	bne.n	8002d52 <UART_SetConfig+0xbe>
 8002d10:	4b98      	ldr	r3, [pc, #608]	; (8002f74 <UART_SetConfig+0x2e0>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d817      	bhi.n	8002d4c <UART_SetConfig+0xb8>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <UART_SetConfig+0x90>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d47 	.word	0x08002d47
 8002d30:	08002d3b 	.word	0x08002d3b
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e0b5      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e0b2      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d40:	2304      	movs	r3, #4
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e0af      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d46:	2308      	movs	r3, #8
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e0ac      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e0a9      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a88      	ldr	r2, [pc, #544]	; (8002f78 <UART_SetConfig+0x2e4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d124      	bne.n	8002da6 <UART_SetConfig+0x112>
 8002d5c:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <UART_SetConfig+0x2e0>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d68:	d011      	beq.n	8002d8e <UART_SetConfig+0xfa>
 8002d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d6e:	d817      	bhi.n	8002da0 <UART_SetConfig+0x10c>
 8002d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d74:	d011      	beq.n	8002d9a <UART_SetConfig+0x106>
 8002d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7a:	d811      	bhi.n	8002da0 <UART_SetConfig+0x10c>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <UART_SetConfig+0xf4>
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d006      	beq.n	8002d94 <UART_SetConfig+0x100>
 8002d86:	e00b      	b.n	8002da0 <UART_SetConfig+0x10c>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e08b      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	77fb      	strb	r3, [r7, #31]
 8002d92:	e088      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d94:	2304      	movs	r3, #4
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e085      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	77fb      	strb	r3, [r7, #31]
 8002d9e:	e082      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002da0:	2310      	movs	r3, #16
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e07f      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <UART_SetConfig+0x2e8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d124      	bne.n	8002dfa <UART_SetConfig+0x166>
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <UART_SetConfig+0x2e0>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002db8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dbc:	d011      	beq.n	8002de2 <UART_SetConfig+0x14e>
 8002dbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc2:	d817      	bhi.n	8002df4 <UART_SetConfig+0x160>
 8002dc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dc8:	d011      	beq.n	8002dee <UART_SetConfig+0x15a>
 8002dca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dce:	d811      	bhi.n	8002df4 <UART_SetConfig+0x160>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <UART_SetConfig+0x148>
 8002dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd8:	d006      	beq.n	8002de8 <UART_SetConfig+0x154>
 8002dda:	e00b      	b.n	8002df4 <UART_SetConfig+0x160>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e061      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002de2:	2302      	movs	r3, #2
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e05e      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002de8:	2304      	movs	r3, #4
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e05b      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002dee:	2308      	movs	r3, #8
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e058      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002df4:	2310      	movs	r3, #16
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e055      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <UART_SetConfig+0x2ec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d124      	bne.n	8002e4e <UART_SetConfig+0x1ba>
 8002e04:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <UART_SetConfig+0x2e0>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e10:	d011      	beq.n	8002e36 <UART_SetConfig+0x1a2>
 8002e12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e16:	d817      	bhi.n	8002e48 <UART_SetConfig+0x1b4>
 8002e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1c:	d011      	beq.n	8002e42 <UART_SetConfig+0x1ae>
 8002e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e22:	d811      	bhi.n	8002e48 <UART_SetConfig+0x1b4>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <UART_SetConfig+0x19c>
 8002e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2c:	d006      	beq.n	8002e3c <UART_SetConfig+0x1a8>
 8002e2e:	e00b      	b.n	8002e48 <UART_SetConfig+0x1b4>
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e037      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e034      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e031      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e02e      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e02b      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4c      	ldr	r2, [pc, #304]	; (8002f84 <UART_SetConfig+0x2f0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d124      	bne.n	8002ea2 <UART_SetConfig+0x20e>
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <UART_SetConfig+0x2e0>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e64:	d011      	beq.n	8002e8a <UART_SetConfig+0x1f6>
 8002e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6a:	d817      	bhi.n	8002e9c <UART_SetConfig+0x208>
 8002e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e70:	d011      	beq.n	8002e96 <UART_SetConfig+0x202>
 8002e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e76:	d811      	bhi.n	8002e9c <UART_SetConfig+0x208>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <UART_SetConfig+0x1f0>
 8002e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e80:	d006      	beq.n	8002e90 <UART_SetConfig+0x1fc>
 8002e82:	e00b      	b.n	8002e9c <UART_SetConfig+0x208>
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e00d      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e00a      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e90:	2304      	movs	r3, #4
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e007      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e96:	2308      	movs	r3, #8
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e004      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e001      	b.n	8002ea6 <UART_SetConfig+0x212>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d16d      	bne.n	8002f8c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d827      	bhi.n	8002f06 <UART_SetConfig+0x272>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0x228>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee9 	.word	0x08002ee9
 8002ec4:	08002ef1 	.word	0x08002ef1
 8002ec8:	08002f07 	.word	0x08002f07
 8002ecc:	08002ef7 	.word	0x08002ef7
 8002ed0:	08002f07 	.word	0x08002f07
 8002ed4:	08002f07 	.word	0x08002f07
 8002ed8:	08002f07 	.word	0x08002f07
 8002edc:	08002eff 	.word	0x08002eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7ff f920 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	61b8      	str	r0, [r7, #24]
        break;
 8002ee6:	e013      	b.n	8002f10 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7ff f93e 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002eec:	61b8      	str	r0, [r7, #24]
        break;
 8002eee:	e00f      	b.n	8002f10 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <UART_SetConfig+0x2f4>)
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e00c      	b.n	8002f10 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef6:	f7ff f89f 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8002efa:	61b8      	str	r0, [r7, #24]
        break;
 8002efc:	e008      	b.n	8002f10 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f02:	61bb      	str	r3, [r7, #24]
        break;
 8002f04:	e004      	b.n	8002f10 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8086 	beq.w	8003024 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	005a      	lsls	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	441a      	add	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	d916      	bls.n	8002f64 <UART_SetConfig+0x2d0>
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d212      	bcs.n	8002f64 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f023 030f 	bic.w	r3, r3, #15
 8002f46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	89fa      	ldrh	r2, [r7, #14]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	e05f      	b.n	8003024 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77bb      	strb	r3, [r7, #30]
 8002f68:	e05c      	b.n	8003024 <UART_SetConfig+0x390>
 8002f6a:	bf00      	nop
 8002f6c:	efff69f3 	.word	0xefff69f3
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	40004c00 	.word	0x40004c00
 8002f84:	40005000 	.word	0x40005000
 8002f88:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d827      	bhi.n	8002fe2 <UART_SetConfig+0x34e>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x304>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	08002fcd 	.word	0x08002fcd
 8002fa4:	08002fe3 	.word	0x08002fe3
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08002fe3 	.word	0x08002fe3
 8002fb4:	08002fe3 	.word	0x08002fe3
 8002fb8:	08002fdb 	.word	0x08002fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7ff f8b2 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	61b8      	str	r0, [r7, #24]
        break;
 8002fc2:	e013      	b.n	8002fec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc4:	f7ff f8d0 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002fc8:	61b8      	str	r0, [r7, #24]
        break;
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <UART_SetConfig+0x3a8>)
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e00c      	b.n	8002fec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7ff f831 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8002fd6:	61b8      	str	r0, [r7, #24]
        break;
 8002fd8:	e008      	b.n	8002fec <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	61bb      	str	r3, [r7, #24]
        break;
 8002fe0:	e004      	b.n	8002fec <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fea:	bf00      	nop
    }

    if (pclk != 0U)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085a      	lsrs	r2, r3, #1
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d908      	bls.n	8003020 <UART_SetConfig+0x38c>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d204      	bcs.n	8003020 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	e001      	b.n	8003024 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003030:	7fbb      	ldrb	r3, [r7, #30]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	007a1200 	.word	0x007a1200

08003040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01a      	beq.n	8003156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313e:	d10a      	bne.n	8003156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003194:	f7fd fc2e 	bl	80009f4 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d10e      	bne.n	80031c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f82d 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e023      	b.n	800320e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d10e      	bne.n	80031f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f817 	bl	8003216 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00d      	b.n	800320e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	e05e      	b.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d05a      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7fd fbe0 	bl	80009f4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <UART_WaitOnFlagUntilTimeout+0x30>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11b      	bne.n	800327e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003254:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e043      	b.n	8003306 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02c      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329a:	d124      	bne.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d091      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800331c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003320:	2b84      	cmp	r3, #132	; 0x84
 8003322:	d005      	beq.n	8003330 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003324:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	3303      	adds	r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003344:	f3ef 8305 	mrs	r3, IPSR
 8003348:	607b      	str	r3, [r7, #4]
  return(result);
 800334a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003366:	f000 fca1 	bl	8003cac <vTaskStartScheduler>
  
  return osOK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}

08003370 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af04      	add	r7, sp, #16
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d020      	beq.n	80033c4 <osThreadCreate+0x54>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01c      	beq.n	80033c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685c      	ldr	r4, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691e      	ldr	r6, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ffb6 	bl	800330e <makeFreeRtosPriority>
 80033a2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ac:	9202      	str	r2, [sp, #8]
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	9100      	str	r1, [sp, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4632      	mov	r2, r6
 80033b6:	4629      	mov	r1, r5
 80033b8:	4620      	mov	r0, r4
 80033ba:	f000 f91b 	bl	80035f4 <xTaskCreateStatic>
 80033be:	4603      	mov	r3, r0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e01c      	b.n	80033fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685c      	ldr	r4, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033d0:	b29e      	uxth	r6, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff98 	bl	800330e <makeFreeRtosPriority>
 80033de:	4602      	mov	r2, r0
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	9200      	str	r2, [sp, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4632      	mov	r2, r6
 80033ec:	4629      	mov	r1, r5
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 f95c 	bl	80036ac <xTaskCreate>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033fe:	68fb      	ldr	r3, [r7, #12]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003408 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <osDelay+0x16>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e000      	b.n	8003420 <osDelay+0x18>
 800341e:	2301      	movs	r3, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa71 	bl	8003908 <vTaskDelay>
  
  return osOK;
 8003426:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa99 	bl	8003970 <vTaskSuspend>
  
  return osOK;
 800343e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8003450:	f7ff ff75 	bl	800333e <inHandlerMode>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00e      	beq.n	8003478 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fbb4 	bl	8003bc8 <xTaskResumeFromISR>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10b      	bne.n	800347e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <osThreadResume+0x40>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	e002      	b.n	800347e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fb47 	bl	8003b0c <vTaskResume>
  }
  return osOK;
 800347e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 0208 	add.w	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 0208 	add.w	r2, r3, #8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f103 0208 	add.w	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d103      	bne.n	800354e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e00c      	b.n	8003568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3308      	adds	r3, #8
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e002      	b.n	800355c <vListInsert+0x2e>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d2f6      	bcs.n	8003556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6892      	ldr	r2, [r2, #8]
 80035b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6852      	ldr	r2, [r2, #4]
 80035c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d103      	bne.n	80035d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	; 0x38
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xTaskCreateStatic+0x46>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	61fb      	str	r3, [r7, #28]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800363a:	2354      	movs	r3, #84	; 0x54
 800363c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b54      	cmp	r3, #84	; 0x54
 8003642:	d00a      	beq.n	800365a <xTaskCreateStatic+0x66>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61bb      	str	r3, [r7, #24]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01e      	beq.n	800369e <xTaskCreateStatic+0xaa>
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01b      	beq.n	800369e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800366e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003678:	2300      	movs	r3, #0
 800367a:	9303      	str	r3, [sp, #12]
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f850 	bl	8003736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003698:	f000 f8cc 	bl	8003834 <prvAddNewTaskToReadyList>
 800369c:	e001      	b.n	80036a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a2:	697b      	ldr	r3, [r7, #20]
	}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f8a9 	bl	8004818 <pvPortMalloc>
 80036c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036ce:	2054      	movs	r0, #84	; 0x54
 80036d0:	f001 f8a2 	bl	8004818 <pvPortMalloc>
 80036d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
 80036e2:	e005      	b.n	80036f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f001 f95b 	bl	80049a0 <vPortFree>
 80036ea:	e001      	b.n	80036f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	2300      	movs	r3, #0
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f80e 	bl	8003736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800371a:	69f8      	ldr	r0, [r7, #28]
 800371c:	f000 f88a 	bl	8003834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003720:	2301      	movs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e002      	b.n	800372c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800372c:	69bb      	ldr	r3, [r7, #24]
	}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800374e:	3b01      	subs	r3, #1
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f023 0307 	bic.w	r3, r3, #7
 800375c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	617b      	str	r3, [r7, #20]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e012      	b.n	80037aa <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	7819      	ldrb	r1, [r3, #0]
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	3334      	adds	r3, #52	; 0x34
 8003794:	460a      	mov	r2, r1
 8003796:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d9e9      	bls.n	8003784 <prvInitialiseNewTask+0x4e>
 80037b0:	e000      	b.n	80037b4 <prvInitialiseNewTask+0x7e>
		{
			break;
 80037b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d901      	bls.n	80037c6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c2:	2306      	movs	r3, #6
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	3304      	adds	r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fe75 	bl	80034cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3318      	adds	r3, #24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fe70 	bl	80034cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	f1c3 0207 	rsb	r2, r3, #7
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	69b8      	ldr	r0, [r7, #24]
 8003816:	f000 fdaf 	bl	8004378 <pxPortInitialiseStack>
 800381a:	4602      	mov	r2, r0
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382c:	bf00      	nop
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800383c:	f000 feca 	bl	80045d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <prvAddNewTaskToReadyList+0xb8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a29      	ldr	r2, [pc, #164]	; (80038ec <prvAddNewTaskToReadyList+0xb8>)
 8003848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <prvAddNewTaskToReadyList+0xbc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <prvAddNewTaskToReadyList+0xbc>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <prvAddNewTaskToReadyList+0xb8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d110      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003860:	f000 fc60 	bl	8004124 <prvInitialiseTaskLists>
 8003864:	e00d      	b.n	8003882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <prvAddNewTaskToReadyList+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <prvAddNewTaskToReadyList+0xbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d802      	bhi.n	8003882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <prvAddNewTaskToReadyList+0xbc>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 800388a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <prvAddNewTaskToReadyList+0xcc>)
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7ff fe16 	bl	80034e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ba:	f000 febb 	bl	8004634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <prvAddNewTaskToReadyList+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <prvAddNewTaskToReadyList+0xbc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d207      	bcs.n	80038e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <prvAddNewTaskToReadyList+0xd0>)
 80038d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200003ec 	.word	0x200003ec
 80038f0:	200002ec 	.word	0x200002ec
 80038f4:	200003f8 	.word	0x200003f8
 80038f8:	20000408 	.word	0x20000408
 80038fc:	200003f4 	.word	0x200003f4
 8003900:	200002f0 	.word	0x200002f0
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d017      	beq.n	800394a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <vTaskDelay+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <vTaskDelay+0x30>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60bb      	str	r3, [r7, #8]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003938:	f000 fa18 	bl	8003d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800393c:	2100      	movs	r1, #0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fcb4 	bl	80042ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003944:	f000 fa20 	bl	8003d88 <xTaskResumeAll>
 8003948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <vTaskDelay+0x64>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000414 	.word	0x20000414
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003978:	f000 fe2c 	bl	80045d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <vTaskSuspend+0x18>
 8003982:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <vTaskSuspend+0x104>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	e000      	b.n	800398a <vTaskSuspend+0x1a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fe05 	bl	80035a0 <uxListRemove>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d115      	bne.n	80039c8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4935      	ldr	r1, [pc, #212]	; (8003a78 <vTaskSuspend+0x108>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <vTaskSuspend+0x58>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43da      	mvns	r2, r3
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <vTaskSuspend+0x10c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4013      	ands	r3, r2
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <vTaskSuspend+0x10c>)
 80039c6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3318      	adds	r3, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fde3 	bl	80035a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4827      	ldr	r0, [pc, #156]	; (8003a80 <vTaskSuspend+0x110>)
 80039e2:	f7ff fd80 	bl	80034e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d103      	bne.n	80039fa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80039fa:	f000 fe1b 	bl	8004634 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <vTaskSuspend+0x114>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003a06:	f000 fde5 	bl	80045d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003a0a:	f000 fc29 	bl	8004260 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003a0e:	f000 fe11 	bl	8004634 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <vTaskSuspend+0x104>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d127      	bne.n	8003a6c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <vTaskSuspend+0x114>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d017      	beq.n	8003a54 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003a24:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <vTaskSuspend+0x118>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <vTaskSuspend+0xd2>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60bb      	str	r3, [r7, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <vTaskSuspend+0x11c>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a52:	e00b      	b.n	8003a6c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <vTaskSuspend+0x110>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <vTaskSuspend+0x120>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d103      	bne.n	8003a68 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <vTaskSuspend+0x104>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
	}
 8003a66:	e001      	b.n	8003a6c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003a68:	f000 fae8 	bl	800403c <vTaskSwitchContext>
	}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200002ec 	.word	0x200002ec
 8003a78:	200002f0 	.word	0x200002f0
 8003a7c:	200003f4 	.word	0x200003f4
 8003a80:	200003d8 	.word	0x200003d8
 8003a84:	200003f8 	.word	0x200003f8
 8003a88:	20000414 	.word	0x20000414
 8003a8c:	e000ed04 	.word	0xe000ed04
 8003a90:	200003ec 	.word	0x200003ec

08003a94 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60fb      	str	r3, [r7, #12]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <prvTaskIsTaskSuspended+0x70>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <prvTaskIsTaskSuspended+0x3a>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <prvTaskIsTaskSuspended+0x3c>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00f      	beq.n	8003af4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <prvTaskIsTaskSuspended+0x74>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00a      	beq.n	8003af4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <prvTaskIsTaskSuspended+0x56>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <prvTaskIsTaskSuspended+0x58>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003af4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	200003d8 	.word	0x200003d8
 8003b08:	200003ac 	.word	0x200003ac

08003b0c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <vTaskResume+0x28>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	60bb      	str	r3, [r7, #8]
}
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d039      	beq.n	8003bae <vTaskResume+0xa2>
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <vTaskResume+0xac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d034      	beq.n	8003bae <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003b44:	f000 fd46 	bl	80045d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7ff ffa3 	bl	8003a94 <prvTaskIsTaskSuspended>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02a      	beq.n	8003baa <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fd21 	bl	80035a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <vTaskResume+0xb0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <vTaskResume+0xb0>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <vTaskResume+0xb4>)
 8003b7e:	441a      	add	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f7ff fcad 	bl	80034e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <vTaskResume+0xac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d307      	bcc.n	8003baa <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <vTaskResume+0xb8>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003baa:	f000 fd43 	bl	8004634 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200002ec 	.word	0x200002ec
 8003bbc:	200003f4 	.word	0x200003f4
 8003bc0:	200002f0 	.word	0x200002f0
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61bb      	str	r3, [r7, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bf4:	f000 fdd0 	bl	8004798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	617a      	str	r2, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c10:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c12:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c14:	6a38      	ldr	r0, [r7, #32]
 8003c16:	f7ff ff3d 	bl	8003a94 <prvTaskIsTaskSuspended>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02f      	beq.n	8003c80 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <xTaskResumeFromISR+0xd0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d125      	bne.n	8003c74 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <xTaskResumeFromISR+0xd4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d301      	bcc.n	8003c3a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fcae 	bl	80035a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <xTaskResumeFromISR+0xd8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <xTaskResumeFromISR+0xd8>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <xTaskResumeFromISR+0xdc>)
 8003c64:	441a      	add	r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fc3a 	bl	80034e6 <vListInsertEnd>
 8003c72:	e005      	b.n	8003c80 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	3318      	adds	r3, #24
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <xTaskResumeFromISR+0xe0>)
 8003c7c:	f7ff fc33 	bl	80034e6 <vListInsertEnd>
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c8a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000414 	.word	0x20000414
 8003c9c:	200002ec 	.word	0x200002ec
 8003ca0:	200003f4 	.word	0x200003f4
 8003ca4:	200002f0 	.word	0x200002f0
 8003ca8:	200003ac 	.word	0x200003ac

08003cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cba:	463a      	mov	r2, r7
 8003cbc:	1d39      	adds	r1, r7, #4
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fadc 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	460a      	mov	r2, r1
 8003cda:	491e      	ldr	r1, [pc, #120]	; (8003d54 <vTaskStartScheduler+0xa8>)
 8003cdc:	481e      	ldr	r0, [pc, #120]	; (8003d58 <vTaskStartScheduler+0xac>)
 8003cde:	f7ff fc89 	bl	80035f4 <xTaskCreateStatic>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <vTaskStartScheduler+0xb0>)
 8003ce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <vTaskStartScheduler+0xb0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e001      	b.n	8003cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d116      	bne.n	8003d2e <vTaskStartScheduler+0x82>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
}
 8003d12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <vTaskStartScheduler+0xb4>)
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <vTaskStartScheduler+0xb8>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <vTaskStartScheduler+0xbc>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d28:	f000 fbb2 	bl	8004490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d2c:	e00e      	b.n	8003d4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d10a      	bne.n	8003d4c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <vTaskStartScheduler+0x9e>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08005c74 	.word	0x08005c74
 8003d58:	080040f5 	.word	0x080040f5
 8003d5c:	20000410 	.word	0x20000410
 8003d60:	2000040c 	.word	0x2000040c
 8003d64:	200003f8 	.word	0x200003f8
 8003d68:	200003f0 	.word	0x200003f0

08003d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <vTaskSuspendAll+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <vTaskSuspendAll+0x18>)
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	20000414 	.word	0x20000414

08003d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <xTaskResumeAll+0x114>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	603b      	str	r3, [r7, #0]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003db4:	f000 fc0e 	bl	80045d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <xTaskResumeAll+0x114>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	4a37      	ldr	r2, [pc, #220]	; (8003e9c <xTaskResumeAll+0x114>)
 8003dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <xTaskResumeAll+0x114>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d161      	bne.n	8003e8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dca:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <xTaskResumeAll+0x118>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05d      	beq.n	8003e8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd2:	e02e      	b.n	8003e32 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dd4:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <xTaskResumeAll+0x11c>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fbdd 	bl	80035a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fbd8 	bl	80035a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <xTaskResumeAll+0x120>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <xTaskResumeAll+0x120>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <xTaskResumeAll+0x124>)
 8003e10:	441a      	add	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7ff fb64 	bl	80034e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <xTaskResumeAll+0x128>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <xTaskResumeAll+0x12c>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <xTaskResumeAll+0x11c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cc      	bne.n	8003dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e40:	f000 fa0e 	bl	8004260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <xTaskResumeAll+0x130>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e50:	f000 f836 	bl	8003ec0 <xTaskIncrementTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <xTaskResumeAll+0x12c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f1      	bne.n	8003e50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e6c:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <xTaskResumeAll+0x130>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <xTaskResumeAll+0x12c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <xTaskResumeAll+0x134>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e8e:	f000 fbd1 	bl	8004634 <vPortExitCritical>

	return xAlreadyYielded;
 8003e92:	68bb      	ldr	r3, [r7, #8]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000414 	.word	0x20000414
 8003ea0:	200003ec 	.word	0x200003ec
 8003ea4:	200003ac 	.word	0x200003ac
 8003ea8:	200003f4 	.word	0x200003f4
 8003eac:	200002f0 	.word	0x200002f0
 8003eb0:	200002ec 	.word	0x200002ec
 8003eb4:	20000400 	.word	0x20000400
 8003eb8:	200003fc 	.word	0x200003fc
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eca:	4b51      	ldr	r3, [pc, #324]	; (8004010 <xTaskIncrementTick+0x150>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 808d 	bne.w	8003fee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <xTaskIncrementTick+0x154>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003edc:	4a4d      	ldr	r2, [pc, #308]	; (8004014 <xTaskIncrementTick+0x154>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d120      	bne.n	8003f2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <xTaskIncrementTick+0x158>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	603b      	str	r3, [r7, #0]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <xTaskIncrementTick+0x46>
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <xTaskIncrementTick+0x15c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a41      	ldr	r2, [pc, #260]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4a41      	ldr	r2, [pc, #260]	; (800401c <xTaskIncrementTick+0x15c>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b40      	ldr	r3, [pc, #256]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	4a3f      	ldr	r2, [pc, #252]	; (8004020 <xTaskIncrementTick+0x160>)
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	f000 f99b 	bl	8004260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <xTaskIncrementTick+0x164>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d34d      	bcc.n	8003fd0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f34:	4b38      	ldr	r3, [pc, #224]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <xTaskIncrementTick+0x82>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xTaskIncrementTick+0x84>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <xTaskIncrementTick+0x164>)
 8003f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4e:	601a      	str	r2, [r3, #0]
					break;
 8003f50:	e03e      	b.n	8003fd0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <xTaskIncrementTick+0x158>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d203      	bcs.n	8003f72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <xTaskIncrementTick+0x164>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
						break;
 8003f70:	e02e      	b.n	8003fd0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fb12 	bl	80035a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3318      	adds	r3, #24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fb09 	bl	80035a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <xTaskIncrementTick+0x168>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <xTaskIncrementTick+0x168>)
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <xTaskIncrementTick+0x16c>)
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7ff fa95 	bl	80034e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <xTaskIncrementTick+0x170>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3b4      	bcc.n	8003f34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	e7b1      	b.n	8003f34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <xTaskIncrementTick+0x170>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4915      	ldr	r1, [pc, #84]	; (800402c <xTaskIncrementTick+0x16c>)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d907      	bls.n	8003ff8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e004      	b.n	8003ff8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTaskIncrementTick+0x174>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <xTaskIncrementTick+0x174>)
 8003ff6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <xTaskIncrementTick+0x178>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000414 	.word	0x20000414
 8004014:	200003f0 	.word	0x200003f0
 8004018:	200003a4 	.word	0x200003a4
 800401c:	200003a8 	.word	0x200003a8
 8004020:	20000404 	.word	0x20000404
 8004024:	2000040c 	.word	0x2000040c
 8004028:	200003f4 	.word	0x200003f4
 800402c:	200002f0 	.word	0x200002f0
 8004030:	200002ec 	.word	0x200002ec
 8004034:	200003fc 	.word	0x200003fc
 8004038:	20000400 	.word	0x20000400

0800403c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <vTaskSwitchContext+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <vTaskSwitchContext+0xa8>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004050:	e03f      	b.n	80040d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <vTaskSwitchContext+0xa8>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <vTaskSwitchContext+0xac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	f1c3 031f 	rsb	r3, r3, #31
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	491f      	ldr	r1, [pc, #124]	; (80040ec <vTaskSwitchContext+0xb0>)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vTaskSwitchContext+0x5a>
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <vTaskSwitchContext+0xb0>)
 80040a4:	4413      	add	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3308      	adds	r3, #8
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d104      	bne.n	80040c8 <vTaskSwitchContext+0x8c>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <vTaskSwitchContext+0xb4>)
 80040d0:	6013      	str	r3, [r2, #0]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000414 	.word	0x20000414
 80040e4:	20000400 	.word	0x20000400
 80040e8:	200003f4 	.word	0x200003f4
 80040ec:	200002f0 	.word	0x200002f0
 80040f0:	200002ec 	.word	0x200002ec

080040f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040fc:	f000 f852 	bl	80041a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <prvIdleTask+0x28>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d9f9      	bls.n	80040fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <prvIdleTask+0x2c>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004118:	e7f0      	b.n	80040fc <prvIdleTask+0x8>
 800411a:	bf00      	nop
 800411c:	200002f0 	.word	0x200002f0
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	e00c      	b.n	800414a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <prvInitialiseTaskLists+0x60>)
 800413c:	4413      	add	r3, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f9a4 	bl	800348c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3301      	adds	r3, #1
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b06      	cmp	r3, #6
 800414e:	d9ef      	bls.n	8004130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004150:	480d      	ldr	r0, [pc, #52]	; (8004188 <prvInitialiseTaskLists+0x64>)
 8004152:	f7ff f99b 	bl	800348c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004156:	480d      	ldr	r0, [pc, #52]	; (800418c <prvInitialiseTaskLists+0x68>)
 8004158:	f7ff f998 	bl	800348c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800415c:	480c      	ldr	r0, [pc, #48]	; (8004190 <prvInitialiseTaskLists+0x6c>)
 800415e:	f7ff f995 	bl	800348c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <prvInitialiseTaskLists+0x70>)
 8004164:	f7ff f992 	bl	800348c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <prvInitialiseTaskLists+0x74>)
 800416a:	f7ff f98f 	bl	800348c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvInitialiseTaskLists+0x78>)
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <prvInitialiseTaskLists+0x64>)
 8004172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvInitialiseTaskLists+0x7c>)
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <prvInitialiseTaskLists+0x68>)
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200002f0 	.word	0x200002f0
 8004188:	2000037c 	.word	0x2000037c
 800418c:	20000390 	.word	0x20000390
 8004190:	200003ac 	.word	0x200003ac
 8004194:	200003c0 	.word	0x200003c0
 8004198:	200003d8 	.word	0x200003d8
 800419c:	200003a4 	.word	0x200003a4
 80041a0:	200003a8 	.word	0x200003a8

080041a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041aa:	e019      	b.n	80041e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041ac:	f000 fa12 	bl	80045d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041b0:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <prvCheckTasksWaitingTermination+0x50>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff f9ef 	bl	80035a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <prvCheckTasksWaitingTermination+0x54>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <prvCheckTasksWaitingTermination+0x54>)
 80041ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d6:	f000 fa2d 	bl	8004634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f810 	bl	8004200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <prvCheckTasksWaitingTermination+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e1      	bne.n	80041ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200003c0 	.word	0x200003c0
 80041f8:	200003ec 	.word	0x200003ec
 80041fc:	200003d4 	.word	0x200003d4

08004200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fbc2 	bl	80049a0 <vPortFree>
				vPortFree( pxTCB );
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fbbf 	bl	80049a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004222:	e018      	b.n	8004256 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422a:	2b01      	cmp	r3, #1
 800422c:	d103      	bne.n	8004236 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fbb6 	bl	80049a0 <vPortFree>
	}
 8004234:	e00f      	b.n	8004256 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423c:	2b02      	cmp	r3, #2
 800423e:	d00a      	beq.n	8004256 <prvDeleteTCB+0x56>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <prvDeleteTCB+0x54>
	}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <prvResetNextTaskUnblockTime+0x44>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <prvResetNextTaskUnblockTime+0x14>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <prvResetNextTaskUnblockTime+0x16>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <prvResetNextTaskUnblockTime+0x48>)
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004282:	e008      	b.n	8004296 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <prvResetNextTaskUnblockTime+0x44>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <prvResetNextTaskUnblockTime+0x48>)
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	200003a4 	.word	0x200003a4
 80042a8:	2000040c 	.word	0x2000040c

080042ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f96c 	bl	80035a0 <uxListRemove>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	2201      	movs	r2, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43da      	mvns	r2, r3
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4013      	ands	r3, r2
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d10a      	bne.n	8004304 <prvAddCurrentTaskToDelayedList+0x58>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	481a      	ldr	r0, [pc, #104]	; (8004368 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042fe:	f7ff f8f2 	bl	80034e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004302:	e026      	b.n	8004352 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	429a      	cmp	r2, r3
 800431a:	d209      	bcs.n	8004330 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <prvAddCurrentTaskToDelayedList+0xc0>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff f900 	bl	800352e <vListInsert>
}
 800432e:	e010      	b.n	8004352 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7ff f8f6 	bl	800352e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d202      	bcs.n	8004352 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <prvAddCurrentTaskToDelayedList+0xc8>)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	200003f0 	.word	0x200003f0
 8004360:	200002ec 	.word	0x200002ec
 8004364:	200003f4 	.word	0x200003f4
 8004368:	200003d8 	.word	0x200003d8
 800436c:	200003a8 	.word	0x200003a8
 8004370:	200003a4 	.word	0x200003a4
 8004374:	2000040c 	.word	0x2000040c

08004378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b04      	subs	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b04      	subs	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <pxPortInitialiseStack+0x64>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b14      	subs	r3, #20
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b04      	subs	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f06f 0202 	mvn.w	r2, #2
 80043c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b20      	subs	r3, #32
 80043cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	080043e1 	.word	0x080043e1

080043e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <prvTaskExitError+0x54>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d00a      	beq.n	800440a <prvTaskExitError+0x2a>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <prvTaskExitError+0x28>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60bb      	str	r3, [r7, #8]
}
 800441c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800441e:	bf00      	nop
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0fc      	beq.n	8004420 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	2000000c 	.word	0x2000000c
	...

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	4770      	bx	lr
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst2>:
 8004460:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <prvPortStartFirstTask+0x24>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8814 	msr	CONTROL, r0
 800447a:	b662      	cpsie	i
 800447c:	b661      	cpsie	f
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	df00      	svc	0
 8004488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800448a:	bf00      	nop
 800448c:	e000ed08 	.word	0xe000ed08

08004490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <xPortStartScheduler+0x120>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a46      	ldr	r2, [pc, #280]	; (80045b4 <xPortStartScheduler+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10a      	bne.n	80044b6 <xPortStartScheduler+0x26>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	613b      	str	r3, [r7, #16]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <xPortStartScheduler+0x120>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <xPortStartScheduler+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10a      	bne.n	80044d6 <xPortStartScheduler+0x46>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60fb      	str	r3, [r7, #12]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <xPortStartScheduler+0x12c>)
 80044d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <xPortStartScheduler+0x130>)
 80044fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <xPortStartScheduler+0x134>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004504:	e009      	b.n	800451a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004506:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <xPortStartScheduler+0x134>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <xPortStartScheduler+0x134>)
 800450e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d0ef      	beq.n	8004506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <xPortStartScheduler+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1c3 0307 	rsb	r3, r3, #7
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00a      	beq.n	8004548 <xPortStartScheduler+0xb8>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <xPortStartScheduler+0x134>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xPortStartScheduler+0x134>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <xPortStartScheduler+0x134>)
 800455c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <xPortStartScheduler+0x138>)
 800456c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <xPortStartScheduler+0x138>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <xPortStartScheduler+0x138>)
 8004578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800457c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800457e:	f000 f8dd 	bl	800473c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <xPortStartScheduler+0x13c>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004588:	f000 f8fc 	bl	8004784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <xPortStartScheduler+0x140>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <xPortStartScheduler+0x140>)
 8004592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004598:	f7ff ff66 	bl	8004468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800459c:	f7ff fd4e 	bl	800403c <vTaskSwitchContext>
	prvTaskExitError();
 80045a0:	f7ff ff1e 	bl	80043e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	410fc271 	.word	0x410fc271
 80045b8:	410fc270 	.word	0x410fc270
 80045bc:	e000e400 	.word	0xe000e400
 80045c0:	20000418 	.word	0x20000418
 80045c4:	2000041c 	.word	0x2000041c
 80045c8:	e000ed20 	.word	0xe000ed20
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	e000ef34 	.word	0xe000ef34

080045d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <vPortEnterCritical+0x58>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <vPortEnterCritical+0x58>)
 80045f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <vPortEnterCritical+0x58>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10f      	bne.n	8004620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <vPortEnterCritical+0x5c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <vPortEnterCritical+0x4c>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	603b      	str	r3, [r7, #0]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <vPortEnterCritical+0x4a>
	}
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	2000000c 	.word	0x2000000c
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <vPortExitCritical+0x50>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <vPortExitCritical+0x24>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	607b      	str	r3, [r7, #4]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <vPortExitCritical+0x50>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <vPortExitCritical+0x50>)
 8004660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <vPortExitCritical+0x50>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <vPortExitCritical+0x42>
 800466a:	2300      	movs	r3, #0
 800466c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f383 8811 	msr	BASEPRI, r3
}
 8004674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	2000000c 	.word	0x2000000c
	...

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f01e 0f10 	tst.w	lr, #16
 80046a0:	bf08      	it	eq
 80046a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046b4:	f380 8811 	msr	BASEPRI, r0
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f7ff fcbc 	bl	800403c <vTaskSwitchContext>
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f380 8811 	msr	BASEPRI, r0
 80046cc:	bc09      	pop	{r0, r3}
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d6:	f01e 0f10 	tst.w	lr, #16
 80046da:	bf08      	it	eq
 80046dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046e0:	f380 8809 	msr	PSP, r0
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w

080046f0 <pxCurrentTCBConst>:
 80046f0:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop

080046f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004712:	f7ff fbd5 	bl	8003ec0 <xTaskIncrementTick>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <SysTick_Handler+0x40>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f383 8811 	msr	BASEPRI, r3
}
 800472e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <vPortSetupTimerInterrupt+0x38>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vPortSetupTimerInterrupt+0x3c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <vPortSetupTimerInterrupt+0x40>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <vPortSetupTimerInterrupt+0x44>)
 800475a:	3b01      	subs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e010 	.word	0xe000e010
 8004774:	e000e018 	.word	0xe000e018
 8004778:	20000000 	.word	0x20000000
 800477c:	10624dd3 	.word	0x10624dd3
 8004780:	e000e014 	.word	0xe000e014

08004784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004794 <vPortEnableVFP+0x10>
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800478e:	6001      	str	r1, [r0, #0]
 8004790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004792:	bf00      	nop
 8004794:	e000ed88 	.word	0xe000ed88

08004798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800479e:	f3ef 8305 	mrs	r3, IPSR
 80047a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d914      	bls.n	80047d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <vPortValidateInterruptPriority+0x70>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047b4:	4b15      	ldr	r3, [pc, #84]	; (800480c <vPortValidateInterruptPriority+0x74>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	7afa      	ldrb	r2, [r7, #11]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20a      	bcs.n	80047d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <vPortValidateInterruptPriority+0x78>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <vPortValidateInterruptPriority+0x7c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d90a      	bls.n	80047fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	603b      	str	r3, [r7, #0]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <vPortValidateInterruptPriority+0x60>
	}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e3f0 	.word	0xe000e3f0
 800480c:	20000418 	.word	0x20000418
 8004810:	e000ed0c 	.word	0xe000ed0c
 8004814:	2000041c 	.word	0x2000041c

08004818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004824:	f7ff faa2 	bl	8003d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004828:	4b58      	ldr	r3, [pc, #352]	; (800498c <pvPortMalloc+0x174>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004830:	f000 f910 	bl	8004a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <pvPortMalloc+0x178>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 808e 	bne.w	800495e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004848:	2208      	movs	r2, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <pvPortMalloc+0x6c>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	617b      	str	r3, [r7, #20]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d069      	beq.n	800495e <pvPortMalloc+0x146>
 800488a:	4b42      	ldr	r3, [pc, #264]	; (8004994 <pvPortMalloc+0x17c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d864      	bhi.n	800495e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004894:	4b40      	ldr	r3, [pc, #256]	; (8004998 <pvPortMalloc+0x180>)
 8004896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004898:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <pvPortMalloc+0x180>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489e:	e004      	b.n	80048aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <pvPortMalloc+0xa4>
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f1      	bne.n	80048a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <pvPortMalloc+0x174>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d04b      	beq.n	800495e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2208      	movs	r2, #8
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	2308      	movs	r3, #8
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d91f      	bls.n	8004928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <pvPortMalloc+0xf8>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	613b      	str	r3, [r7, #16]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004922:	69b8      	ldr	r0, [r7, #24]
 8004924:	f000 f8f8 	bl	8004b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <pvPortMalloc+0x17c>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <pvPortMalloc+0x17c>)
 8004934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004936:	4b17      	ldr	r3, [pc, #92]	; (8004994 <pvPortMalloc+0x17c>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <pvPortMalloc+0x184>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d203      	bcs.n	800494a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <pvPortMalloc+0x17c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <pvPortMalloc+0x184>)
 8004948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <pvPortMalloc+0x178>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	431a      	orrs	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800495e:	f7ff fa13 	bl	8003d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <pvPortMalloc+0x16a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <pvPortMalloc+0x168>
	return pvReturn;
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20001028 	.word	0x20001028
 8004990:	20001034 	.word	0x20001034
 8004994:	2000102c 	.word	0x2000102c
 8004998:	20001020 	.word	0x20001020
 800499c:	20001030 	.word	0x20001030

080049a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d048      	beq.n	8004a44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b2:	2308      	movs	r3, #8
 80049b4:	425b      	negs	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <vPortFree+0xac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vPortFree+0x44>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <vPortFree+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <vPortFree+0xac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d019      	beq.n	8004a44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <vPortFree+0xac>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7ff f9a0 	bl	8003d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <vPortFree+0xb0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <vPortFree+0xb0>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f86c 	bl	8004b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a40:	f7ff f9a2 	bl	8003d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20001034 	.word	0x20001034
 8004a50:	2000102c 	.word	0x2000102c

08004a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <prvHeapInit+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <prvHeapInit+0xac>)
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <prvHeapInit+0xb0>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <prvHeapInit+0xb0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvHeapInit+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvHeapInit+0xb4>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <prvHeapInit+0xb8>)
 8004ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvHeapInit+0xbc>)
 8004aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <prvHeapInit+0xc0>)
 8004aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000420 	.word	0x20000420
 8004b04:	20001020 	.word	0x20001020
 8004b08:	20001028 	.word	0x20001028
 8004b0c:	20001030 	.word	0x20001030
 8004b10:	2000102c 	.word	0x2000102c
 8004b14:	20001034 	.word	0x20001034

08004b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <prvInsertBlockIntoFreeList+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <prvInsertBlockIntoFreeList+0x14>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d8f7      	bhi.n	8004b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d108      	bne.n	8004b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d118      	bne.n	8004ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d00d      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e008      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d002      	beq.n	8004bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20001020 	.word	0x20001020
 8004bc8:	20001028 	.word	0x20001028

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000010 	.word	0x20000010

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4d0d      	ldr	r5, [pc, #52]	; (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	; (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2600      	movs	r6, #0
 8004be4:	42a6      	cmp	r6, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4d0b      	ldr	r5, [pc, #44]	; (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	; (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 ffec 	bl	8005bc8 <_init>
 8004bf0:	1b64      	subs	r4, r4, r5
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c00:	4798      	blx	r3
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0a:	4798      	blx	r3
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	08005d4c 	.word	0x08005d4c
 8004c14:	08005d4c 	.word	0x08005d4c
 8004c18:	08005d4c 	.word	0x08005d4c
 8004c1c:	08005d50 	.word	0x08005d50

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <iprintf>:
 8004c30:	b40f      	push	{r0, r1, r2, r3}
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <iprintf+0x2c>)
 8004c34:	b513      	push	{r0, r1, r4, lr}
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	b124      	cbz	r4, 8004c44 <iprintf+0x14>
 8004c3a:	69a3      	ldr	r3, [r4, #24]
 8004c3c:	b913      	cbnz	r3, 8004c44 <iprintf+0x14>
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 fa5e 	bl	8005100 <__sinit>
 8004c44:	ab05      	add	r3, sp, #20
 8004c46:	9a04      	ldr	r2, [sp, #16]
 8004c48:	68a1      	ldr	r1, [r4, #8]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 fc2f 	bl	80054b0 <_vfiprintf_r>
 8004c52:	b002      	add	sp, #8
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	b004      	add	sp, #16
 8004c5a:	4770      	bx	lr
 8004c5c:	20000010 	.word	0x20000010

08004c60 <_puts_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460e      	mov	r6, r1
 8004c64:	4605      	mov	r5, r0
 8004c66:	b118      	cbz	r0, 8004c70 <_puts_r+0x10>
 8004c68:	6983      	ldr	r3, [r0, #24]
 8004c6a:	b90b      	cbnz	r3, 8004c70 <_puts_r+0x10>
 8004c6c:	f000 fa48 	bl	8005100 <__sinit>
 8004c70:	69ab      	ldr	r3, [r5, #24]
 8004c72:	68ac      	ldr	r4, [r5, #8]
 8004c74:	b913      	cbnz	r3, 8004c7c <_puts_r+0x1c>
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fa42 	bl	8005100 <__sinit>
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <_puts_r+0xd0>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d120      	bne.n	8004cc4 <_puts_r+0x64>
 8004c82:	686c      	ldr	r4, [r5, #4]
 8004c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d405      	bmi.n	8004c96 <_puts_r+0x36>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	0598      	lsls	r0, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_puts_r+0x36>
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f000 fad3 	bl	800523c <__retarget_lock_acquire_recursive>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	0719      	lsls	r1, r3, #28
 8004c9a:	d51d      	bpl.n	8004cd8 <_puts_r+0x78>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	b1db      	cbz	r3, 8004cd8 <_puts_r+0x78>
 8004ca0:	3e01      	subs	r6, #1
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	bb39      	cbnz	r1, 8004cfe <_puts_r+0x9e>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da38      	bge.n	8004d24 <_puts_r+0xc4>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f848 	bl	8004d4c <__swbuf_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d011      	beq.n	8004ce4 <_puts_r+0x84>
 8004cc0:	250a      	movs	r5, #10
 8004cc2:	e011      	b.n	8004ce8 <_puts_r+0x88>
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <_puts_r+0xd4>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d101      	bne.n	8004cce <_puts_r+0x6e>
 8004cca:	68ac      	ldr	r4, [r5, #8]
 8004ccc:	e7da      	b.n	8004c84 <_puts_r+0x24>
 8004cce:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <_puts_r+0xd8>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	bf08      	it	eq
 8004cd4:	68ec      	ldreq	r4, [r5, #12]
 8004cd6:	e7d5      	b.n	8004c84 <_puts_r+0x24>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 f888 	bl	8004df0 <__swsetup_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d0dd      	beq.n	8004ca0 <_puts_r+0x40>
 8004ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cea:	07da      	lsls	r2, r3, #31
 8004cec:	d405      	bmi.n	8004cfa <_puts_r+0x9a>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	059b      	lsls	r3, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_puts_r+0x9a>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf6:	f000 faa2 	bl	800523e <__retarget_lock_release_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da04      	bge.n	8004d0c <_puts_r+0xac>
 8004d02:	69a2      	ldr	r2, [r4, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dc06      	bgt.n	8004d16 <_puts_r+0xb6>
 8004d08:	290a      	cmp	r1, #10
 8004d0a:	d004      	beq.n	8004d16 <_puts_r+0xb6>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	6022      	str	r2, [r4, #0]
 8004d12:	7019      	strb	r1, [r3, #0]
 8004d14:	e7c5      	b.n	8004ca2 <_puts_r+0x42>
 8004d16:	4622      	mov	r2, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 f817 	bl	8004d4c <__swbuf_r>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d1bf      	bne.n	8004ca2 <_puts_r+0x42>
 8004d22:	e7df      	b.n	8004ce4 <_puts_r+0x84>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	250a      	movs	r5, #10
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	701d      	strb	r5, [r3, #0]
 8004d2e:	e7db      	b.n	8004ce8 <_puts_r+0x88>
 8004d30:	08005cd8 	.word	0x08005cd8
 8004d34:	08005cf8 	.word	0x08005cf8
 8004d38:	08005cb8 	.word	0x08005cb8

08004d3c <puts>:
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <puts+0xc>)
 8004d3e:	4601      	mov	r1, r0
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f7ff bf8d 	b.w	8004c60 <_puts_r>
 8004d46:	bf00      	nop
 8004d48:	20000010 	.word	0x20000010

08004d4c <__swbuf_r>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	460e      	mov	r6, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	4605      	mov	r5, r0
 8004d54:	b118      	cbz	r0, 8004d5e <__swbuf_r+0x12>
 8004d56:	6983      	ldr	r3, [r0, #24]
 8004d58:	b90b      	cbnz	r3, 8004d5e <__swbuf_r+0x12>
 8004d5a:	f000 f9d1 	bl	8005100 <__sinit>
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <__swbuf_r+0x98>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d12b      	bne.n	8004dbc <__swbuf_r+0x70>
 8004d64:	686c      	ldr	r4, [r5, #4]
 8004d66:	69a3      	ldr	r3, [r4, #24]
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	071a      	lsls	r2, r3, #28
 8004d6e:	d52f      	bpl.n	8004dd0 <__swbuf_r+0x84>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	b36b      	cbz	r3, 8004dd0 <__swbuf_r+0x84>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	1ac0      	subs	r0, r0, r3
 8004d7a:	6963      	ldr	r3, [r4, #20]
 8004d7c:	b2f6      	uxtb	r6, r6
 8004d7e:	4283      	cmp	r3, r0
 8004d80:	4637      	mov	r7, r6
 8004d82:	dc04      	bgt.n	8004d8e <__swbuf_r+0x42>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 f926 	bl	8004fd8 <_fflush_r>
 8004d8c:	bb30      	cbnz	r0, 8004ddc <__swbuf_r+0x90>
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60a3      	str	r3, [r4, #8]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	6022      	str	r2, [r4, #0]
 8004d9a:	701e      	strb	r6, [r3, #0]
 8004d9c:	6963      	ldr	r3, [r4, #20]
 8004d9e:	3001      	adds	r0, #1
 8004da0:	4283      	cmp	r3, r0
 8004da2:	d004      	beq.n	8004dae <__swbuf_r+0x62>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	07db      	lsls	r3, r3, #31
 8004da8:	d506      	bpl.n	8004db8 <__swbuf_r+0x6c>
 8004daa:	2e0a      	cmp	r6, #10
 8004dac:	d104      	bne.n	8004db8 <__swbuf_r+0x6c>
 8004dae:	4621      	mov	r1, r4
 8004db0:	4628      	mov	r0, r5
 8004db2:	f000 f911 	bl	8004fd8 <_fflush_r>
 8004db6:	b988      	cbnz	r0, 8004ddc <__swbuf_r+0x90>
 8004db8:	4638      	mov	r0, r7
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <__swbuf_r+0x9c>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <__swbuf_r+0x7a>
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	e7cf      	b.n	8004d66 <__swbuf_r+0x1a>
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <__swbuf_r+0xa0>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68ec      	ldreq	r4, [r5, #12]
 8004dce:	e7ca      	b.n	8004d66 <__swbuf_r+0x1a>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f80c 	bl	8004df0 <__swsetup_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d0cb      	beq.n	8004d74 <__swbuf_r+0x28>
 8004ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8004de0:	e7ea      	b.n	8004db8 <__swbuf_r+0x6c>
 8004de2:	bf00      	nop
 8004de4:	08005cd8 	.word	0x08005cd8
 8004de8:	08005cf8 	.word	0x08005cf8
 8004dec:	08005cb8 	.word	0x08005cb8

08004df0 <__swsetup_r>:
 8004df0:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <__swsetup_r+0xcc>)
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	681d      	ldr	r5, [r3, #0]
 8004df6:	4606      	mov	r6, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	b125      	cbz	r5, 8004e06 <__swsetup_r+0x16>
 8004dfc:	69ab      	ldr	r3, [r5, #24]
 8004dfe:	b913      	cbnz	r3, 8004e06 <__swsetup_r+0x16>
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 f97d 	bl	8005100 <__sinit>
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <__swsetup_r+0xd0>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d10f      	bne.n	8004e2c <__swsetup_r+0x3c>
 8004e0c:	686c      	ldr	r4, [r5, #4]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e14:	0719      	lsls	r1, r3, #28
 8004e16:	d42c      	bmi.n	8004e72 <__swsetup_r+0x82>
 8004e18:	06dd      	lsls	r5, r3, #27
 8004e1a:	d411      	bmi.n	8004e40 <__swsetup_r+0x50>
 8004e1c:	2309      	movs	r3, #9
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2a:	e03e      	b.n	8004eaa <__swsetup_r+0xba>
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <__swsetup_r+0xd4>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d101      	bne.n	8004e36 <__swsetup_r+0x46>
 8004e32:	68ac      	ldr	r4, [r5, #8]
 8004e34:	e7eb      	b.n	8004e0e <__swsetup_r+0x1e>
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <__swsetup_r+0xd8>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	bf08      	it	eq
 8004e3c:	68ec      	ldreq	r4, [r5, #12]
 8004e3e:	e7e6      	b.n	8004e0e <__swsetup_r+0x1e>
 8004e40:	0758      	lsls	r0, r3, #29
 8004e42:	d512      	bpl.n	8004e6a <__swsetup_r+0x7a>
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	b141      	cbz	r1, 8004e5a <__swsetup_r+0x6a>
 8004e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d002      	beq.n	8004e56 <__swsetup_r+0x66>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 fa59 	bl	8005308 <_free_r>
 8004e56:	2300      	movs	r3, #0
 8004e58:	6363      	str	r3, [r4, #52]	; 0x34
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	2300      	movs	r3, #0
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f043 0308 	orr.w	r3, r3, #8
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	b94b      	cbnz	r3, 8004e8a <__swsetup_r+0x9a>
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e80:	d003      	beq.n	8004e8a <__swsetup_r+0x9a>
 8004e82:	4621      	mov	r1, r4
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 f9ff 	bl	8005288 <__smakebuf_r>
 8004e8a:	89a0      	ldrh	r0, [r4, #12]
 8004e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e90:	f010 0301 	ands.w	r3, r0, #1
 8004e94:	d00a      	beq.n	8004eac <__swsetup_r+0xbc>
 8004e96:	2300      	movs	r3, #0
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	61a3      	str	r3, [r4, #24]
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	b943      	cbnz	r3, 8004eb6 <__swsetup_r+0xc6>
 8004ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ea8:	d1ba      	bne.n	8004e20 <__swsetup_r+0x30>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	0781      	lsls	r1, r0, #30
 8004eae:	bf58      	it	pl
 8004eb0:	6963      	ldrpl	r3, [r4, #20]
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	e7f4      	b.n	8004ea0 <__swsetup_r+0xb0>
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e7f7      	b.n	8004eaa <__swsetup_r+0xba>
 8004eba:	bf00      	nop
 8004ebc:	20000010 	.word	0x20000010
 8004ec0:	08005cd8 	.word	0x08005cd8
 8004ec4:	08005cf8 	.word	0x08005cf8
 8004ec8:	08005cb8 	.word	0x08005cb8

08004ecc <__sflush_r>:
 8004ecc:	898a      	ldrh	r2, [r1, #12]
 8004ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	0710      	lsls	r0, r2, #28
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	d458      	bmi.n	8004f8c <__sflush_r+0xc0>
 8004eda:	684b      	ldr	r3, [r1, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dc05      	bgt.n	8004eec <__sflush_r+0x20>
 8004ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	dc02      	bgt.n	8004eec <__sflush_r+0x20>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	d0f9      	beq.n	8004ee6 <__sflush_r+0x1a>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ef8:	682f      	ldr	r7, [r5, #0]
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	d032      	beq.n	8004f64 <__sflush_r+0x98>
 8004efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	075a      	lsls	r2, r3, #29
 8004f04:	d505      	bpl.n	8004f12 <__sflush_r+0x46>
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	1ac0      	subs	r0, r0, r3
 8004f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f0c:	b10b      	cbz	r3, 8004f12 <__sflush_r+0x46>
 8004f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f10:	1ac0      	subs	r0, r0, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	4602      	mov	r2, r0
 8004f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f18:	6a21      	ldr	r1, [r4, #32]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b0      	blx	r6
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	d106      	bne.n	8004f32 <__sflush_r+0x66>
 8004f24:	6829      	ldr	r1, [r5, #0]
 8004f26:	291d      	cmp	r1, #29
 8004f28:	d82c      	bhi.n	8004f84 <__sflush_r+0xb8>
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <__sflush_r+0x108>)
 8004f2c:	40ca      	lsrs	r2, r1
 8004f2e:	07d6      	lsls	r6, r2, #31
 8004f30:	d528      	bpl.n	8004f84 <__sflush_r+0xb8>
 8004f32:	2200      	movs	r2, #0
 8004f34:	6062      	str	r2, [r4, #4]
 8004f36:	04d9      	lsls	r1, r3, #19
 8004f38:	6922      	ldr	r2, [r4, #16]
 8004f3a:	6022      	str	r2, [r4, #0]
 8004f3c:	d504      	bpl.n	8004f48 <__sflush_r+0x7c>
 8004f3e:	1c42      	adds	r2, r0, #1
 8004f40:	d101      	bne.n	8004f46 <__sflush_r+0x7a>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	b903      	cbnz	r3, 8004f48 <__sflush_r+0x7c>
 8004f46:	6560      	str	r0, [r4, #84]	; 0x54
 8004f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f4a:	602f      	str	r7, [r5, #0]
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d0ca      	beq.n	8004ee6 <__sflush_r+0x1a>
 8004f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f54:	4299      	cmp	r1, r3
 8004f56:	d002      	beq.n	8004f5e <__sflush_r+0x92>
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 f9d5 	bl	8005308 <_free_r>
 8004f5e:	2000      	movs	r0, #0
 8004f60:	6360      	str	r0, [r4, #52]	; 0x34
 8004f62:	e7c1      	b.n	8004ee8 <__sflush_r+0x1c>
 8004f64:	6a21      	ldr	r1, [r4, #32]
 8004f66:	2301      	movs	r3, #1
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b0      	blx	r6
 8004f6c:	1c41      	adds	r1, r0, #1
 8004f6e:	d1c7      	bne.n	8004f00 <__sflush_r+0x34>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0c4      	beq.n	8004f00 <__sflush_r+0x34>
 8004f76:	2b1d      	cmp	r3, #29
 8004f78:	d001      	beq.n	8004f7e <__sflush_r+0xb2>
 8004f7a:	2b16      	cmp	r3, #22
 8004f7c:	d101      	bne.n	8004f82 <__sflush_r+0xb6>
 8004f7e:	602f      	str	r7, [r5, #0]
 8004f80:	e7b1      	b.n	8004ee6 <__sflush_r+0x1a>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f88:	81a3      	strh	r3, [r4, #12]
 8004f8a:	e7ad      	b.n	8004ee8 <__sflush_r+0x1c>
 8004f8c:	690f      	ldr	r7, [r1, #16]
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d0a9      	beq.n	8004ee6 <__sflush_r+0x1a>
 8004f92:	0793      	lsls	r3, r2, #30
 8004f94:	680e      	ldr	r6, [r1, #0]
 8004f96:	bf08      	it	eq
 8004f98:	694b      	ldreq	r3, [r1, #20]
 8004f9a:	600f      	str	r7, [r1, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	eba6 0807 	sub.w	r8, r6, r7
 8004fa4:	608b      	str	r3, [r1, #8]
 8004fa6:	f1b8 0f00 	cmp.w	r8, #0
 8004faa:	dd9c      	ble.n	8004ee6 <__sflush_r+0x1a>
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fb0:	4643      	mov	r3, r8
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b0      	blx	r6
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	dc06      	bgt.n	8004fca <__sflush_r+0xfe>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	e78e      	b.n	8004ee8 <__sflush_r+0x1c>
 8004fca:	4407      	add	r7, r0
 8004fcc:	eba8 0800 	sub.w	r8, r8, r0
 8004fd0:	e7e9      	b.n	8004fa6 <__sflush_r+0xda>
 8004fd2:	bf00      	nop
 8004fd4:	20400001 	.word	0x20400001

08004fd8 <_fflush_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	690b      	ldr	r3, [r1, #16]
 8004fdc:	4605      	mov	r5, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	b913      	cbnz	r3, 8004fe8 <_fflush_r+0x10>
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	b118      	cbz	r0, 8004ff2 <_fflush_r+0x1a>
 8004fea:	6983      	ldr	r3, [r0, #24]
 8004fec:	b90b      	cbnz	r3, 8004ff2 <_fflush_r+0x1a>
 8004fee:	f000 f887 	bl	8005100 <__sinit>
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <_fflush_r+0x6c>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	d11b      	bne.n	8005030 <_fflush_r+0x58>
 8004ff8:	686c      	ldr	r4, [r5, #4]
 8004ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0ef      	beq.n	8004fe2 <_fflush_r+0xa>
 8005002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005004:	07d0      	lsls	r0, r2, #31
 8005006:	d404      	bmi.n	8005012 <_fflush_r+0x3a>
 8005008:	0599      	lsls	r1, r3, #22
 800500a:	d402      	bmi.n	8005012 <_fflush_r+0x3a>
 800500c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500e:	f000 f915 	bl	800523c <__retarget_lock_acquire_recursive>
 8005012:	4628      	mov	r0, r5
 8005014:	4621      	mov	r1, r4
 8005016:	f7ff ff59 	bl	8004ecc <__sflush_r>
 800501a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800501c:	07da      	lsls	r2, r3, #31
 800501e:	4605      	mov	r5, r0
 8005020:	d4e0      	bmi.n	8004fe4 <_fflush_r+0xc>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	059b      	lsls	r3, r3, #22
 8005026:	d4dd      	bmi.n	8004fe4 <_fflush_r+0xc>
 8005028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800502a:	f000 f908 	bl	800523e <__retarget_lock_release_recursive>
 800502e:	e7d9      	b.n	8004fe4 <_fflush_r+0xc>
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <_fflush_r+0x70>)
 8005032:	429c      	cmp	r4, r3
 8005034:	d101      	bne.n	800503a <_fflush_r+0x62>
 8005036:	68ac      	ldr	r4, [r5, #8]
 8005038:	e7df      	b.n	8004ffa <_fflush_r+0x22>
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <_fflush_r+0x74>)
 800503c:	429c      	cmp	r4, r3
 800503e:	bf08      	it	eq
 8005040:	68ec      	ldreq	r4, [r5, #12]
 8005042:	e7da      	b.n	8004ffa <_fflush_r+0x22>
 8005044:	08005cd8 	.word	0x08005cd8
 8005048:	08005cf8 	.word	0x08005cf8
 800504c:	08005cb8 	.word	0x08005cb8

08005050 <std>:
 8005050:	2300      	movs	r3, #0
 8005052:	b510      	push	{r4, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	e9c0 3300 	strd	r3, r3, [r0]
 800505a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800505e:	6083      	str	r3, [r0, #8]
 8005060:	8181      	strh	r1, [r0, #12]
 8005062:	6643      	str	r3, [r0, #100]	; 0x64
 8005064:	81c2      	strh	r2, [r0, #14]
 8005066:	6183      	str	r3, [r0, #24]
 8005068:	4619      	mov	r1, r3
 800506a:	2208      	movs	r2, #8
 800506c:	305c      	adds	r0, #92	; 0x5c
 800506e:	f7ff fdd7 	bl	8004c20 <memset>
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <std+0x38>)
 8005074:	6263      	str	r3, [r4, #36]	; 0x24
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <std+0x3c>)
 8005078:	62a3      	str	r3, [r4, #40]	; 0x28
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <std+0x40>)
 800507c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <std+0x44>)
 8005080:	6224      	str	r4, [r4, #32]
 8005082:	6323      	str	r3, [r4, #48]	; 0x30
 8005084:	bd10      	pop	{r4, pc}
 8005086:	bf00      	nop
 8005088:	08005a59 	.word	0x08005a59
 800508c:	08005a7b 	.word	0x08005a7b
 8005090:	08005ab3 	.word	0x08005ab3
 8005094:	08005ad7 	.word	0x08005ad7

08005098 <_cleanup_r>:
 8005098:	4901      	ldr	r1, [pc, #4]	; (80050a0 <_cleanup_r+0x8>)
 800509a:	f000 b8af 	b.w	80051fc <_fwalk_reent>
 800509e:	bf00      	nop
 80050a0:	08004fd9 	.word	0x08004fd9

080050a4 <__sfmoreglue>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	1e4a      	subs	r2, r1, #1
 80050a8:	2568      	movs	r5, #104	; 0x68
 80050aa:	4355      	muls	r5, r2
 80050ac:	460e      	mov	r6, r1
 80050ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050b2:	f000 f979 	bl	80053a8 <_malloc_r>
 80050b6:	4604      	mov	r4, r0
 80050b8:	b140      	cbz	r0, 80050cc <__sfmoreglue+0x28>
 80050ba:	2100      	movs	r1, #0
 80050bc:	e9c0 1600 	strd	r1, r6, [r0]
 80050c0:	300c      	adds	r0, #12
 80050c2:	60a0      	str	r0, [r4, #8]
 80050c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050c8:	f7ff fdaa 	bl	8004c20 <memset>
 80050cc:	4620      	mov	r0, r4
 80050ce:	bd70      	pop	{r4, r5, r6, pc}

080050d0 <__sfp_lock_acquire>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__sfp_lock_acquire+0x8>)
 80050d2:	f000 b8b3 	b.w	800523c <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20001124 	.word	0x20001124

080050dc <__sfp_lock_release>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__sfp_lock_release+0x8>)
 80050de:	f000 b8ae 	b.w	800523e <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20001124 	.word	0x20001124

080050e8 <__sinit_lock_acquire>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__sinit_lock_acquire+0x8>)
 80050ea:	f000 b8a7 	b.w	800523c <__retarget_lock_acquire_recursive>
 80050ee:	bf00      	nop
 80050f0:	2000111f 	.word	0x2000111f

080050f4 <__sinit_lock_release>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__sinit_lock_release+0x8>)
 80050f6:	f000 b8a2 	b.w	800523e <__retarget_lock_release_recursive>
 80050fa:	bf00      	nop
 80050fc:	2000111f 	.word	0x2000111f

08005100 <__sinit>:
 8005100:	b510      	push	{r4, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	f7ff fff0 	bl	80050e8 <__sinit_lock_acquire>
 8005108:	69a3      	ldr	r3, [r4, #24]
 800510a:	b11b      	cbz	r3, 8005114 <__sinit+0x14>
 800510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005110:	f7ff bff0 	b.w	80050f4 <__sinit_lock_release>
 8005114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005118:	6523      	str	r3, [r4, #80]	; 0x50
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <__sinit+0x68>)
 800511c:	4a13      	ldr	r2, [pc, #76]	; (800516c <__sinit+0x6c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	62a2      	str	r2, [r4, #40]	; 0x28
 8005122:	42a3      	cmp	r3, r4
 8005124:	bf04      	itt	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	61a3      	streq	r3, [r4, #24]
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f820 	bl	8005170 <__sfp>
 8005130:	6060      	str	r0, [r4, #4]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f81c 	bl	8005170 <__sfp>
 8005138:	60a0      	str	r0, [r4, #8]
 800513a:	4620      	mov	r0, r4
 800513c:	f000 f818 	bl	8005170 <__sfp>
 8005140:	2200      	movs	r2, #0
 8005142:	60e0      	str	r0, [r4, #12]
 8005144:	2104      	movs	r1, #4
 8005146:	6860      	ldr	r0, [r4, #4]
 8005148:	f7ff ff82 	bl	8005050 <std>
 800514c:	68a0      	ldr	r0, [r4, #8]
 800514e:	2201      	movs	r2, #1
 8005150:	2109      	movs	r1, #9
 8005152:	f7ff ff7d 	bl	8005050 <std>
 8005156:	68e0      	ldr	r0, [r4, #12]
 8005158:	2202      	movs	r2, #2
 800515a:	2112      	movs	r1, #18
 800515c:	f7ff ff78 	bl	8005050 <std>
 8005160:	2301      	movs	r3, #1
 8005162:	61a3      	str	r3, [r4, #24]
 8005164:	e7d2      	b.n	800510c <__sinit+0xc>
 8005166:	bf00      	nop
 8005168:	08005cb4 	.word	0x08005cb4
 800516c:	08005099 	.word	0x08005099

08005170 <__sfp>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	4607      	mov	r7, r0
 8005174:	f7ff ffac 	bl	80050d0 <__sfp_lock_acquire>
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <__sfp+0x84>)
 800517a:	681e      	ldr	r6, [r3, #0]
 800517c:	69b3      	ldr	r3, [r6, #24]
 800517e:	b913      	cbnz	r3, 8005186 <__sfp+0x16>
 8005180:	4630      	mov	r0, r6
 8005182:	f7ff ffbd 	bl	8005100 <__sinit>
 8005186:	3648      	adds	r6, #72	; 0x48
 8005188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800518c:	3b01      	subs	r3, #1
 800518e:	d503      	bpl.n	8005198 <__sfp+0x28>
 8005190:	6833      	ldr	r3, [r6, #0]
 8005192:	b30b      	cbz	r3, 80051d8 <__sfp+0x68>
 8005194:	6836      	ldr	r6, [r6, #0]
 8005196:	e7f7      	b.n	8005188 <__sfp+0x18>
 8005198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800519c:	b9d5      	cbnz	r5, 80051d4 <__sfp+0x64>
 800519e:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <__sfp+0x88>)
 80051a0:	60e3      	str	r3, [r4, #12]
 80051a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051a6:	6665      	str	r5, [r4, #100]	; 0x64
 80051a8:	f000 f847 	bl	800523a <__retarget_lock_init_recursive>
 80051ac:	f7ff ff96 	bl	80050dc <__sfp_lock_release>
 80051b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051b8:	6025      	str	r5, [r4, #0]
 80051ba:	61a5      	str	r5, [r4, #24]
 80051bc:	2208      	movs	r2, #8
 80051be:	4629      	mov	r1, r5
 80051c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051c4:	f7ff fd2c 	bl	8004c20 <memset>
 80051c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051d0:	4620      	mov	r0, r4
 80051d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d4:	3468      	adds	r4, #104	; 0x68
 80051d6:	e7d9      	b.n	800518c <__sfp+0x1c>
 80051d8:	2104      	movs	r1, #4
 80051da:	4638      	mov	r0, r7
 80051dc:	f7ff ff62 	bl	80050a4 <__sfmoreglue>
 80051e0:	4604      	mov	r4, r0
 80051e2:	6030      	str	r0, [r6, #0]
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1d5      	bne.n	8005194 <__sfp+0x24>
 80051e8:	f7ff ff78 	bl	80050dc <__sfp_lock_release>
 80051ec:	230c      	movs	r3, #12
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	e7ee      	b.n	80051d0 <__sfp+0x60>
 80051f2:	bf00      	nop
 80051f4:	08005cb4 	.word	0x08005cb4
 80051f8:	ffff0001 	.word	0xffff0001

080051fc <_fwalk_reent>:
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	4606      	mov	r6, r0
 8005202:	4688      	mov	r8, r1
 8005204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005208:	2700      	movs	r7, #0
 800520a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800520e:	f1b9 0901 	subs.w	r9, r9, #1
 8005212:	d505      	bpl.n	8005220 <_fwalk_reent+0x24>
 8005214:	6824      	ldr	r4, [r4, #0]
 8005216:	2c00      	cmp	r4, #0
 8005218:	d1f7      	bne.n	800520a <_fwalk_reent+0xe>
 800521a:	4638      	mov	r0, r7
 800521c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005220:	89ab      	ldrh	r3, [r5, #12]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d907      	bls.n	8005236 <_fwalk_reent+0x3a>
 8005226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522a:	3301      	adds	r3, #1
 800522c:	d003      	beq.n	8005236 <_fwalk_reent+0x3a>
 800522e:	4629      	mov	r1, r5
 8005230:	4630      	mov	r0, r6
 8005232:	47c0      	blx	r8
 8005234:	4307      	orrs	r7, r0
 8005236:	3568      	adds	r5, #104	; 0x68
 8005238:	e7e9      	b.n	800520e <_fwalk_reent+0x12>

0800523a <__retarget_lock_init_recursive>:
 800523a:	4770      	bx	lr

0800523c <__retarget_lock_acquire_recursive>:
 800523c:	4770      	bx	lr

0800523e <__retarget_lock_release_recursive>:
 800523e:	4770      	bx	lr

08005240 <__swhatbuf_r>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	460e      	mov	r6, r1
 8005244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005248:	2900      	cmp	r1, #0
 800524a:	b096      	sub	sp, #88	; 0x58
 800524c:	4614      	mov	r4, r2
 800524e:	461d      	mov	r5, r3
 8005250:	da07      	bge.n	8005262 <__swhatbuf_r+0x22>
 8005252:	2300      	movs	r3, #0
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	89b3      	ldrh	r3, [r6, #12]
 8005258:	061a      	lsls	r2, r3, #24
 800525a:	d410      	bmi.n	800527e <__swhatbuf_r+0x3e>
 800525c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005260:	e00e      	b.n	8005280 <__swhatbuf_r+0x40>
 8005262:	466a      	mov	r2, sp
 8005264:	f000 fc5e 	bl	8005b24 <_fstat_r>
 8005268:	2800      	cmp	r0, #0
 800526a:	dbf2      	blt.n	8005252 <__swhatbuf_r+0x12>
 800526c:	9a01      	ldr	r2, [sp, #4]
 800526e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005276:	425a      	negs	r2, r3
 8005278:	415a      	adcs	r2, r3
 800527a:	602a      	str	r2, [r5, #0]
 800527c:	e7ee      	b.n	800525c <__swhatbuf_r+0x1c>
 800527e:	2340      	movs	r3, #64	; 0x40
 8005280:	2000      	movs	r0, #0
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	b016      	add	sp, #88	; 0x58
 8005286:	bd70      	pop	{r4, r5, r6, pc}

08005288 <__smakebuf_r>:
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800528c:	079d      	lsls	r5, r3, #30
 800528e:	4606      	mov	r6, r0
 8005290:	460c      	mov	r4, r1
 8005292:	d507      	bpl.n	80052a4 <__smakebuf_r+0x1c>
 8005294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	2301      	movs	r3, #1
 800529e:	6163      	str	r3, [r4, #20]
 80052a0:	b002      	add	sp, #8
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	ab01      	add	r3, sp, #4
 80052a6:	466a      	mov	r2, sp
 80052a8:	f7ff ffca 	bl	8005240 <__swhatbuf_r>
 80052ac:	9900      	ldr	r1, [sp, #0]
 80052ae:	4605      	mov	r5, r0
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 f879 	bl	80053a8 <_malloc_r>
 80052b6:	b948      	cbnz	r0, 80052cc <__smakebuf_r+0x44>
 80052b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052bc:	059a      	lsls	r2, r3, #22
 80052be:	d4ef      	bmi.n	80052a0 <__smakebuf_r+0x18>
 80052c0:	f023 0303 	bic.w	r3, r3, #3
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	e7e3      	b.n	8005294 <__smakebuf_r+0xc>
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <__smakebuf_r+0x7c>)
 80052ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	6020      	str	r0, [r4, #0]
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	9b00      	ldr	r3, [sp, #0]
 80052dc:	6163      	str	r3, [r4, #20]
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	6120      	str	r0, [r4, #16]
 80052e2:	b15b      	cbz	r3, 80052fc <__smakebuf_r+0x74>
 80052e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 fc2d 	bl	8005b48 <_isatty_r>
 80052ee:	b128      	cbz	r0, 80052fc <__smakebuf_r+0x74>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	89a0      	ldrh	r0, [r4, #12]
 80052fe:	4305      	orrs	r5, r0
 8005300:	81a5      	strh	r5, [r4, #12]
 8005302:	e7cd      	b.n	80052a0 <__smakebuf_r+0x18>
 8005304:	08005099 	.word	0x08005099

08005308 <_free_r>:
 8005308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800530a:	2900      	cmp	r1, #0
 800530c:	d048      	beq.n	80053a0 <_free_r+0x98>
 800530e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005312:	9001      	str	r0, [sp, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f1a1 0404 	sub.w	r4, r1, #4
 800531a:	bfb8      	it	lt
 800531c:	18e4      	addlt	r4, r4, r3
 800531e:	f000 fc35 	bl	8005b8c <__malloc_lock>
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <_free_r+0x9c>)
 8005324:	9801      	ldr	r0, [sp, #4]
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	4615      	mov	r5, r2
 800532a:	b933      	cbnz	r3, 800533a <_free_r+0x32>
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	6014      	str	r4, [r2, #0]
 8005330:	b003      	add	sp, #12
 8005332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005336:	f000 bc2f 	b.w	8005b98 <__malloc_unlock>
 800533a:	42a3      	cmp	r3, r4
 800533c:	d90b      	bls.n	8005356 <_free_r+0x4e>
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	1862      	adds	r2, r4, r1
 8005342:	4293      	cmp	r3, r2
 8005344:	bf04      	itt	eq
 8005346:	681a      	ldreq	r2, [r3, #0]
 8005348:	685b      	ldreq	r3, [r3, #4]
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	bf04      	itt	eq
 800534e:	1852      	addeq	r2, r2, r1
 8005350:	6022      	streq	r2, [r4, #0]
 8005352:	602c      	str	r4, [r5, #0]
 8005354:	e7ec      	b.n	8005330 <_free_r+0x28>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x58>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x4e>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1855      	adds	r5, r2, r1
 8005364:	42a5      	cmp	r5, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x78>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	4421      	add	r1, r4
 800536c:	1854      	adds	r4, r2, r1
 800536e:	42a3      	cmp	r3, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1dd      	bne.n	8005330 <_free_r+0x28>
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4421      	add	r1, r4
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	e7d7      	b.n	8005330 <_free_r+0x28>
 8005380:	d902      	bls.n	8005388 <_free_r+0x80>
 8005382:	230c      	movs	r3, #12
 8005384:	6003      	str	r3, [r0, #0]
 8005386:	e7d3      	b.n	8005330 <_free_r+0x28>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7c7      	b.n	8005330 <_free_r+0x28>
 80053a0:	b003      	add	sp, #12
 80053a2:	bd30      	pop	{r4, r5, pc}
 80053a4:	20001038 	.word	0x20001038

080053a8 <_malloc_r>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	1ccd      	adds	r5, r1, #3
 80053ac:	f025 0503 	bic.w	r5, r5, #3
 80053b0:	3508      	adds	r5, #8
 80053b2:	2d0c      	cmp	r5, #12
 80053b4:	bf38      	it	cc
 80053b6:	250c      	movcc	r5, #12
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	4606      	mov	r6, r0
 80053bc:	db01      	blt.n	80053c2 <_malloc_r+0x1a>
 80053be:	42a9      	cmp	r1, r5
 80053c0:	d903      	bls.n	80053ca <_malloc_r+0x22>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	2000      	movs	r0, #0
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ca:	f000 fbdf 	bl	8005b8c <__malloc_lock>
 80053ce:	4921      	ldr	r1, [pc, #132]	; (8005454 <_malloc_r+0xac>)
 80053d0:	680a      	ldr	r2, [r1, #0]
 80053d2:	4614      	mov	r4, r2
 80053d4:	b99c      	cbnz	r4, 80053fe <_malloc_r+0x56>
 80053d6:	4f20      	ldr	r7, [pc, #128]	; (8005458 <_malloc_r+0xb0>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	b923      	cbnz	r3, 80053e6 <_malloc_r+0x3e>
 80053dc:	4621      	mov	r1, r4
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 fb2a 	bl	8005a38 <_sbrk_r>
 80053e4:	6038      	str	r0, [r7, #0]
 80053e6:	4629      	mov	r1, r5
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 fb25 	bl	8005a38 <_sbrk_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d123      	bne.n	800543a <_malloc_r+0x92>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 fbce 	bl	8005b98 <__malloc_unlock>
 80053fc:	e7e3      	b.n	80053c6 <_malloc_r+0x1e>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	1b5b      	subs	r3, r3, r5
 8005402:	d417      	bmi.n	8005434 <_malloc_r+0x8c>
 8005404:	2b0b      	cmp	r3, #11
 8005406:	d903      	bls.n	8005410 <_malloc_r+0x68>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	441c      	add	r4, r3
 800540c:	6025      	str	r5, [r4, #0]
 800540e:	e004      	b.n	800541a <_malloc_r+0x72>
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	42a2      	cmp	r2, r4
 8005414:	bf0c      	ite	eq
 8005416:	600b      	streq	r3, [r1, #0]
 8005418:	6053      	strne	r3, [r2, #4]
 800541a:	4630      	mov	r0, r6
 800541c:	f000 fbbc 	bl	8005b98 <__malloc_unlock>
 8005420:	f104 000b 	add.w	r0, r4, #11
 8005424:	1d23      	adds	r3, r4, #4
 8005426:	f020 0007 	bic.w	r0, r0, #7
 800542a:	1ac2      	subs	r2, r0, r3
 800542c:	d0cc      	beq.n	80053c8 <_malloc_r+0x20>
 800542e:	1a1b      	subs	r3, r3, r0
 8005430:	50a3      	str	r3, [r4, r2]
 8005432:	e7c9      	b.n	80053c8 <_malloc_r+0x20>
 8005434:	4622      	mov	r2, r4
 8005436:	6864      	ldr	r4, [r4, #4]
 8005438:	e7cc      	b.n	80053d4 <_malloc_r+0x2c>
 800543a:	1cc4      	adds	r4, r0, #3
 800543c:	f024 0403 	bic.w	r4, r4, #3
 8005440:	42a0      	cmp	r0, r4
 8005442:	d0e3      	beq.n	800540c <_malloc_r+0x64>
 8005444:	1a21      	subs	r1, r4, r0
 8005446:	4630      	mov	r0, r6
 8005448:	f000 faf6 	bl	8005a38 <_sbrk_r>
 800544c:	3001      	adds	r0, #1
 800544e:	d1dd      	bne.n	800540c <_malloc_r+0x64>
 8005450:	e7cf      	b.n	80053f2 <_malloc_r+0x4a>
 8005452:	bf00      	nop
 8005454:	20001038 	.word	0x20001038
 8005458:	2000103c 	.word	0x2000103c

0800545c <__sfputc_r>:
 800545c:	6893      	ldr	r3, [r2, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	b410      	push	{r4}
 8005464:	6093      	str	r3, [r2, #8]
 8005466:	da08      	bge.n	800547a <__sfputc_r+0x1e>
 8005468:	6994      	ldr	r4, [r2, #24]
 800546a:	42a3      	cmp	r3, r4
 800546c:	db01      	blt.n	8005472 <__sfputc_r+0x16>
 800546e:	290a      	cmp	r1, #10
 8005470:	d103      	bne.n	800547a <__sfputc_r+0x1e>
 8005472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005476:	f7ff bc69 	b.w	8004d4c <__swbuf_r>
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	1c58      	adds	r0, r3, #1
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	7019      	strb	r1, [r3, #0]
 8005482:	4608      	mov	r0, r1
 8005484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005488:	4770      	bx	lr

0800548a <__sfputs_r>:
 800548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	4614      	mov	r4, r2
 8005492:	18d5      	adds	r5, r2, r3
 8005494:	42ac      	cmp	r4, r5
 8005496:	d101      	bne.n	800549c <__sfputs_r+0x12>
 8005498:	2000      	movs	r0, #0
 800549a:	e007      	b.n	80054ac <__sfputs_r+0x22>
 800549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a0:	463a      	mov	r2, r7
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7ff ffda 	bl	800545c <__sfputc_r>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d1f3      	bne.n	8005494 <__sfputs_r+0xa>
 80054ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b0 <_vfiprintf_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	460d      	mov	r5, r1
 80054b6:	b09d      	sub	sp, #116	; 0x74
 80054b8:	4614      	mov	r4, r2
 80054ba:	4698      	mov	r8, r3
 80054bc:	4606      	mov	r6, r0
 80054be:	b118      	cbz	r0, 80054c8 <_vfiprintf_r+0x18>
 80054c0:	6983      	ldr	r3, [r0, #24]
 80054c2:	b90b      	cbnz	r3, 80054c8 <_vfiprintf_r+0x18>
 80054c4:	f7ff fe1c 	bl	8005100 <__sinit>
 80054c8:	4b89      	ldr	r3, [pc, #548]	; (80056f0 <_vfiprintf_r+0x240>)
 80054ca:	429d      	cmp	r5, r3
 80054cc:	d11b      	bne.n	8005506 <_vfiprintf_r+0x56>
 80054ce:	6875      	ldr	r5, [r6, #4]
 80054d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d2:	07d9      	lsls	r1, r3, #31
 80054d4:	d405      	bmi.n	80054e2 <_vfiprintf_r+0x32>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_vfiprintf_r+0x32>
 80054dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054de:	f7ff fead 	bl	800523c <__retarget_lock_acquire_recursive>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	d501      	bpl.n	80054ec <_vfiprintf_r+0x3c>
 80054e8:	692b      	ldr	r3, [r5, #16]
 80054ea:	b9eb      	cbnz	r3, 8005528 <_vfiprintf_r+0x78>
 80054ec:	4629      	mov	r1, r5
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff fc7e 	bl	8004df0 <__swsetup_r>
 80054f4:	b1c0      	cbz	r0, 8005528 <_vfiprintf_r+0x78>
 80054f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f8:	07dc      	lsls	r4, r3, #31
 80054fa:	d50e      	bpl.n	800551a <_vfiprintf_r+0x6a>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b01d      	add	sp, #116	; 0x74
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <_vfiprintf_r+0x244>)
 8005508:	429d      	cmp	r5, r3
 800550a:	d101      	bne.n	8005510 <_vfiprintf_r+0x60>
 800550c:	68b5      	ldr	r5, [r6, #8]
 800550e:	e7df      	b.n	80054d0 <_vfiprintf_r+0x20>
 8005510:	4b79      	ldr	r3, [pc, #484]	; (80056f8 <_vfiprintf_r+0x248>)
 8005512:	429d      	cmp	r5, r3
 8005514:	bf08      	it	eq
 8005516:	68f5      	ldreq	r5, [r6, #12]
 8005518:	e7da      	b.n	80054d0 <_vfiprintf_r+0x20>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	0598      	lsls	r0, r3, #22
 800551e:	d4ed      	bmi.n	80054fc <_vfiprintf_r+0x4c>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7ff fe8c 	bl	800523e <__retarget_lock_release_recursive>
 8005526:	e7e9      	b.n	80054fc <_vfiprintf_r+0x4c>
 8005528:	2300      	movs	r3, #0
 800552a:	9309      	str	r3, [sp, #36]	; 0x24
 800552c:	2320      	movs	r3, #32
 800552e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005532:	f8cd 800c 	str.w	r8, [sp, #12]
 8005536:	2330      	movs	r3, #48	; 0x30
 8005538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056fc <_vfiprintf_r+0x24c>
 800553c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	4623      	mov	r3, r4
 8005546:	469a      	mov	sl, r3
 8005548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800554c:	b10a      	cbz	r2, 8005552 <_vfiprintf_r+0xa2>
 800554e:	2a25      	cmp	r2, #37	; 0x25
 8005550:	d1f9      	bne.n	8005546 <_vfiprintf_r+0x96>
 8005552:	ebba 0b04 	subs.w	fp, sl, r4
 8005556:	d00b      	beq.n	8005570 <_vfiprintf_r+0xc0>
 8005558:	465b      	mov	r3, fp
 800555a:	4622      	mov	r2, r4
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ff93 	bl	800548a <__sfputs_r>
 8005564:	3001      	adds	r0, #1
 8005566:	f000 80aa 	beq.w	80056be <_vfiprintf_r+0x20e>
 800556a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800556c:	445a      	add	r2, fp
 800556e:	9209      	str	r2, [sp, #36]	; 0x24
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a2 	beq.w	80056be <_vfiprintf_r+0x20e>
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	9307      	str	r3, [sp, #28]
 800558c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005590:	931a      	str	r3, [sp, #104]	; 0x68
 8005592:	4654      	mov	r4, sl
 8005594:	2205      	movs	r2, #5
 8005596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559a:	4858      	ldr	r0, [pc, #352]	; (80056fc <_vfiprintf_r+0x24c>)
 800559c:	f7fa fe20 	bl	80001e0 <memchr>
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	b9d8      	cbnz	r0, 80055dc <_vfiprintf_r+0x12c>
 80055a4:	06d1      	lsls	r1, r2, #27
 80055a6:	bf44      	itt	mi
 80055a8:	2320      	movmi	r3, #32
 80055aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ae:	0713      	lsls	r3, r2, #28
 80055b0:	bf44      	itt	mi
 80055b2:	232b      	movmi	r3, #43	; 0x2b
 80055b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b2a      	cmp	r3, #42	; 0x2a
 80055be:	d015      	beq.n	80055ec <_vfiprintf_r+0x13c>
 80055c0:	9a07      	ldr	r2, [sp, #28]
 80055c2:	4654      	mov	r4, sl
 80055c4:	2000      	movs	r0, #0
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4621      	mov	r1, r4
 80055cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d0:	3b30      	subs	r3, #48	; 0x30
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d94e      	bls.n	8005674 <_vfiprintf_r+0x1c4>
 80055d6:	b1b0      	cbz	r0, 8005606 <_vfiprintf_r+0x156>
 80055d8:	9207      	str	r2, [sp, #28]
 80055da:	e014      	b.n	8005606 <_vfiprintf_r+0x156>
 80055dc:	eba0 0308 	sub.w	r3, r0, r8
 80055e0:	fa09 f303 	lsl.w	r3, r9, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	46a2      	mov	sl, r4
 80055ea:	e7d2      	b.n	8005592 <_vfiprintf_r+0xe2>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9103      	str	r1, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbb      	ittet	lt
 80055f8:	425b      	neglt	r3, r3
 80055fa:	f042 0202 	orrlt.w	r2, r2, #2
 80055fe:	9307      	strge	r3, [sp, #28]
 8005600:	9307      	strlt	r3, [sp, #28]
 8005602:	bfb8      	it	lt
 8005604:	9204      	strlt	r2, [sp, #16]
 8005606:	7823      	ldrb	r3, [r4, #0]
 8005608:	2b2e      	cmp	r3, #46	; 0x2e
 800560a:	d10c      	bne.n	8005626 <_vfiprintf_r+0x176>
 800560c:	7863      	ldrb	r3, [r4, #1]
 800560e:	2b2a      	cmp	r3, #42	; 0x2a
 8005610:	d135      	bne.n	800567e <_vfiprintf_r+0x1ce>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	9203      	str	r2, [sp, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfb8      	it	lt
 800561e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005622:	3402      	adds	r4, #2
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800570c <_vfiprintf_r+0x25c>
 800562a:	7821      	ldrb	r1, [r4, #0]
 800562c:	2203      	movs	r2, #3
 800562e:	4650      	mov	r0, sl
 8005630:	f7fa fdd6 	bl	80001e0 <memchr>
 8005634:	b140      	cbz	r0, 8005648 <_vfiprintf_r+0x198>
 8005636:	2340      	movs	r3, #64	; 0x40
 8005638:	eba0 000a 	sub.w	r0, r0, sl
 800563c:	fa03 f000 	lsl.w	r0, r3, r0
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	4303      	orrs	r3, r0
 8005644:	3401      	adds	r4, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	482c      	ldr	r0, [pc, #176]	; (8005700 <_vfiprintf_r+0x250>)
 800564e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005652:	2206      	movs	r2, #6
 8005654:	f7fa fdc4 	bl	80001e0 <memchr>
 8005658:	2800      	cmp	r0, #0
 800565a:	d03f      	beq.n	80056dc <_vfiprintf_r+0x22c>
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <_vfiprintf_r+0x254>)
 800565e:	bb1b      	cbnz	r3, 80056a8 <_vfiprintf_r+0x1f8>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	3307      	adds	r3, #7
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	3308      	adds	r3, #8
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566e:	443b      	add	r3, r7
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	e767      	b.n	8005544 <_vfiprintf_r+0x94>
 8005674:	fb0c 3202 	mla	r2, ip, r2, r3
 8005678:	460c      	mov	r4, r1
 800567a:	2001      	movs	r0, #1
 800567c:	e7a5      	b.n	80055ca <_vfiprintf_r+0x11a>
 800567e:	2300      	movs	r3, #0
 8005680:	3401      	adds	r4, #1
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	4619      	mov	r1, r3
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4620      	mov	r0, r4
 800568c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005690:	3a30      	subs	r2, #48	; 0x30
 8005692:	2a09      	cmp	r2, #9
 8005694:	d903      	bls.n	800569e <_vfiprintf_r+0x1ee>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c5      	beq.n	8005626 <_vfiprintf_r+0x176>
 800569a:	9105      	str	r1, [sp, #20]
 800569c:	e7c3      	b.n	8005626 <_vfiprintf_r+0x176>
 800569e:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a2:	4604      	mov	r4, r0
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7f0      	b.n	800568a <_vfiprintf_r+0x1da>
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <_vfiprintf_r+0x258>)
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	4630      	mov	r0, r6
 80056b4:	f3af 8000 	nop.w
 80056b8:	4607      	mov	r7, r0
 80056ba:	1c78      	adds	r0, r7, #1
 80056bc:	d1d6      	bne.n	800566c <_vfiprintf_r+0x1bc>
 80056be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c0:	07d9      	lsls	r1, r3, #31
 80056c2:	d405      	bmi.n	80056d0 <_vfiprintf_r+0x220>
 80056c4:	89ab      	ldrh	r3, [r5, #12]
 80056c6:	059a      	lsls	r2, r3, #22
 80056c8:	d402      	bmi.n	80056d0 <_vfiprintf_r+0x220>
 80056ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056cc:	f7ff fdb7 	bl	800523e <__retarget_lock_release_recursive>
 80056d0:	89ab      	ldrh	r3, [r5, #12]
 80056d2:	065b      	lsls	r3, r3, #25
 80056d4:	f53f af12 	bmi.w	80054fc <_vfiprintf_r+0x4c>
 80056d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056da:	e711      	b.n	8005500 <_vfiprintf_r+0x50>
 80056dc:	ab03      	add	r3, sp, #12
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <_vfiprintf_r+0x258>)
 80056e4:	a904      	add	r1, sp, #16
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f880 	bl	80057ec <_printf_i>
 80056ec:	e7e4      	b.n	80056b8 <_vfiprintf_r+0x208>
 80056ee:	bf00      	nop
 80056f0:	08005cd8 	.word	0x08005cd8
 80056f4:	08005cf8 	.word	0x08005cf8
 80056f8:	08005cb8 	.word	0x08005cb8
 80056fc:	08005d18 	.word	0x08005d18
 8005700:	08005d22 	.word	0x08005d22
 8005704:	00000000 	.word	0x00000000
 8005708:	0800548b 	.word	0x0800548b
 800570c:	08005d1e 	.word	0x08005d1e

08005710 <_printf_common>:
 8005710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	4616      	mov	r6, r2
 8005716:	4699      	mov	r9, r3
 8005718:	688a      	ldr	r2, [r1, #8]
 800571a:	690b      	ldr	r3, [r1, #16]
 800571c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005720:	4293      	cmp	r3, r2
 8005722:	bfb8      	it	lt
 8005724:	4613      	movlt	r3, r2
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800572c:	4607      	mov	r7, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b10a      	cbz	r2, 8005736 <_printf_common+0x26>
 8005732:	3301      	adds	r3, #1
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	0699      	lsls	r1, r3, #26
 800573a:	bf42      	ittt	mi
 800573c:	6833      	ldrmi	r3, [r6, #0]
 800573e:	3302      	addmi	r3, #2
 8005740:	6033      	strmi	r3, [r6, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	f015 0506 	ands.w	r5, r5, #6
 8005748:	d106      	bne.n	8005758 <_printf_common+0x48>
 800574a:	f104 0a19 	add.w	sl, r4, #25
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	6832      	ldr	r2, [r6, #0]
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	42ab      	cmp	r3, r5
 8005756:	dc26      	bgt.n	80057a6 <_printf_common+0x96>
 8005758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800575c:	1e13      	subs	r3, r2, #0
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	2301      	movne	r3, #1
 8005764:	0692      	lsls	r2, r2, #26
 8005766:	d42b      	bmi.n	80057c0 <_printf_common+0xb0>
 8005768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800576c:	4649      	mov	r1, r9
 800576e:	4638      	mov	r0, r7
 8005770:	47c0      	blx	r8
 8005772:	3001      	adds	r0, #1
 8005774:	d01e      	beq.n	80057b4 <_printf_common+0xa4>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	68e5      	ldr	r5, [r4, #12]
 800577a:	6832      	ldr	r2, [r6, #0]
 800577c:	f003 0306 	and.w	r3, r3, #6
 8005780:	2b04      	cmp	r3, #4
 8005782:	bf08      	it	eq
 8005784:	1aad      	subeq	r5, r5, r2
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	bf0c      	ite	eq
 800578c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005790:	2500      	movne	r5, #0
 8005792:	4293      	cmp	r3, r2
 8005794:	bfc4      	itt	gt
 8005796:	1a9b      	subgt	r3, r3, r2
 8005798:	18ed      	addgt	r5, r5, r3
 800579a:	2600      	movs	r6, #0
 800579c:	341a      	adds	r4, #26
 800579e:	42b5      	cmp	r5, r6
 80057a0:	d11a      	bne.n	80057d8 <_printf_common+0xc8>
 80057a2:	2000      	movs	r0, #0
 80057a4:	e008      	b.n	80057b8 <_printf_common+0xa8>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4649      	mov	r1, r9
 80057ac:	4638      	mov	r0, r7
 80057ae:	47c0      	blx	r8
 80057b0:	3001      	adds	r0, #1
 80057b2:	d103      	bne.n	80057bc <_printf_common+0xac>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057bc:	3501      	adds	r5, #1
 80057be:	e7c6      	b.n	800574e <_printf_common+0x3e>
 80057c0:	18e1      	adds	r1, r4, r3
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	2030      	movs	r0, #48	; 0x30
 80057c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ca:	4422      	add	r2, r4
 80057cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d4:	3302      	adds	r3, #2
 80057d6:	e7c7      	b.n	8005768 <_printf_common+0x58>
 80057d8:	2301      	movs	r3, #1
 80057da:	4622      	mov	r2, r4
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d0e6      	beq.n	80057b4 <_printf_common+0xa4>
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7d9      	b.n	800579e <_printf_common+0x8e>
	...

080057ec <_printf_i>:
 80057ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	460c      	mov	r4, r1
 80057f2:	4691      	mov	r9, r2
 80057f4:	7e27      	ldrb	r7, [r4, #24]
 80057f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057f8:	2f78      	cmp	r7, #120	; 0x78
 80057fa:	4680      	mov	r8, r0
 80057fc:	469a      	mov	sl, r3
 80057fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005802:	d807      	bhi.n	8005814 <_printf_i+0x28>
 8005804:	2f62      	cmp	r7, #98	; 0x62
 8005806:	d80a      	bhi.n	800581e <_printf_i+0x32>
 8005808:	2f00      	cmp	r7, #0
 800580a:	f000 80d8 	beq.w	80059be <_printf_i+0x1d2>
 800580e:	2f58      	cmp	r7, #88	; 0x58
 8005810:	f000 80a3 	beq.w	800595a <_printf_i+0x16e>
 8005814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800581c:	e03a      	b.n	8005894 <_printf_i+0xa8>
 800581e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005822:	2b15      	cmp	r3, #21
 8005824:	d8f6      	bhi.n	8005814 <_printf_i+0x28>
 8005826:	a001      	add	r0, pc, #4	; (adr r0, 800582c <_printf_i+0x40>)
 8005828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800582c:	08005885 	.word	0x08005885
 8005830:	08005899 	.word	0x08005899
 8005834:	08005815 	.word	0x08005815
 8005838:	08005815 	.word	0x08005815
 800583c:	08005815 	.word	0x08005815
 8005840:	08005815 	.word	0x08005815
 8005844:	08005899 	.word	0x08005899
 8005848:	08005815 	.word	0x08005815
 800584c:	08005815 	.word	0x08005815
 8005850:	08005815 	.word	0x08005815
 8005854:	08005815 	.word	0x08005815
 8005858:	080059a5 	.word	0x080059a5
 800585c:	080058c9 	.word	0x080058c9
 8005860:	08005987 	.word	0x08005987
 8005864:	08005815 	.word	0x08005815
 8005868:	08005815 	.word	0x08005815
 800586c:	080059c7 	.word	0x080059c7
 8005870:	08005815 	.word	0x08005815
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005815 	.word	0x08005815
 800587c:	08005815 	.word	0x08005815
 8005880:	0800598f 	.word	0x0800598f
 8005884:	680b      	ldr	r3, [r1, #0]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	600a      	str	r2, [r1, #0]
 800588c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005894:	2301      	movs	r3, #1
 8005896:	e0a3      	b.n	80059e0 <_printf_i+0x1f4>
 8005898:	6825      	ldr	r5, [r4, #0]
 800589a:	6808      	ldr	r0, [r1, #0]
 800589c:	062e      	lsls	r6, r5, #24
 800589e:	f100 0304 	add.w	r3, r0, #4
 80058a2:	d50a      	bpl.n	80058ba <_printf_i+0xce>
 80058a4:	6805      	ldr	r5, [r0, #0]
 80058a6:	600b      	str	r3, [r1, #0]
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	da03      	bge.n	80058b4 <_printf_i+0xc8>
 80058ac:	232d      	movs	r3, #45	; 0x2d
 80058ae:	426d      	negs	r5, r5
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b4:	485e      	ldr	r0, [pc, #376]	; (8005a30 <_printf_i+0x244>)
 80058b6:	230a      	movs	r3, #10
 80058b8:	e019      	b.n	80058ee <_printf_i+0x102>
 80058ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058be:	6805      	ldr	r5, [r0, #0]
 80058c0:	600b      	str	r3, [r1, #0]
 80058c2:	bf18      	it	ne
 80058c4:	b22d      	sxthne	r5, r5
 80058c6:	e7ef      	b.n	80058a8 <_printf_i+0xbc>
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	6825      	ldr	r5, [r4, #0]
 80058cc:	1d18      	adds	r0, r3, #4
 80058ce:	6008      	str	r0, [r1, #0]
 80058d0:	0628      	lsls	r0, r5, #24
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0xec>
 80058d4:	681d      	ldr	r5, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0xf2>
 80058d8:	0669      	lsls	r1, r5, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0xe8>
 80058dc:	881d      	ldrh	r5, [r3, #0]
 80058de:	4854      	ldr	r0, [pc, #336]	; (8005a30 <_printf_i+0x244>)
 80058e0:	2f6f      	cmp	r7, #111	; 0x6f
 80058e2:	bf0c      	ite	eq
 80058e4:	2308      	moveq	r3, #8
 80058e6:	230a      	movne	r3, #10
 80058e8:	2100      	movs	r1, #0
 80058ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ee:	6866      	ldr	r6, [r4, #4]
 80058f0:	60a6      	str	r6, [r4, #8]
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	bfa2      	ittt	ge
 80058f6:	6821      	ldrge	r1, [r4, #0]
 80058f8:	f021 0104 	bicge.w	r1, r1, #4
 80058fc:	6021      	strge	r1, [r4, #0]
 80058fe:	b90d      	cbnz	r5, 8005904 <_printf_i+0x118>
 8005900:	2e00      	cmp	r6, #0
 8005902:	d04d      	beq.n	80059a0 <_printf_i+0x1b4>
 8005904:	4616      	mov	r6, r2
 8005906:	fbb5 f1f3 	udiv	r1, r5, r3
 800590a:	fb03 5711 	mls	r7, r3, r1, r5
 800590e:	5dc7      	ldrb	r7, [r0, r7]
 8005910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005914:	462f      	mov	r7, r5
 8005916:	42bb      	cmp	r3, r7
 8005918:	460d      	mov	r5, r1
 800591a:	d9f4      	bls.n	8005906 <_printf_i+0x11a>
 800591c:	2b08      	cmp	r3, #8
 800591e:	d10b      	bne.n	8005938 <_printf_i+0x14c>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	07df      	lsls	r7, r3, #31
 8005924:	d508      	bpl.n	8005938 <_printf_i+0x14c>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	6861      	ldr	r1, [r4, #4]
 800592a:	4299      	cmp	r1, r3
 800592c:	bfde      	ittt	le
 800592e:	2330      	movle	r3, #48	; 0x30
 8005930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005938:	1b92      	subs	r2, r2, r6
 800593a:	6122      	str	r2, [r4, #16]
 800593c:	f8cd a000 	str.w	sl, [sp]
 8005940:	464b      	mov	r3, r9
 8005942:	aa03      	add	r2, sp, #12
 8005944:	4621      	mov	r1, r4
 8005946:	4640      	mov	r0, r8
 8005948:	f7ff fee2 	bl	8005710 <_printf_common>
 800594c:	3001      	adds	r0, #1
 800594e:	d14c      	bne.n	80059ea <_printf_i+0x1fe>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	b004      	add	sp, #16
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595a:	4835      	ldr	r0, [pc, #212]	; (8005a30 <_printf_i+0x244>)
 800595c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	680e      	ldr	r6, [r1, #0]
 8005964:	061f      	lsls	r7, r3, #24
 8005966:	f856 5b04 	ldr.w	r5, [r6], #4
 800596a:	600e      	str	r6, [r1, #0]
 800596c:	d514      	bpl.n	8005998 <_printf_i+0x1ac>
 800596e:	07d9      	lsls	r1, r3, #31
 8005970:	bf44      	itt	mi
 8005972:	f043 0320 	orrmi.w	r3, r3, #32
 8005976:	6023      	strmi	r3, [r4, #0]
 8005978:	b91d      	cbnz	r5, 8005982 <_printf_i+0x196>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f023 0320 	bic.w	r3, r3, #32
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	2310      	movs	r3, #16
 8005984:	e7b0      	b.n	80058e8 <_printf_i+0xfc>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	2378      	movs	r3, #120	; 0x78
 8005990:	4828      	ldr	r0, [pc, #160]	; (8005a34 <_printf_i+0x248>)
 8005992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005996:	e7e3      	b.n	8005960 <_printf_i+0x174>
 8005998:	065e      	lsls	r6, r3, #25
 800599a:	bf48      	it	mi
 800599c:	b2ad      	uxthmi	r5, r5
 800599e:	e7e6      	b.n	800596e <_printf_i+0x182>
 80059a0:	4616      	mov	r6, r2
 80059a2:	e7bb      	b.n	800591c <_printf_i+0x130>
 80059a4:	680b      	ldr	r3, [r1, #0]
 80059a6:	6826      	ldr	r6, [r4, #0]
 80059a8:	6960      	ldr	r0, [r4, #20]
 80059aa:	1d1d      	adds	r5, r3, #4
 80059ac:	600d      	str	r5, [r1, #0]
 80059ae:	0635      	lsls	r5, r6, #24
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0x1cc>
 80059b4:	6018      	str	r0, [r3, #0]
 80059b6:	e002      	b.n	80059be <_printf_i+0x1d2>
 80059b8:	0671      	lsls	r1, r6, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0x1c8>
 80059bc:	8018      	strh	r0, [r3, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	4616      	mov	r6, r2
 80059c4:	e7ba      	b.n	800593c <_printf_i+0x150>
 80059c6:	680b      	ldr	r3, [r1, #0]
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	600a      	str	r2, [r1, #0]
 80059cc:	681e      	ldr	r6, [r3, #0]
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	2100      	movs	r1, #0
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7fa fc04 	bl	80001e0 <memchr>
 80059d8:	b108      	cbz	r0, 80059de <_printf_i+0x1f2>
 80059da:	1b80      	subs	r0, r0, r6
 80059dc:	6060      	str	r0, [r4, #4]
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	2300      	movs	r3, #0
 80059e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e8:	e7a8      	b.n	800593c <_printf_i+0x150>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	4632      	mov	r2, r6
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	47d0      	blx	sl
 80059f4:	3001      	adds	r0, #1
 80059f6:	d0ab      	beq.n	8005950 <_printf_i+0x164>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	079b      	lsls	r3, r3, #30
 80059fc:	d413      	bmi.n	8005a26 <_printf_i+0x23a>
 80059fe:	68e0      	ldr	r0, [r4, #12]
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	4298      	cmp	r0, r3
 8005a04:	bfb8      	it	lt
 8005a06:	4618      	movlt	r0, r3
 8005a08:	e7a4      	b.n	8005954 <_printf_i+0x168>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4649      	mov	r1, r9
 8005a10:	4640      	mov	r0, r8
 8005a12:	47d0      	blx	sl
 8005a14:	3001      	adds	r0, #1
 8005a16:	d09b      	beq.n	8005950 <_printf_i+0x164>
 8005a18:	3501      	adds	r5, #1
 8005a1a:	68e3      	ldr	r3, [r4, #12]
 8005a1c:	9903      	ldr	r1, [sp, #12]
 8005a1e:	1a5b      	subs	r3, r3, r1
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	dcf2      	bgt.n	8005a0a <_printf_i+0x21e>
 8005a24:	e7eb      	b.n	80059fe <_printf_i+0x212>
 8005a26:	2500      	movs	r5, #0
 8005a28:	f104 0619 	add.w	r6, r4, #25
 8005a2c:	e7f5      	b.n	8005a1a <_printf_i+0x22e>
 8005a2e:	bf00      	nop
 8005a30:	08005d29 	.word	0x08005d29
 8005a34:	08005d3a 	.word	0x08005d3a

08005a38 <_sbrk_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_sbrk_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fa ff3a 	bl	80008bc <_sbrk>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_sbrk_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_sbrk_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20001128 	.word	0x20001128

08005a58 <__sread>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 f8a0 	bl	8005ba4 <_read_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfab      	itete	ge
 8005a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a6c:	181b      	addge	r3, r3, r0
 8005a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a72:	bfac      	ite	ge
 8005a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a76:	81a3      	strhlt	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__swrite>:
 8005a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	461f      	mov	r7, r3
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	05db      	lsls	r3, r3, #23
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4616      	mov	r6, r2
 8005a8a:	d505      	bpl.n	8005a98 <__swrite+0x1e>
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	2302      	movs	r3, #2
 8005a92:	2200      	movs	r2, #0
 8005a94:	f000 f868 	bl	8005b68 <_lseek_r>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	f000 b817 	b.w	8005ae0 <_write_r>

08005ab2 <__sseek>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 f855 	bl	8005b68 <_lseek_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	bf15      	itete	ne
 8005ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strheq	r3, [r4, #12]
 8005ad0:	bf18      	it	ne
 8005ad2:	81a3      	strhne	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__sclose>:
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 b813 	b.w	8005b04 <_close_r>
	...

08005ae0 <_write_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d07      	ldr	r5, [pc, #28]	; (8005b00 <_write_r+0x20>)
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	4611      	mov	r1, r2
 8005aea:	2200      	movs	r2, #0
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7fa fe93 	bl	800081a <_write>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_write_r+0x1e>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_write_r+0x1e>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20001128 	.word	0x20001128

08005b04 <_close_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d06      	ldr	r5, [pc, #24]	; (8005b20 <_close_r+0x1c>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	f7fa fe9f 	bl	8000852 <_close>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_close_r+0x1a>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_close_r+0x1a>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20001128 	.word	0x20001128

08005b24 <_fstat_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_fstat_r+0x20>)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	f7fa fe9a 	bl	800086a <_fstat>
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	d102      	bne.n	8005b40 <_fstat_r+0x1c>
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	b103      	cbz	r3, 8005b40 <_fstat_r+0x1c>
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	20001128 	.word	0x20001128

08005b48 <_isatty_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	; (8005b64 <_isatty_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fa fe99 	bl	800088a <_isatty>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_isatty_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_isatty_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20001128 	.word	0x20001128

08005b68 <_lseek_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_lseek_r+0x20>)
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fa fe92 	bl	80008a0 <_lseek>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_lseek_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_lseek_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20001128 	.word	0x20001128

08005b8c <__malloc_lock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_lock+0x8>)
 8005b8e:	f7ff bb55 	b.w	800523c <__retarget_lock_acquire_recursive>
 8005b92:	bf00      	nop
 8005b94:	20001120 	.word	0x20001120

08005b98 <__malloc_unlock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__malloc_unlock+0x8>)
 8005b9a:	f7ff bb50 	b.w	800523e <__retarget_lock_release_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	20001120 	.word	0x20001120

08005ba4 <_read_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d07      	ldr	r5, [pc, #28]	; (8005bc4 <_read_r+0x20>)
 8005ba8:	4604      	mov	r4, r0
 8005baa:	4608      	mov	r0, r1
 8005bac:	4611      	mov	r1, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	602a      	str	r2, [r5, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7fa fe14 	bl	80007e0 <_read>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_read_r+0x1e>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_read_r+0x1e>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	20001128 	.word	0x20001128

08005bc8 <_init>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	bf00      	nop
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr

08005bd4 <_fini>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr
