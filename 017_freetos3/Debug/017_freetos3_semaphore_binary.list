
017_freetos3_semaphore_binary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d20  08005d20  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005d20  08005d20  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d20  08005d20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a0  20000010  08005d38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  08005d38  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015365  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f18  00000000  00000000  000353a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a68  00000000  00000000  0003a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140e5  00000000  00000000  0005bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1d84  00000000  00000000  00070045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141dc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  00141e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b40 	.word	0x08005b40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005b40 	.word	0x08005b40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <vApplicationGetIdleTaskMemory+0x2c>)
 8000200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <vApplicationGetIdleTaskMemory+0x30>)
 8000206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2280      	movs	r2, #128	; 0x80
 800020c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800020e:	bf00      	nop
 8000210:	3714      	adds	r7, #20
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c
 8000220:	20000080 	.word	0x20000080

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b5b0      	push	{r4, r5, r7, lr}
 8000226:	b098      	sub	sp, #96	; 0x60
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fb3f 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f859 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8e5 	bl	8000400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8b3 	bl	80003a0 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800023a:	2300      	movs	r3, #0
 800023c:	65bb      	str	r3, [r7, #88]	; 0x58
 800023e:	2300      	movs	r3, #0
 8000240:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000242:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000246:	2101      	movs	r1, #1
 8000248:	4618      	mov	r0, r3
 800024a:	f003 f923 	bl	8003494 <osSemaphoreCreate>
 800024e:	4603      	mov	r3, r0
 8000250:	4a1d      	ldr	r2, [pc, #116]	; (80002c8 <main+0xa4>)
 8000252:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of normal */
  osThreadDef(normal, StartDefaultTask, osPriorityNormal, 0, 128);
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0xa8>)
 8000256:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800025a:	461d      	mov	r5, r3
 800025c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  normalHandle = osThreadCreate(osThread(normal), NULL);
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f8b0 	bl	80033d4 <osThreadCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <main+0xac>)
 8000278:	6013      	str	r3, [r2, #0]

  /* definition and creation of high */
  osThreadDef(high, StartTask02, osPriorityHigh, 0, 128);
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <main+0xb0>)
 800027c:	f107 0420 	add.w	r4, r7, #32
 8000280:	461d      	mov	r5, r3
 8000282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  highHandle = osThreadCreate(osThread(high), NULL);
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f003 f89d 	bl	80033d4 <osThreadCreate>
 800029a:	4603      	mov	r3, r0
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <main+0xb4>)
 800029e:	6013      	str	r3, [r2, #0]

  /* definition and creation of low */
  osThreadDef(low, StartTask03, osPriorityLow, 0, 128);
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0xb8>)
 80002a2:	1d3c      	adds	r4, r7, #4
 80002a4:	461d      	mov	r5, r3
 80002a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lowHandle = osThreadCreate(osThread(low), NULL);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 f88c 	bl	80033d4 <osThreadCreate>
 80002bc:	4603      	mov	r3, r0
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <main+0xbc>)
 80002c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c2:	f003 f880 	bl	80033c6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <main+0xa2>
 80002c8:	20000fd4 	.word	0x20000fd4
 80002cc:	08005b6c 	.word	0x08005b6c
 80002d0:	20000fd0 	.word	0x20000fd0
 80002d4:	08005b88 	.word	0x08005b88
 80002d8:	20000fcc 	.word	0x20000fcc
 80002dc:	08005ba4 	.word	0x08005ba4
 80002e0:	20000fd8 	.word	0x20000fd8

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0a6      	sub	sp, #152	; 0x98
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fc1c 	bl	8005b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2258      	movs	r2, #88	; 0x58
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f005 fc0e 	bl	8005b30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	2302      	movs	r3, #2
 8000316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2310      	movs	r3, #16
 800031e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800032c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fd84 	bl	8000e50 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034e:	f000 f98b 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000362:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fc84 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037a:	f000 f975 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800037e:	2302      	movs	r3, #2
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fedf 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000394:	f000 f968 	bl	8000668 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3798      	adds	r7, #152	; 0x98
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART2_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003e4:	f002 fba6 	bl	8002b34 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ee:	f000 f93b 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000fdc 	.word	0x20000fdc
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <MX_GPIO_Init+0xc4>)
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042a:	613b      	str	r3, [r7, #16]
 800042c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_GPIO_Init+0xc4>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <MX_GPIO_Init+0xc4>)
 800044c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <MX_GPIO_Init+0xc4>)
 8000464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_GPIO_Init+0xc4>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fccf 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_GPIO_Init+0xc8>)
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000498:	f000 fb20 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800049c:	2320      	movs	r3, #32
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fb11 	bl	8000adc <HAL_GPIO_Init>

}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	; 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	10210000 	.word	0x10210000
 80004cc:	48000800 	.word	0x48000800

080004d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered MediumTask\n";
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <StartDefaultTask+0x44>)
 80004da:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80004dc:	68f8      	ldr	r0, [r7, #12]
 80004de:	f7ff fe7f 	bl	80001e0 <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	68f9      	ldr	r1, [r7, #12]
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <StartDefaultTask+0x48>)
 80004ec:	f002 fb70 	bl	8002bd0 <HAL_UART_Transmit>


		char *str2 = "Leaving MediumTask\n\n";
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <StartDefaultTask+0x4c>)
 80004f2:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 80004f4:	68b8      	ldr	r0, [r7, #8]
 80004f6:	f7ff fe73 	bl	80001e0 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	68b9      	ldr	r1, [r7, #8]
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <StartDefaultTask+0x48>)
 8000504:	f002 fb64 	bl	8002bd0 <HAL_UART_Transmit>
		osDelay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f002 ffae 	bl	800346c <osDelay>
  {
 8000510:	e7e2      	b.n	80004d8 <StartDefaultTask+0x8>
 8000512:	bf00      	nop
 8000514:	08005bc0 	.word	0x08005bc0
 8000518:	20000fdc 	.word	0x20000fdc
 800051c:	08005bd4 	.word	0x08005bd4

08000520 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered HighTask and waiting for Semaphore\n";
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <StartTask02+0x74>)
 800052a:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 800052c:	6978      	ldr	r0, [r7, #20]
 800052e:	f7ff fe57 	bl	80001e0 <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	6979      	ldr	r1, [r7, #20]
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <StartTask02+0x78>)
 800053c:	f002 fb48 	bl	8002bd0 <HAL_UART_Transmit>

		osSemaphoreWait( myBinarySem01Handle, osWaitForever);
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <StartTask02+0x7c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f002 ffd5 	bl	80034f8 <osSemaphoreWait>

		char *str3 = "Semaphore acquired by HIGH Task\n";
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <StartTask02+0x80>)
 8000550:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 8000552:	6938      	ldr	r0, [r7, #16]
 8000554:	f7ff fe44 	bl	80001e0 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	6939      	ldr	r1, [r7, #16]
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <StartTask02+0x78>)
 8000562:	f002 fb35 	bl	8002bd0 <HAL_UART_Transmit>

		char *str2 = "Leaving HighTask and releasing Semaphore\n\n";
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <StartTask02+0x84>)
 8000568:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff fe38 	bl	80001e0 <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	b29a      	uxth	r2, r3
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	68f9      	ldr	r1, [r7, #12]
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <StartTask02+0x78>)
 800057a:	f002 fb29 	bl	8002bd0 <HAL_UART_Transmit>

		osSemaphoreRelease( myBinarySem01Handle);
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <StartTask02+0x7c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f806 	bl	8003594 <osSemaphoreRelease>
	    osDelay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f002 ff6e 	bl	800346c <osDelay>
  {
 8000590:	e7ca      	b.n	8000528 <StartTask02+0x8>
 8000592:	bf00      	nop
 8000594:	08005bec 	.word	0x08005bec
 8000598:	20000fdc 	.word	0x20000fdc
 800059c:	20000fd4 	.word	0x20000fd4
 80005a0:	08005c18 	.word	0x08005c18
 80005a4:	08005c3c 	.word	0x08005c3c

080005a8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered LOWTask and waiting for semaphore\n";
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <StartTask03+0x84>)
 80005b2:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80005b4:	6978      	ldr	r0, [r7, #20]
 80005b6:	f7ff fe13 	bl	80001e0 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	6979      	ldr	r1, [r7, #20]
 80005c2:	481b      	ldr	r0, [pc, #108]	; (8000630 <StartTask03+0x88>)
 80005c4:	f002 fb04 	bl	8002bd0 <HAL_UART_Transmit>

		osSemaphoreWait( myBinarySem01Handle, osWaitForever);
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <StartTask03+0x8c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 ff91 	bl	80034f8 <osSemaphoreWait>
		char *str3 = "Semaphore acquired by LOW Task\n";
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <StartTask03+0x90>)
 80005d8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 80005da:	6938      	ldr	r0, [r7, #16]
 80005dc:	f7ff fe00 	bl	80001e0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	6939      	ldr	r1, [r7, #16]
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <StartTask03+0x88>)
 80005ea:	f002 faf1 	bl	8002bd0 <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));  // wait till the pin go low
 80005ee:	bf00      	nop
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <StartTask03+0x94>)
 80005f6:	f000 fbfb 	bl	8000df0 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f7      	bne.n	80005f0 <StartTask03+0x48>

		char *str2 = "Leaving LOWTask and releasing Semaphore\n\n";
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <StartTask03+0x98>)
 8000602:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f7ff fdeb 	bl	80001e0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <StartTask03+0x88>)
 8000614:	f002 fadc 	bl	8002bd0 <HAL_UART_Transmit>

		osSemaphoreRelease( myBinarySem01Handle);
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <StartTask03+0x8c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 ffb9 	bl	8003594 <osSemaphoreRelease>
		osDelay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f002 ff21 	bl	800346c <osDelay>
  {
 800062a:	e7c1      	b.n	80005b0 <StartTask03+0x8>
 800062c:	08005c68 	.word	0x08005c68
 8000630:	20000fdc 	.word	0x20000fdc
 8000634:	20000fd4 	.word	0x20000fd4
 8000638:	08005c94 	.word	0x08005c94
 800063c:	48000800 	.word	0x48000800
 8000640:	08005cb4 	.word	0x08005cb4

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 f93f 	bl	80008d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40012c00 	.word	0x40012c00

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_MspInit+0x4c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <HAL_MspInit+0x4c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x4c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HAL_MspInit+0x4c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <HAL_MspInit+0x4c>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	f06f 0001 	mvn.w	r0, #1
 80006b2:	f000 f9e9 	bl	8000a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_UART_MspInit+0x80>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000716:	230c      	movs	r3, #12
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f000 f9d2 	bl	8000adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40004400 	.word	0x40004400
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	2019      	movs	r0, #25
 800075e:	f000 f993 	bl	8000a88 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000762:	2019      	movs	r0, #25
 8000764:	f000 f9ac 	bl	8000ac0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_InitTick+0x9c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <HAL_InitTick+0x9c>)
 800076e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_InitTick+0x9c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000780:	f107 0210 	add.w	r2, r7, #16
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fcac 	bl	80020e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000790:	f001 fc88 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8000794:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <HAL_InitTick+0xa0>)
 800079a:	fba2 2303 	umull	r2, r3, r2, r3
 800079e:	0c9b      	lsrs	r3, r3, #18
 80007a0:	3b01      	subs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_InitTick+0xa4>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <HAL_InitTick+0xa8>)
 80007a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_InitTick+0xa4>)
 80007ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_InitTick+0xa4>)
 80007b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_InitTick+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_InitTick+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <HAL_InitTick+0xa4>)
 80007c6:	f001 fedf 	bl	8002588 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d104      	bne.n	80007da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <HAL_InitTick+0xa4>)
 80007d2:	f001 ff3b 	bl	800264c <HAL_TIM_Base_Start_IT>
 80007d6:	4603      	mov	r3, r0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3730      	adds	r7, #48	; 0x30
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	431bde83 	.word	0x431bde83
 80007ec:	20001060 	.word	0x20001060
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000826:	f001 ff81 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20001060 	.word	0x20001060

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffd7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f005 f921 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fccb 	bl	8000224 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800089c:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 80008a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a4:	200010b0 	.word	0x200010b0

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f8d8 	bl	8000a72 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff40 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fed4 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	200010ac 	.word	0x200010ac

08000900 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;  
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200010ac 	.word	0x200010ac

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4907      	ldr	r1, [pc, #28]	; (80009b4 <__NVIC_EnableIRQ+0x38>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	; 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff4c 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9a:	f7ff ff61 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000a9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	6978      	ldr	r0, [r7, #20]
 8000aa6:	f7ff ffb1 	bl	8000a0c <NVIC_EncodePriority>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff80 	bl	80009b8 <__NVIC_SetPriority>
}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff54 	bl	800097c <__NVIC_EnableIRQ>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e160      	b.n	8000dae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8152 	beq.w	8000da8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d00b      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b18:	2b11      	cmp	r3, #17
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 0201 	and.w	r2, r3, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0xea>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d123      	bne.n	8000c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	6939      	ldr	r1, [r7, #16]
 8000c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0203 	and.w	r2, r3, #3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 80ac 	beq.w	8000da8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a5d      	ldr	r2, [pc, #372]	; (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c68:	4a59      	ldr	r2, [pc, #356]	; (8000dd0 <HAL_GPIO_Init+0x2f4>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c92:	d025      	beq.n	8000ce0 <HAL_GPIO_Init+0x204>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a4f      	ldr	r2, [pc, #316]	; (8000dd4 <HAL_GPIO_Init+0x2f8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d01f      	beq.n	8000cdc <HAL_GPIO_Init+0x200>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <HAL_GPIO_Init+0x2fc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d019      	beq.n	8000cd8 <HAL_GPIO_Init+0x1fc>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <HAL_GPIO_Init+0x300>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1f8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <HAL_GPIO_Init+0x304>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1f4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a4b      	ldr	r2, [pc, #300]	; (8000de4 <HAL_GPIO_Init+0x308>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1f0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a4a      	ldr	r2, [pc, #296]	; (8000de8 <HAL_GPIO_Init+0x30c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	e00c      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cc8:	2307      	movs	r3, #7
 8000cca:	e00a      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000ccc:	2305      	movs	r3, #5
 8000cce:	e008      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf2:	4937      	ldr	r1, [pc, #220]	; (8000dd0 <HAL_GPIO_Init+0x2f4>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d4e:	4a27      	ldr	r2, [pc, #156]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d78:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f47f ae97 	bne.w	8000aec <HAL_GPIO_Init+0x10>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	48001000 	.word	0x48001000
 8000de4:	48001400 	.word	0x48001400
 8000de8:	48001800 	.word	0x48001800
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e30:	787b      	ldrb	r3, [r7, #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f000 bf01 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 8160 	beq.w	800113a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e7a:	4bae      	ldr	r3, [pc, #696]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d00c      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e86:	4bab      	ldr	r3, [pc, #684]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d159      	bne.n	8000f46 <HAL_RCC_OscConfig+0xf6>
 8000e92:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9e:	d152      	bne.n	8000f46 <HAL_RCC_OscConfig+0xf6>
 8000ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	fab3 f383 	clz	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d102      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x82>
 8000ecc:	4b99      	ldr	r3, [pc, #612]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0xae>
 8000ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000eee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f02:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f06:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f0a:	fa92 f2a2 	rbit	r2, r2
 8000f0e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f12:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	f042 0220 	orr.w	r2, r2, #32
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8102 	beq.w	8001138 <HAL_RCC_OscConfig+0x2e8>
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 80fc 	bne.w	8001138 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f000 be93 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d106      	bne.n	8000f60 <HAL_RCC_OscConfig+0x110>
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e030      	b.n	8000fc2 <HAL_RCC_OscConfig+0x172>
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x134>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01e      	b.n	8000fc2 <HAL_RCC_OscConfig+0x172>
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x15a>
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b65      	ldr	r3, [pc, #404]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a64      	ldr	r2, [pc, #400]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e00b      	b.n	8000fc2 <HAL_RCC_OscConfig+0x172>
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a61      	ldr	r2, [pc, #388]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a5e      	ldr	r2, [pc, #376]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d059      	beq.n	8001080 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc98 	bl	8000900 <HAL_GetTick>
 8000fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fc93 	bl	8000900 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d902      	bls.n	8000fec <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f000 be40 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001000:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <HAL_RCC_OscConfig+0x1ce>
 8001018:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x1fa>
 800101e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001022:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001036:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800103a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800104e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001052:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001056:	fa92 f2a2 	rbit	r2, r2
 800105a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800105e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f002 021f 	and.w	r2, r2, #31
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0ab      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x186>
 800107e:	e05c      	b.n	800113a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fc3e 	bl	8000900 <HAL_GetTick>
 8001084:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108a:	f7ff fc39 	bl	8000900 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d902      	bls.n	80010a0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	f000 bde6 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x282>
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x2ae>
 80010d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_RCC_OscConfig+0x2e4>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001102:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001106:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800110a:	fa92 f2a2 	rbit	r2, r2
 800110e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001112:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f002 021f 	and.w	r2, r2, #31
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ab      	bne.n	800108a <HAL_RCC_OscConfig+0x23a>
 8001132:	e002      	b.n	800113a <HAL_RCC_OscConfig+0x2ea>
 8001134:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8170 	beq.w	800142a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800114a:	4bd0      	ldr	r3, [pc, #832]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001156:	4bcd      	ldr	r3, [pc, #820]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b08      	cmp	r3, #8
 8001160:	d16d      	bne.n	800123e <HAL_RCC_OscConfig+0x3ee>
 8001162:	4bca      	ldr	r3, [pc, #808]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800116a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800116e:	d166      	bne.n	800123e <HAL_RCC_OscConfig+0x3ee>
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001182:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x350>
 800119a:	4bbc      	ldr	r3, [pc, #752]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	e013      	b.n	80011c8 <HAL_RCC_OscConfig+0x378>
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011c4:	4bb1      	ldr	r3, [pc, #708]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011ce:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011de:	fab2 f282 	clz	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <HAL_RCC_OscConfig+0x3ba>
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d002      	beq.n	800120a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	f000 bd31 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	4ba0      	ldr	r3, [pc, #640]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	21f8      	movs	r1, #248	; 0xf8
 800121a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001222:	fa91 f1a1 	rbit	r1, r1
 8001226:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800122a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800122e:	fab1 f181 	clz	r1, r1
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	408b      	lsls	r3, r1
 8001236:	4995      	ldr	r1, [pc, #596]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123c:	e0f5      	b.n	800142a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8085 	beq.w	8001354 <HAL_RCC_OscConfig+0x504>
 800124a:	2301      	movs	r3, #1
 800124c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800125c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800126a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	461a      	mov	r2, r3
 8001272:	2301      	movs	r3, #1
 8001274:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb43 	bl	8000900 <HAL_GetTick>
 800127a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fb3e 	bl	8000900 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d902      	bls.n	8001296 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	f000 bceb 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_OscConfig+0x476>
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e013      	b.n	80012ee <HAL_RCC_OscConfig+0x49e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	2202      	movs	r2, #2
 80012f0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001300:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0af      	beq.n	8001280 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	21f8      	movs	r1, #248	; 0xf8
 8001330:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001338:	fa91 f1a1 	rbit	r1, r1
 800133c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001340:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001344:	fab1 f181 	clz	r1, r1
 8001348:	b2c9      	uxtb	r1, r1
 800134a:	408b      	lsls	r3, r1
 800134c:	494f      	ldr	r1, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
 8001352:	e06a      	b.n	800142a <HAL_RCC_OscConfig+0x5da>
 8001354:	2301      	movs	r3, #1
 8001356:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001366:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001374:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	461a      	mov	r2, r3
 800137c:	2300      	movs	r3, #0
 800137e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fabe 	bl	8000900 <HAL_GetTick>
 8001384:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fab9 	bl	8000900 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d902      	bls.n	80013a0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	f000 bc66 	b.w	8001c6c <HAL_RCC_OscConfig+0xe1c>
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	095b      	lsrs	r3, r3, #5
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x580>
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	e013      	b.n	80013f8 <HAL_RCC_OscConfig+0x5a8>
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	2202      	movs	r2, #2
 80013fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80013fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001402:	fa92 f2a2 	rbit	r2, r2
 8001406:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800140a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f002 021f 	and.w	r2, r2, #31
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1af      	bne.n	800138a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80da 	beq.w	80015ee <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d069      	beq.n	8001518 <HAL_RCC_OscConfig+0x6c8>
 8001444:	2301      	movs	r3, #1
 8001446:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x640>)
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	2301      	movs	r3, #1
 800146c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fa47 	bl	8000900 <HAL_GetTick>
 8001472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e00d      	b.n	8001494 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fa42 	bl	8000900 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d905      	bls.n	8001494 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e3ef      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 800148c:	40021000 	.word	0x40021000
 8001490:	10908120 	.word	0x10908120
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d8:	4ba4      	ldr	r3, [pc, #656]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80014da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e0:	2102      	movs	r1, #2
 80014e2:	6019      	str	r1, [r3, #0]
 80014e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f1a3 	rbit	r1, r3
 80014ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014f2:	6019      	str	r1, [r3, #0]
  return result;
 80014f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0b0      	beq.n	8001478 <HAL_RCC_OscConfig+0x628>
 8001516:	e06a      	b.n	80015ee <HAL_RCC_OscConfig+0x79e>
 8001518:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800152e:	601a      	str	r2, [r3, #0]
  return result;
 8001530:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001534:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x920>)
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	461a      	mov	r2, r3
 8001546:	2300      	movs	r3, #0
 8001548:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff f9d9 	bl	8000900 <HAL_GetTick>
 800154e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e009      	b.n	8001568 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff f9d4 	bl	8000900 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e381      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8001568:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800156c:	2202      	movs	r2, #2
 800156e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b6e      	ldr	r3, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80015b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015b8:	2102      	movs	r1, #2
 80015ba:	6019      	str	r1, [r3, #0]
 80015bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fa93 f1a3 	rbit	r1, r3
 80015c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ca:	6019      	str	r1, [r3, #0]
  return result;
 80015cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1b2      	bne.n	8001554 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8157 	beq.w	80018ac <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d112      	bne.n	8001636 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	4a55      	ldr	r2, [pc, #340]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	61d3      	str	r3, [r2, #28]
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x924>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11a      	bne.n	8001678 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x924>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <HAL_RCC_OscConfig+0x924>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff f957 	bl	8000900 <HAL_GetTick>
 8001652:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff f952 	bl	8000900 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e2ff      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x924>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ef      	beq.n	8001658 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x840>
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a39      	ldr	r2, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e02f      	b.n	80016f0 <HAL_RCC_OscConfig+0x8a0>
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x864>
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a33      	ldr	r2, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0x8a0>
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x888>
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a2a      	ldr	r2, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x8a0>
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06a      	beq.n	80017d0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f901 	bl	8000900 <HAL_GetTick>
 80016fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff f8fc 	bl	8000900 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e2a7      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 800171c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fa93 f2a3 	rbit	r2, r3
 8001746:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800174a:	601a      	str	r2, [r3, #0]
  return result;
 800174c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x928>
 8001766:	4b01      	ldr	r3, [pc, #4]	; (800176c <HAL_RCC_OscConfig+0x91c>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	e013      	b.n	8001794 <HAL_RCC_OscConfig+0x944>
 800176c:	40021000 	.word	0x40021000
 8001770:	10908120 	.word	0x10908120
 8001774:	40007000 	.word	0x40007000
 8001778:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	4bc0      	ldr	r3, [pc, #768]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001798:	2102      	movs	r1, #2
 800179a:	6011      	str	r1, [r2, #0]
 800179c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	fa92 f1a2 	rbit	r1, r2
 80017a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017aa:	6011      	str	r1, [r2, #0]
  return result;
 80017ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d09a      	beq.n	8001704 <HAL_RCC_OscConfig+0x8b4>
 80017ce:	e063      	b.n	8001898 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff f896 	bl	8000900 <HAL_GetTick>
 80017d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f891 	bl	8000900 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e23c      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 80017f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001820:	601a      	str	r2, [r3, #0]
  return result;
 8001822:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0x9f2>
 800183c:	4b95      	ldr	r3, [pc, #596]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	e00d      	b.n	800185e <HAL_RCC_OscConfig+0xa0e>
 8001842:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001846:	2202      	movs	r2, #2
 8001848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001862:	2102      	movs	r1, #2
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	fa92 f1a2 	rbit	r1, r2
 8001870:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001874:	6011      	str	r1, [r2, #0]
  return result;
 8001876:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1a0      	bne.n	80017da <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001898:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a7b      	ldr	r2, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 81d9 	beq.w	8001c6a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	f000 81a6 	beq.w	8001c12 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	f040 811e 	bne.w	8001b0e <HAL_RCC_OscConfig+0xcbe>
 80018d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7fe fffa 	bl	8000900 <HAL_GetTick>
 800190c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e009      	b.n	8001926 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7fe fff5 	bl	8000900 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1a2      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8001926:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800192a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800193e:	601a      	str	r2, [r3, #0]
  return result;
 8001940:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001944:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_RCC_OscConfig+0xb10>
 800195a:	4b4e      	ldr	r3, [pc, #312]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e01b      	b.n	8001998 <HAL_RCC_OscConfig+0xb48>
 8001960:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800197e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800199c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a0:	6011      	str	r1, [r2, #0]
 80019a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fa92 f1a2 	rbit	r1, r2
 80019ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b0:	6011      	str	r1, [r2, #0]
  return result;
 80019b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f042 0220 	orr.w	r2, r2, #32
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d19e      	bne.n	8001912 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f023 020f 	bic.w	r2, r3, #15
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	492c      	ldr	r1, [pc, #176]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a19      	ldr	r1, [r3, #32]
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	4925      	ldr	r1, [pc, #148]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a1c:	601a      	str	r2, [r3, #0]
  return result;
 8001a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	2301      	movs	r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ff61 	bl	8000900 <HAL_GetTick>
 8001a3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7fe ff5c 	bl	8000900 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e109      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8001a58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc48>
 8001a8c:	4b01      	ldr	r3, [pc, #4]	; (8001a94 <HAL_RCC_OscConfig+0xc44>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	e01e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xc80>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0xe28>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ad4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad8:	6011      	str	r1, [r2, #0]
 8001ada:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fa92 f1a2 	rbit	r1, r2
 8001ae4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ae8:	6011      	str	r1, [r2, #0]
  return result;
 8001aea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	fab2 f282 	clz	r2, r2
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f002 021f 	and.w	r2, r2, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d09b      	beq.n	8001a44 <HAL_RCC_OscConfig+0xbf4>
 8001b0c:	e0ad      	b.n	8001c6a <HAL_RCC_OscConfig+0xe1a>
 8001b0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b26:	601a      	str	r2, [r3, #0]
  return result;
 8001b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fedc 	bl	8000900 <HAL_GetTick>
 8001b48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe fed7 	bl	8000900 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e084      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7a:	601a      	str	r2, [r3, #0]
  return result;
 8001b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0xd4c>
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_RCC_OscConfig+0xe28>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd84>
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0xe28>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f107 0214 	add.w	r2, r7, #20
 8001bd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bdc:	6011      	str	r1, [r2, #0]
 8001bde:	f107 0214 	add.w	r2, r7, #20
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	fa92 f1a2 	rbit	r1, r2
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	6011      	str	r1, [r2, #0]
  return result;
 8001bee:	f107 0210 	add.w	r2, r7, #16
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f042 0220 	orr.w	r2, r2, #32
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f002 021f 	and.w	r2, r2, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d19e      	bne.n	8001b4e <HAL_RCC_OscConfig+0xcfe>
 8001c10:	e02b      	b.n	8001c6a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e025      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_RCC_OscConfig+0xe28>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_OscConfig+0xe28>)
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c34:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d111      	bne.n	8001c66 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d108      	bne.n	8001c66 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b09e      	sub	sp, #120	; 0x78
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e162      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b90      	ldr	r3, [pc, #576]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b8d      	ldr	r3, [pc, #564]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	498b      	ldr	r1, [pc, #556]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e14a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b82      	ldr	r3, [pc, #520]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	497f      	ldr	r1, [pc, #508]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80dc 	beq.w	8001ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d13c      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xf6>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xa6>
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e00f      	b.n	8001d42 <HAL_RCC_ClockConfig+0xc6>
 8001d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d34:	663b      	str	r3, [r7, #96]	; 0x60
 8001d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d17b      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0f3      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d13c      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x178>
 8001d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x128>
 8001d9e:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x148>
 8001da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	647b      	str	r3, [r7, #68]	; 0x44
 8001db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
 8001db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13a      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b2      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1a0>
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e00d      	b.n	8001e38 <HAL_RCC_ClockConfig+0x1bc>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2202      	movs	r2, #2
 8001e3a:	61ba      	str	r2, [r7, #24]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	fa92 f2a2 	rbit	r2, r2
 8001e42:	617a      	str	r2, [r7, #20]
  return result;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e079      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	491a      	ldr	r1, [pc, #104]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fd42 	bl	8000900 <HAL_GetTick>
 8001e7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fd3e 	bl	8000900 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e061      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_ClockConfig+0x260>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d214      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCC_ClockConfig+0x25c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e040      	b.n	8001f5a <HAL_RCC_ClockConfig+0x2de>
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_ClockConfig+0x2e8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	491a      	ldr	r1, [pc, #104]	; (8001f64 <HAL_RCC_ClockConfig+0x2e8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4912      	ldr	r1, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f1e:	f000 f829 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_ClockConfig+0x2e8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f2c:	22f0      	movs	r2, #240	; 0xf0
 8001f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	60fa      	str	r2, [r7, #12]
  return result;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	40d3      	lsrs	r3, r2
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x2ec>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	fa21 f303 	lsr.w	r3, r1, r3
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_RCC_ClockConfig+0x2f0>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_RCC_ClockConfig+0x2f4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fbf8 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3778      	adds	r7, #120	; 0x78
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08005ce8 	.word	0x08005ce8
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b08b      	sub	sp, #44	; 0x2c
 8001f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x36>
 8001fa2:	e03f      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fa6:	623b      	str	r3, [r7, #32]
      break;
 8001fa8:	e03f      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	607a      	str	r2, [r7, #4]
  return result;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	40d3      	lsrs	r3, r2
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	fa92 f2a2 	rbit	r2, r2
 8001fe0:	60fa      	str	r2, [r7, #12]
  return result;
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	40d3      	lsrs	r3, r2
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	fbb2 f2f3 	udiv	r2, r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	e007      	b.n	800201e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fbb2 f2f3 	udiv	r2, r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	372c      	adds	r7, #44	; 0x2c
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	007a1200 	.word	0x007a1200
 8002040:	08005d00 	.word	0x08005d00
 8002044:	08005d10 	.word	0x08005d10

08002048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002066:	f7ff ffef 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 800206a:	4601      	mov	r1, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002074:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	603a      	str	r2, [r7, #0]
  return result;
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08005cf8 	.word	0x08005cf8

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020aa:	f7ff ffcd 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 80020ae:	4601      	mov	r1, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	603a      	str	r2, [r7, #0]
  return result;
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	40d3      	lsrs	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08005cf8 	.word	0x08005cf8

080020e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	220f      	movs	r2, #15
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetClockConfig+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0207 	and.w	r2, r3, #7
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	; 0x48
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80d4 	beq.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a41      	ldr	r2, [pc, #260]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fba5 	bl	8000900 <HAL_GetTick>
 80021b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fba1 	bl	8000900 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1d6      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8084 	beq.w	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d07c      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	461a      	mov	r2, r3
 8002246:	2300      	movs	r3, #0
 8002248:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04b      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb51 	bl	8000900 <HAL_GetTick>
 800225e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fb4d 	bl	8000900 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e180      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	61fb      	str	r3, [r7, #28]
  return result;
 8002290:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d108      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022a6:	4b01      	ldr	r3, [pc, #4]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	e00d      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
 80022b4:	10908100 	.word	0x10908100
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	4ba0      	ldr	r3, [pc, #640]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2202      	movs	r2, #2
 80022ca:	613a      	str	r2, [r7, #16]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	60fa      	str	r2, [r7, #12]
  return result;
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0b7      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f2:	4b95      	ldr	r3, [pc, #596]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4992      	ldr	r1, [pc, #584]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002304:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a8d      	ldr	r2, [pc, #564]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f023 0203 	bic.w	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4985      	ldr	r1, [pc, #532]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002342:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	497e      	ldr	r1, [pc, #504]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002360:	4b79      	ldr	r3, [pc, #484]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4976      	ldr	r1, [pc, #472]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f023 0210 	bic.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	496f      	ldr	r1, [pc, #444]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	4967      	ldr	r1, [pc, #412]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f023 0220 	bic.w	r2, r3, #32
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4960      	ldr	r1, [pc, #384]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d8:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	4958      	ldr	r1, [pc, #352]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f6:	4b54      	ldr	r3, [pc, #336]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4951      	ldr	r1, [pc, #324]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002414:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4949      	ldr	r1, [pc, #292]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002432:	4b45      	ldr	r3, [pc, #276]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4942      	ldr	r1, [pc, #264]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	4933      	ldr	r1, [pc, #204]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	492b      	ldr	r1, [pc, #172]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4924      	ldr	r1, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	4915      	ldr	r1, [pc, #84]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	490d      	ldr	r1, [pc, #52]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	4906      	ldr	r1, [pc, #24]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002540:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	e002      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	490b      	ldr	r1, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002556:	4313      	orrs	r3, r2
 8002558:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	4904      	ldr	r1, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002574:	4313      	orrs	r3, r2
 8002576:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3748      	adds	r7, #72	; 0x48
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e049      	b.n	800262e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f841 	bl	8002636 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 f9f8 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <HAL_TIM_Base_Start_IT+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d018      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_TIM_Base_Start_IT+0xc8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_TIM_Base_Start_IT+0xd0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_TIM_Base_Start_IT+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x76>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_TIM_Base_Start_IT+0xd8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d115      	bne.n	80026ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_TIM_Base_Start_IT+0xdc>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d015      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0xb4>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d011      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	e008      	b.n	8002700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e000      	b.n	8002702 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40013400 	.word	0x40013400
 8002720:	40014000 	.word	0x40014000
 8002724:	40015000 	.word	0x40015000
 8002728:	00010007 	.word	0x00010007

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0202 	mvn.w	r2, #2
 8002758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f905 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8f7 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f908 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8db 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8cd 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8de 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8b1 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8a3 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8b4 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b10      	cmp	r3, #16
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b10      	cmp	r3, #16
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0210 	mvn.w	r2, #16
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2208      	movs	r2, #8
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f887 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f879 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f88a 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fd feca 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f918 	bl	8002b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ea:	d10e      	bne.n	800290a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d107      	bne.n	800290a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f90b 	bl	8002b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d10e      	bne.n	8002936 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d107      	bne.n	8002936 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f838 	bl	80029a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0220 	mvn.w	r2, #32
 800295a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8cb 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a42      	ldr	r2, [pc, #264]	; (8002ad8 <TIM_Base_SetConfig+0x11c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d00f      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3f      	ldr	r2, [pc, #252]	; (8002adc <TIM_Base_SetConfig+0x120>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00b      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3e      	ldr	r2, [pc, #248]	; (8002ae0 <TIM_Base_SetConfig+0x124>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3d      	ldr	r2, [pc, #244]	; (8002ae4 <TIM_Base_SetConfig+0x128>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <TIM_Base_SetConfig+0x12c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <TIM_Base_SetConfig+0x11c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01f      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d01b      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <TIM_Base_SetConfig+0x120>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d017      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2d      	ldr	r2, [pc, #180]	; (8002ae0 <TIM_Base_SetConfig+0x124>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <TIM_Base_SetConfig+0x128>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00f      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <TIM_Base_SetConfig+0x130>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <TIM_Base_SetConfig+0x134>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <TIM_Base_SetConfig+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <TIM_Base_SetConfig+0x12c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <TIM_Base_SetConfig+0x11c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <TIM_Base_SetConfig+0x100>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <TIM_Base_SetConfig+0x128>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00f      	beq.n	8002abc <TIM_Base_SetConfig+0x100>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <TIM_Base_SetConfig+0x130>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <TIM_Base_SetConfig+0x100>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <TIM_Base_SetConfig+0x134>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <TIM_Base_SetConfig+0x100>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <TIM_Base_SetConfig+0x138>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0x100>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <TIM_Base_SetConfig+0x12c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40015000 	.word	0x40015000
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e040      	b.n	8002bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd fdb4 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8c0 	bl	8002cf8 <UART_SetConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e022      	b.n	8002bc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa8a 	bl	80030a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb11 	bl	80031e8 <UART_CheckIdleState>
 8002bc6:	4603      	mov	r3, r0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	f040 8082 	bne.w	8002cee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_UART_Transmit+0x26>
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07a      	b.n	8002cf0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_UART_Transmit+0x38>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e073      	b.n	8002cf0 <HAL_UART_Transmit+0x120>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1e:	f7fd fe6f 	bl	8000900 <HAL_GetTick>
 8002c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3c:	d108      	bne.n	8002c50 <HAL_UART_Transmit+0x80>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e003      	b.n	8002c58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c60:	e02d      	b.n	8002cbe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb04 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e039      	b.n	8002cf0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3302      	adds	r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e008      	b.n	8002cac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1cb      	bne.n	8002c62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fad0 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e005      	b.n	8002cf0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4bab      	ldr	r3, [pc, #684]	; (8002fd0 <UART_SetConfig+0x2d8>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	6979      	ldr	r1, [r7, #20]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a99      	ldr	r2, [pc, #612]	; (8002fd4 <UART_SetConfig+0x2dc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d120      	bne.n	8002db6 <UART_SetConfig+0xbe>
 8002d74:	4b98      	ldr	r3, [pc, #608]	; (8002fd8 <UART_SetConfig+0x2e0>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d817      	bhi.n	8002db0 <UART_SetConfig+0xb8>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <UART_SetConfig+0x90>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da5 	.word	0x08002da5
 8002d90:	08002dab 	.word	0x08002dab
 8002d94:	08002d9f 	.word	0x08002d9f
 8002d98:	2301      	movs	r3, #1
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e0b5      	b.n	8002f0a <UART_SetConfig+0x212>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e0b2      	b.n	8002f0a <UART_SetConfig+0x212>
 8002da4:	2304      	movs	r3, #4
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e0af      	b.n	8002f0a <UART_SetConfig+0x212>
 8002daa:	2308      	movs	r3, #8
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e0ac      	b.n	8002f0a <UART_SetConfig+0x212>
 8002db0:	2310      	movs	r3, #16
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e0a9      	b.n	8002f0a <UART_SetConfig+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a88      	ldr	r2, [pc, #544]	; (8002fdc <UART_SetConfig+0x2e4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d124      	bne.n	8002e0a <UART_SetConfig+0x112>
 8002dc0:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <UART_SetConfig+0x2e0>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dcc:	d011      	beq.n	8002df2 <UART_SetConfig+0xfa>
 8002dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd2:	d817      	bhi.n	8002e04 <UART_SetConfig+0x10c>
 8002dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd8:	d011      	beq.n	8002dfe <UART_SetConfig+0x106>
 8002dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dde:	d811      	bhi.n	8002e04 <UART_SetConfig+0x10c>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <UART_SetConfig+0xf4>
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d006      	beq.n	8002df8 <UART_SetConfig+0x100>
 8002dea:	e00b      	b.n	8002e04 <UART_SetConfig+0x10c>
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e08b      	b.n	8002f0a <UART_SetConfig+0x212>
 8002df2:	2302      	movs	r3, #2
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e088      	b.n	8002f0a <UART_SetConfig+0x212>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e085      	b.n	8002f0a <UART_SetConfig+0x212>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e082      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e04:	2310      	movs	r3, #16
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e07f      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a74      	ldr	r2, [pc, #464]	; (8002fe0 <UART_SetConfig+0x2e8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d124      	bne.n	8002e5e <UART_SetConfig+0x166>
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <UART_SetConfig+0x2e0>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e20:	d011      	beq.n	8002e46 <UART_SetConfig+0x14e>
 8002e22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e26:	d817      	bhi.n	8002e58 <UART_SetConfig+0x160>
 8002e28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e2c:	d011      	beq.n	8002e52 <UART_SetConfig+0x15a>
 8002e2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e32:	d811      	bhi.n	8002e58 <UART_SetConfig+0x160>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <UART_SetConfig+0x148>
 8002e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e3c:	d006      	beq.n	8002e4c <UART_SetConfig+0x154>
 8002e3e:	e00b      	b.n	8002e58 <UART_SetConfig+0x160>
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e061      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e46:	2302      	movs	r3, #2
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e05e      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e05b      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e52:	2308      	movs	r3, #8
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e058      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e055      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <UART_SetConfig+0x2ec>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d124      	bne.n	8002eb2 <UART_SetConfig+0x1ba>
 8002e68:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <UART_SetConfig+0x2e0>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e74:	d011      	beq.n	8002e9a <UART_SetConfig+0x1a2>
 8002e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e7a:	d817      	bhi.n	8002eac <UART_SetConfig+0x1b4>
 8002e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e80:	d011      	beq.n	8002ea6 <UART_SetConfig+0x1ae>
 8002e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e86:	d811      	bhi.n	8002eac <UART_SetConfig+0x1b4>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <UART_SetConfig+0x19c>
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d006      	beq.n	8002ea0 <UART_SetConfig+0x1a8>
 8002e92:	e00b      	b.n	8002eac <UART_SetConfig+0x1b4>
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e037      	b.n	8002f0a <UART_SetConfig+0x212>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e034      	b.n	8002f0a <UART_SetConfig+0x212>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e031      	b.n	8002f0a <UART_SetConfig+0x212>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e02e      	b.n	8002f0a <UART_SetConfig+0x212>
 8002eac:	2310      	movs	r3, #16
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e02b      	b.n	8002f0a <UART_SetConfig+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4c      	ldr	r2, [pc, #304]	; (8002fe8 <UART_SetConfig+0x2f0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d124      	bne.n	8002f06 <UART_SetConfig+0x20e>
 8002ebc:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <UART_SetConfig+0x2e0>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ec4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ec8:	d011      	beq.n	8002eee <UART_SetConfig+0x1f6>
 8002eca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ece:	d817      	bhi.n	8002f00 <UART_SetConfig+0x208>
 8002ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed4:	d011      	beq.n	8002efa <UART_SetConfig+0x202>
 8002ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eda:	d811      	bhi.n	8002f00 <UART_SetConfig+0x208>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <UART_SetConfig+0x1f0>
 8002ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x1fc>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x208>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e00d      	b.n	8002f0a <UART_SetConfig+0x212>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e00a      	b.n	8002f0a <UART_SetConfig+0x212>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e007      	b.n	8002f0a <UART_SetConfig+0x212>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e004      	b.n	8002f0a <UART_SetConfig+0x212>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e001      	b.n	8002f0a <UART_SetConfig+0x212>
 8002f06:	2310      	movs	r3, #16
 8002f08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f12:	d16d      	bne.n	8002ff0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d827      	bhi.n	8002f6a <UART_SetConfig+0x272>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x228>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f5b 	.word	0x08002f5b
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff f88c 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f8aa 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8002f50:	61b8      	str	r0, [r7, #24]
        break;
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <UART_SetConfig+0x2f4>)
 8002f56:	61bb      	str	r3, [r7, #24]
        break;
 8002f58:	e00c      	b.n	8002f74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7ff f80b 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61b8      	str	r0, [r7, #24]
        break;
 8002f60:	e008      	b.n	8002f74 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e004      	b.n	8002f74 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77bb      	strb	r3, [r7, #30]
        break;
 8002f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8086 	beq.w	8003088 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	005a      	lsls	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	d916      	bls.n	8002fc8 <UART_SetConfig+0x2d0>
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d212      	bcs.n	8002fc8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	89fa      	ldrh	r2, [r7, #14]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	e05f      	b.n	8003088 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77bb      	strb	r3, [r7, #30]
 8002fcc:	e05c      	b.n	8003088 <UART_SetConfig+0x390>
 8002fce:	bf00      	nop
 8002fd0:	efff69f3 	.word	0xefff69f3
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40005000 	.word	0x40005000
 8002fec:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d827      	bhi.n	8003046 <UART_SetConfig+0x34e>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x304>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003029 	.word	0x08003029
 8003004:	08003031 	.word	0x08003031
 8003008:	08003047 	.word	0x08003047
 800300c:	08003037 	.word	0x08003037
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	0800303f 	.word	0x0800303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7ff f81e 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8003024:	61b8      	str	r0, [r7, #24]
        break;
 8003026:	e013      	b.n	8003050 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7ff f83c 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 800302c:	61b8      	str	r0, [r7, #24]
        break;
 800302e:	e00f      	b.n	8003050 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <UART_SetConfig+0x3a8>)
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003036:	f7fe ff9d 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 800303a:	61b8      	str	r0, [r7, #24]
        break;
 800303c:	e008      	b.n	8003050 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e004      	b.n	8003050 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	77bb      	strb	r3, [r7, #30]
        break;
 800304e:	bf00      	nop
    }

    if (pclk != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085a      	lsrs	r2, r3, #1
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	441a      	add	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d908      	bls.n	8003084 <UART_SetConfig+0x38c>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d204      	bcs.n	8003084 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e001      	b.n	8003088 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003094:	7fbb      	ldrb	r3, [r7, #30]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01a      	beq.n	80031ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a2:	d10a      	bne.n	80031ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031f8:	f7fd fb82 	bl	8000900 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d10e      	bne.n	800322a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f82d 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e023      	b.n	8003272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d10e      	bne.n	8003256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f817 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e00d      	b.n	8003272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	e05e      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d05a      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fd fb34 	bl	8000900 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11b      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e043      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02c      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fe:	d124      	bne.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003318:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	429a      	cmp	r2, r3
 8003366:	d091      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003384:	2b84      	cmp	r3, #132	; 0x84
 8003386:	d005      	beq.n	8003394 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003388:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	3303      	adds	r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a8:	f3ef 8305 	mrs	r3, IPSR
 80033ac:	607b      	str	r3, [r7, #4]
  return(result);
 80033ae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033ca:	f001 f907 	bl	80045dc <vTaskStartScheduler>
  
  return osOK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af04      	add	r7, sp, #16
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d020      	beq.n	8003428 <osThreadCreate+0x54>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01c      	beq.n	8003428 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685c      	ldr	r4, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681d      	ldr	r5, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691e      	ldr	r6, [r3, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffb6 	bl	8003372 <makeFreeRtosPriority>
 8003406:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003410:	9202      	str	r2, [sp, #8]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	9100      	str	r1, [sp, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4632      	mov	r2, r6
 800341a:	4629      	mov	r1, r5
 800341c:	4620      	mov	r0, r4
 800341e:	f000 ff1f 	bl	8004260 <xTaskCreateStatic>
 8003422:	4603      	mov	r3, r0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e01c      	b.n	8003462 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685c      	ldr	r4, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003434:	b29e      	uxth	r6, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff98 	bl	8003372 <makeFreeRtosPriority>
 8003442:	4602      	mov	r2, r0
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	9200      	str	r2, [sp, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4632      	mov	r2, r6
 8003450:	4629      	mov	r1, r5
 8003452:	4620      	mov	r0, r4
 8003454:	f000 ff60 	bl	8004318 <xTaskCreate>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800346c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <osDelay+0x16>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	e000      	b.n	8003484 <osDelay+0x18>
 8003482:	2301      	movs	r3, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f875 	bl	8004574 <vTaskDelay>
  
  return osOK;
 800348a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00f      	beq.n	80034c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10a      	bne.n	80034c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2203      	movs	r2, #3
 80034b2:	9200      	str	r2, [sp, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2001      	movs	r0, #1
 80034ba:	f000 f9bd 	bl	8003838 <xQueueGenericCreateStatic>
 80034be:	4603      	mov	r3, r0
 80034c0:	e016      	b.n	80034f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e014      	b.n	80034f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d110      	bne.n	80034ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80034cc:	2203      	movs	r2, #3
 80034ce:	2100      	movs	r1, #0
 80034d0:	2001      	movs	r0, #1
 80034d2:	f000 fa28 	bl	8003926 <xQueueGenericCreate>
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <osSemaphoreCreate+0x56>
 80034de:	2300      	movs	r3, #0
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fa7b 	bl	80039e0 <xQueueGenericSend>
      return sema;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	e000      	b.n	80034f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80034ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	e03a      	b.n	8003586 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d103      	bne.n	8003524 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e009      	b.n	8003538 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <osSemaphoreWait+0x40>
      ticks = 1;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003538:	f7ff ff33 	bl	80033a2 <inHandlerMode>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	461a      	mov	r2, r3
 8003548:	2100      	movs	r1, #0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fce0 	bl	8003f10 <xQueueReceiveFromISR>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003556:	23ff      	movs	r3, #255	; 0xff
 8003558:	e015      	b.n	8003586 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d011      	beq.n	8003584 <osSemaphoreWait+0x8c>
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <osSemaphoreWait+0x98>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	e008      	b.n	8003584 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fbbf 	bl	8003cf8 <xQueueSemaphoreTake>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003580:	23ff      	movs	r3, #255	; 0xff
 8003582:	e000      	b.n	8003586 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80035a4:	f7ff fefd 	bl	80033a2 <inHandlerMode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb11 	bl	8003bdc <xQueueGiveFromISR>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80035c0:	23ff      	movs	r3, #255	; 0xff
 80035c2:	e017      	b.n	80035f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d013      	beq.n	80035f2 <osSemaphoreRelease+0x5e>
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <osSemaphoreRelease+0x68>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	e00a      	b.n	80035f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80035dc:	2300      	movs	r3, #0
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9fc 	bl	80039e0 <xQueueGenericSend>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80035ee:	23ff      	movs	r3, #255	; 0xff
 80035f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0208 	add.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 0208 	add.w	r2, r3, #8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d103      	bne.n	80036c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e00c      	b.n	80036dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3308      	adds	r3, #8
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e002      	b.n	80036d0 <vListInsert+0x2e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d2f6      	bcs.n	80036ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6852      	ldr	r2, [r2, #4]
 8003734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d103      	bne.n	8003748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003792:	f001 fe9f 	bl	80054d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	3b01      	subs	r3, #1
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	441a      	add	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3310      	adds	r3, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f939 	bl	8004a6c <xTaskRemoveFromEventList>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <xQueueGenericReset+0xcc>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	e009      	b.n	8003826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fef2 	bl	8003600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff feed 	bl	8003600 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003826:	f001 fe85 	bl	8005534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <xQueueGenericCreateStatic+0x52>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <xQueueGenericCreateStatic+0x56>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <xQueueGenericCreateStatic+0x58>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <xQueueGenericCreateStatic+0x7e>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <xQueueGenericCreateStatic+0x82>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <xQueueGenericCreateStatic+0x84>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	61fb      	str	r3, [r7, #28]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038d6:	2348      	movs	r3, #72	; 0x48
 80038d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b48      	cmp	r3, #72	; 0x48
 80038de:	d00a      	beq.n	80038f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	61bb      	str	r3, [r7, #24]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003908:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f843 	bl	80039a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800391e:	4618      	mov	r0, r3
 8003920:	3730      	adds	r7, #48	; 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08a      	sub	sp, #40	; 0x28
 800392a:	af02      	add	r7, sp, #8
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueGenericCreate+0x2a>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	613b      	str	r3, [r7, #16]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e004      	b.n	8003966 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3348      	adds	r3, #72	; 0x48
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fed4 	bl	8005718 <pvPortMalloc>
 8003970:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00f      	beq.n	8003998 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3348      	adds	r3, #72	; 0x48
 800397c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f805 	bl	80039a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003998:	69bb      	ldr	r3, [r7, #24]
	}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e002      	b.n	80039c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039d0:	2101      	movs	r1, #1
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f7ff fec8 	bl	8003768 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ee:	2300      	movs	r3, #0
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericSend+0x32>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <xQueueGenericSend+0x40>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <xQueueGenericSend+0x44>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <xQueueGenericSend+0x46>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xQueueGenericSend+0x60>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d103      	bne.n	8003a4e <xQueueGenericSend+0x6e>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSend+0x72>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSend+0x74>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueGenericSend+0x8e>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	623b      	str	r3, [r7, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6e:	f001 f9bf 	bl	8004df0 <xTaskGetSchedulerState>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <xQueueGenericSend+0x9e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <xQueueGenericSend+0xa2>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <xQueueGenericSend+0xa4>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueGenericSend+0xbe>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61fb      	str	r3, [r7, #28]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9e:	f001 fd19 	bl	80054d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <xQueueGenericSend+0xd4>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d129      	bne.n	8003b08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fac1 	bl	8004040 <prvCopyDataToQueue>
 8003abe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	3324      	adds	r3, #36	; 0x24
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ffcd 	bl	8004a6c <xTaskRemoveFromEventList>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <xQueueGenericSend+0x1f8>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	e00a      	b.n	8003b00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <xQueueGenericSend+0x1f8>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b00:	f001 fd18 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e063      	b.n	8003bd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0e:	f001 fd11 	bl	8005534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e05c      	b.n	8003bd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f805 	bl	8004b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b2a:	f001 fd03 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2e:	f000 fdb5 	bl	800469c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b32:	f001 fccf 	bl	80054d4 <vPortEnterCritical>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d103      	bne.n	8003b4c <xQueueGenericSend+0x16c>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d103      	bne.n	8003b62 <xQueueGenericSend+0x182>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b62:	f001 fce7 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b66:	1d3a      	adds	r2, r7, #4
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fff4 	bl	8004b5c <xTaskCheckForTimeOut>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d124      	bne.n	8003bc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7c:	f000 fb58 	bl	8004230 <prvIsQueueFull>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	3310      	adds	r3, #16
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 ff48 	bl	8004a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b96:	f000 fae3 	bl	8004160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b9a:	f000 fd8d 	bl	80046b8 <xTaskResumeAll>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f af7c 	bne.w	8003a9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <xQueueGenericSend+0x1f8>)
 8003ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	e772      	b.n	8003a9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 fad1 	bl	8004160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bbe:	f000 fd7b 	bl	80046b8 <xTaskResumeAll>
 8003bc2:	e76c      	b.n	8003a9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc6:	f000 facb 	bl	8004160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bca:	f000 fd75 	bl	80046b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bce:	2300      	movs	r3, #0
		}
	}
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3738      	adds	r7, #56	; 0x38
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08e      	sub	sp, #56	; 0x38
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	61fb      	str	r3, [r7, #28]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <xQueueGiveFromISR+0x58>
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueGiveFromISR+0x5c>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <xQueueGiveFromISR+0x5e>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61bb      	str	r3, [r7, #24]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c54:	f001 fd20 	bl	8005698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c58:	f3ef 8211 	mrs	r2, BASEPRI
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	617a      	str	r2, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d22b      	bcs.n	8003cdc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d112      	bne.n	8003cc6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d016      	beq.n	8003cd6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	3324      	adds	r3, #36	; 0x24
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fedd 	bl	8004a6c <xTaskRemoveFromEventList>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e007      	b.n	8003cd6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	b25a      	sxtb	r2, r3
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cda:	e001      	b.n	8003ce0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3738      	adds	r7, #56	; 0x38
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08e      	sub	sp, #56	; 0x38
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	623b      	str	r3, [r7, #32]
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	61fb      	str	r3, [r7, #28]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d48:	f001 f852 	bl	8004df0 <xTaskGetSchedulerState>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <xQueueSemaphoreTake+0x60>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <xQueueSemaphoreTake+0x64>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueSemaphoreTake+0x66>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	61bb      	str	r3, [r7, #24]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d78:	f001 fbac 	bl	80054d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d024      	beq.n	8003dd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d98:	f001 f9f4 	bl	8005184 <pvTaskIncrementMutexHeldCount>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00f      	beq.n	8003dca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	3310      	adds	r3, #16
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fe5c 	bl	8004a6c <xTaskRemoveFromEventList>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dba:	4b54      	ldr	r3, [pc, #336]	; (8003f0c <xQueueSemaphoreTake+0x214>)
 8003dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dca:	f001 fbb3 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e097      	b.n	8003f02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d111      	bne.n	8003dfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	617b      	str	r3, [r7, #20]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003df4:	f001 fb9e 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e082      	b.n	8003f02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fe92 	bl	8004b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e10:	f001 fb90 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e14:	f000 fc42 	bl	800469c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e18:	f001 fb5c 	bl	80054d4 <vPortEnterCritical>
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d103      	bne.n	8003e32 <xQueueSemaphoreTake+0x13a>
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <xQueueSemaphoreTake+0x150>
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e48:	f001 fb74 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e4c:	463a      	mov	r2, r7
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fe81 	bl	8004b5c <xTaskCheckForTimeOut>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d132      	bne.n	8003ec6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e62:	f000 f9cf 	bl	8004204 <prvIsQueueEmpty>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d026      	beq.n	8003eba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e74:	f001 fb2e 	bl	80054d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 ffd5 	bl	8004e2c <xTaskPriorityInherit>
 8003e82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e84:	f001 fb56 	bl	8005534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	3324      	adds	r3, #36	; 0x24
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fdc7 	bl	8004a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e98:	f000 f962 	bl	8004160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e9c:	f000 fc0c 	bl	80046b8 <xTaskResumeAll>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af68 	bne.w	8003d78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <xQueueSemaphoreTake+0x214>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	e75e      	b.n	8003d78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ebc:	f000 f950 	bl	8004160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ec0:	f000 fbfa 	bl	80046b8 <xTaskResumeAll>
 8003ec4:	e758      	b.n	8003d78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ec8:	f000 f94a 	bl	8004160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ecc:	f000 fbf4 	bl	80046b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed2:	f000 f997 	bl	8004204 <prvIsQueueEmpty>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f43f af4d 	beq.w	8003d78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ee4:	f001 faf6 	bl	80054d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eea:	f000 f891 	bl	8004010 <prvGetDisinheritPriorityAfterTimeout>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f8a4 	bl	8005044 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003efc:	f001 fb1a 	bl	8005534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3738      	adds	r7, #56	; 0x38
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	623b      	str	r3, [r7, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <xQueueReceiveFromISR+0x3a>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <xQueueReceiveFromISR+0x3e>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <xQueueReceiveFromISR+0x40>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	61fb      	str	r3, [r7, #28]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f6a:	f001 fb95 	bl	8005698 <vPortValidateInterruptPriority>
	__asm volatile
 8003f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	61ba      	str	r2, [r7, #24]
 8003f84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02f      	beq.n	8003ff6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa4:	f000 f8b6 	bl	8004114 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d112      	bne.n	8003fe0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	3310      	adds	r3, #16
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd50 	bl	8004a6c <xTaskRemoveFromEventList>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	b25a      	sxtb	r2, r3
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff4:	e001      	b.n	8003ffa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f383 8811 	msr	BASEPRI, r3
}
 8004004:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004008:	4618      	mov	r0, r3
 800400a:	3738      	adds	r7, #56	; 0x38
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1c3 0307 	rsb	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e001      	b.n	8004032 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004032:	68fb      	ldr	r3, [r7, #12]
	}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d14d      	bne.n	8004102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 ff64 	bl	8004f38 <xTaskPriorityDisinherit>
 8004070:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	e043      	b.n	8004102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d119      	bne.n	80040b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6898      	ldr	r0, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	461a      	mov	r2, r3
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	f001 fd42 	bl	8005b14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d32b      	bcc.n	8004102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	e026      	b.n	8004102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68d8      	ldr	r0, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	461a      	mov	r2, r3
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	f001 fd28 	bl	8005b14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	425b      	negs	r3, r3
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d207      	bcs.n	80040f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	425b      	negs	r3, r3
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d105      	bne.n	8004102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3b01      	subs	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800410a:	697b      	ldr	r3, [r7, #20]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	441a      	add	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d303      	bcc.n	8004148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68d9      	ldr	r1, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	461a      	mov	r2, r3
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f001 fcde 	bl	8005b14 <memcpy>
	}
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004168:	f001 f9b4 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004174:	e011      	b.n	800419a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	; 0x24
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc72 	bl	8004a6c <xTaskRemoveFromEventList>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800418e:	f000 fd47 	bl	8004c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	3b01      	subs	r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800419a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	dce9      	bgt.n	8004176 <prvUnlockQueue+0x16>
 80041a2:	e000      	b.n	80041a6 <prvUnlockQueue+0x46>
					break;
 80041a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ae:	f001 f9c1 	bl	8005534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041b2:	f001 f98f 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041be:	e011      	b.n	80041e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d012      	beq.n	80041ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3310      	adds	r3, #16
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc4d 	bl	8004a6c <xTaskRemoveFromEventList>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041d8:	f000 fd22 	bl	8004c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041dc:	7bbb      	ldrb	r3, [r7, #14]
 80041de:	3b01      	subs	r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dce9      	bgt.n	80041c0 <prvUnlockQueue+0x60>
 80041ec:	e000      	b.n	80041f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041f8:	f001 f99c 	bl	8005534 <vPortExitCritical>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800420c:	f001 f962 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e001      	b.n	8004222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004222:	f001 f987 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004238:	f001 f94c 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	429a      	cmp	r2, r3
 8004246:	d102      	bne.n	800424e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004252:	f001 f96f 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af04      	add	r7, sp, #16
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	623b      	str	r3, [r7, #32]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61fb      	str	r3, [r7, #28]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042a6:	2354      	movs	r3, #84	; 0x54
 80042a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b54      	cmp	r3, #84	; 0x54
 80042ae:	d00a      	beq.n	80042c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61bb      	str	r3, [r7, #24]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01e      	beq.n	800430a <xTaskCreateStatic+0xaa>
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01b      	beq.n	800430a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042e4:	2300      	movs	r3, #0
 80042e6:	9303      	str	r3, [sp, #12]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	9302      	str	r3, [sp, #8]
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f850 	bl	80043a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004304:	f000 f8cc 	bl	80044a0 <prvAddNewTaskToReadyList>
 8004308:	e001      	b.n	800430e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800430e:	697b      	ldr	r3, [r7, #20]
	}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	; 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af04      	add	r7, sp, #16
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f9f3 	bl	8005718 <pvPortMalloc>
 8004332:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800433a:	2054      	movs	r0, #84	; 0x54
 800433c:	f001 f9ec 	bl	8005718 <pvPortMalloc>
 8004340:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
 800434e:	e005      	b.n	800435c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004350:	6978      	ldr	r0, [r7, #20]
 8004352:	f001 faa5 	bl	80058a0 <vPortFree>
 8004356:	e001      	b.n	800435c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d017      	beq.n	8004392 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	2300      	movs	r3, #0
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f80e 	bl	80043a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004386:	69f8      	ldr	r0, [r7, #28]
 8004388:	f000 f88a 	bl	80044a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800438c:	2301      	movs	r3, #1
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e002      	b.n	8004398 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004398:	69bb      	ldr	r3, [r7, #24]
	}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b088      	sub	sp, #32
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043ba:	3b01      	subs	r3, #1
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f023 0307 	bic.w	r3, r3, #7
 80043c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <prvInitialiseNewTask+0x48>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	617b      	str	r3, [r7, #20]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e012      	b.n	8004416 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	7819      	ldrb	r1, [r3, #0]
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	3334      	adds	r3, #52	; 0x34
 8004400:	460a      	mov	r2, r1
 8004402:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d006      	beq.n	800441e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b0f      	cmp	r3, #15
 800441a:	d9e9      	bls.n	80043f0 <prvInitialiseNewTask+0x4e>
 800441c:	e000      	b.n	8004420 <prvInitialiseNewTask+0x7e>
		{
			break;
 800441e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	2b06      	cmp	r3, #6
 800442c:	d901      	bls.n	8004432 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800442e:	2306      	movs	r3, #6
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff f8f9 	bl	8003640 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	3318      	adds	r3, #24
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff f8f4 	bl	8003640 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	f1c3 0207 	rsb	r2, r3, #7
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	69b8      	ldr	r0, [r7, #24]
 8004482:	f000 fef9 	bl	8005278 <pxPortInitialiseStack>
 8004486:	4602      	mov	r2, r0
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004498:	bf00      	nop
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044a8:	f001 f814 	bl	80054d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	4a29      	ldr	r2, [pc, #164]	; (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <prvAddNewTaskToReadyList+0xb8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d110      	bne.n	80044ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044cc:	f000 fbcc 	bl	8004c68 <prvInitialiseTaskLists>
 80044d0:	e00d      	b.n	80044ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <prvAddNewTaskToReadyList+0xc0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d802      	bhi.n	80044ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044e8:	4a1c      	ldr	r2, [pc, #112]	; (800455c <prvAddNewTaskToReadyList+0xbc>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <prvAddNewTaskToReadyList+0xc4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <prvAddNewTaskToReadyList+0xc4>)
 80044f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <prvAddNewTaskToReadyList+0xc8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <prvAddNewTaskToReadyList+0xc8>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <prvAddNewTaskToReadyList+0xcc>)
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7ff f89a 	bl	800365a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004526:	f001 f805 	bl	8005534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <prvAddNewTaskToReadyList+0xc0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvAddNewTaskToReadyList+0xbc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	429a      	cmp	r2, r3
 800453e:	d207      	bcs.n	8004550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <prvAddNewTaskToReadyList+0xd0>)
 8004542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000380 	.word	0x20000380
 800455c:	20000280 	.word	0x20000280
 8004560:	2000038c 	.word	0x2000038c
 8004564:	2000039c 	.word	0x2000039c
 8004568:	20000388 	.word	0x20000388
 800456c:	20000284 	.word	0x20000284
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <vTaskDelay+0x60>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <vTaskDelay+0x30>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60bb      	str	r3, [r7, #8]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045a4:	f000 f87a 	bl	800469c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045a8:	2100      	movs	r1, #0
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fdfe 	bl	80051ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b0:	f000 f882 	bl	80046b8 <xTaskResumeAll>
 80045b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <vTaskDelay+0x64>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200003a8 	.word	0x200003a8
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ea:	463a      	mov	r2, r7
 80045ec:	1d39      	adds	r1, r7, #4
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fb fdfc 	bl	80001f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	9202      	str	r2, [sp, #8]
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	460a      	mov	r2, r1
 800460a:	491e      	ldr	r1, [pc, #120]	; (8004684 <vTaskStartScheduler+0xa8>)
 800460c:	481e      	ldr	r0, [pc, #120]	; (8004688 <vTaskStartScheduler+0xac>)
 800460e:	f7ff fe27 	bl	8004260 <xTaskCreateStatic>
 8004612:	4603      	mov	r3, r0
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <vTaskStartScheduler+0xb0>)
 8004616:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <vTaskStartScheduler+0xb0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e001      	b.n	800462a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d116      	bne.n	800465e <vTaskStartScheduler+0x82>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	613b      	str	r3, [r7, #16]
}
 8004642:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <vTaskStartScheduler+0xb4>)
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <vTaskStartScheduler+0xb8>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vTaskStartScheduler+0xbc>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004658:	f000 fe9a 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800465c:	e00e      	b.n	800467c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d10a      	bne.n	800467c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60fb      	str	r3, [r7, #12]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskStartScheduler+0x9e>
}
 800467c:	bf00      	nop
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	08005ce0 	.word	0x08005ce0
 8004688:	08004c39 	.word	0x08004c39
 800468c:	200003a4 	.word	0x200003a4
 8004690:	200003a0 	.word	0x200003a0
 8004694:	2000038c 	.word	0x2000038c
 8004698:	20000384 	.word	0x20000384

0800469c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <vTaskSuspendAll+0x18>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <vTaskSuspendAll+0x18>)
 80046a8:	6013      	str	r3, [r2, #0]
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	200003a8 	.word	0x200003a8

080046b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <xTaskResumeAll+0x114>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	603b      	str	r3, [r7, #0]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046e4:	f000 fef6 	bl	80054d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <xTaskResumeAll+0x114>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	4a37      	ldr	r2, [pc, #220]	; (80047cc <xTaskResumeAll+0x114>)
 80046f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <xTaskResumeAll+0x114>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d161      	bne.n	80047be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046fa:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <xTaskResumeAll+0x118>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d05d      	beq.n	80047be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004702:	e02e      	b.n	8004762 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004704:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <xTaskResumeAll+0x11c>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3318      	adds	r3, #24
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe ffff 	bl	8003714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fffa 	bl	8003714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <xTaskResumeAll+0x120>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <xTaskResumeAll+0x120>)
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4a27      	ldr	r2, [pc, #156]	; (80047dc <xTaskResumeAll+0x124>)
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7fe ff86 	bl	800365a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <xTaskResumeAll+0x128>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800475c:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <xTaskResumeAll+0x12c>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <xTaskResumeAll+0x11c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1cc      	bne.n	8004704 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004770:	f000 fb18 	bl	8004da4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <xTaskResumeAll+0x130>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004780:	f000 f836 	bl	80047f0 <xTaskIncrementTick>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <xTaskResumeAll+0x12c>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f1      	bne.n	8004780 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <xTaskResumeAll+0x130>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <xTaskResumeAll+0x12c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <xTaskResumeAll+0x134>)
 80047b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047be:	f000 feb9 	bl	8005534 <vPortExitCritical>

	return xAlreadyYielded;
 80047c2:	68bb      	ldr	r3, [r7, #8]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200003a8 	.word	0x200003a8
 80047d0:	20000380 	.word	0x20000380
 80047d4:	20000340 	.word	0x20000340
 80047d8:	20000388 	.word	0x20000388
 80047dc:	20000284 	.word	0x20000284
 80047e0:	20000280 	.word	0x20000280
 80047e4:	20000394 	.word	0x20000394
 80047e8:	20000390 	.word	0x20000390
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fa:	4b51      	ldr	r3, [pc, #324]	; (8004940 <xTaskIncrementTick+0x150>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 808d 	bne.w	800491e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004804:	4b4f      	ldr	r3, [pc, #316]	; (8004944 <xTaskIncrementTick+0x154>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800480c:	4a4d      	ldr	r2, [pc, #308]	; (8004944 <xTaskIncrementTick+0x154>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d120      	bne.n	800485a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <xTaskIncrementTick+0x158>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <xTaskIncrementTick+0x48>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	603b      	str	r3, [r7, #0]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xTaskIncrementTick+0x46>
 8004838:	4b43      	ldr	r3, [pc, #268]	; (8004948 <xTaskIncrementTick+0x158>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4b43      	ldr	r3, [pc, #268]	; (800494c <xTaskIncrementTick+0x15c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a41      	ldr	r2, [pc, #260]	; (8004948 <xTaskIncrementTick+0x158>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4a41      	ldr	r2, [pc, #260]	; (800494c <xTaskIncrementTick+0x15c>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <xTaskIncrementTick+0x160>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <xTaskIncrementTick+0x160>)
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	f000 faa5 	bl	8004da4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <xTaskIncrementTick+0x164>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d34d      	bcc.n	8004900 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004864:	4b38      	ldr	r3, [pc, #224]	; (8004948 <xTaskIncrementTick+0x158>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <xTaskIncrementTick+0x82>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xTaskIncrementTick+0x84>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004878:	4b36      	ldr	r3, [pc, #216]	; (8004954 <xTaskIncrementTick+0x164>)
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	601a      	str	r2, [r3, #0]
					break;
 8004880:	e03e      	b.n	8004900 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004882:	4b31      	ldr	r3, [pc, #196]	; (8004948 <xTaskIncrementTick+0x158>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d203      	bcs.n	80048a2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <xTaskIncrementTick+0x164>)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6013      	str	r3, [r2, #0]
						break;
 80048a0:	e02e      	b.n	8004900 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe ff34 	bl	8003714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3318      	adds	r3, #24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe ff2b 	bl	8003714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	2201      	movs	r2, #1
 80048c4:	409a      	lsls	r2, r3
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <xTaskIncrementTick+0x168>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <xTaskIncrementTick+0x168>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <xTaskIncrementTick+0x16c>)
 80048de:	441a      	add	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe feb7 	bl	800365a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <xTaskIncrementTick+0x170>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3b4      	bcc.n	8004864 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fe:	e7b1      	b.n	8004864 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <xTaskIncrementTick+0x170>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4915      	ldr	r1, [pc, #84]	; (800495c <xTaskIncrementTick+0x16c>)
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e004      	b.n	8004928 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <xTaskIncrementTick+0x174>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <xTaskIncrementTick+0x174>)
 8004926:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <xTaskIncrementTick+0x178>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004934:	697b      	ldr	r3, [r7, #20]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	200003a8 	.word	0x200003a8
 8004944:	20000384 	.word	0x20000384
 8004948:	20000338 	.word	0x20000338
 800494c:	2000033c 	.word	0x2000033c
 8004950:	20000398 	.word	0x20000398
 8004954:	200003a0 	.word	0x200003a0
 8004958:	20000388 	.word	0x20000388
 800495c:	20000284 	.word	0x20000284
 8004960:	20000280 	.word	0x20000280
 8004964:	20000390 	.word	0x20000390
 8004968:	20000394 	.word	0x20000394

0800496c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <vTaskSwitchContext+0xa4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <vTaskSwitchContext+0xa8>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004980:	e03f      	b.n	8004a02 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <vTaskSwitchContext+0xa8>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <vTaskSwitchContext+0xac>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	fab3 f383 	clz	r3, r3
 8004994:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	f1c3 031f 	rsb	r3, r3, #31
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	491f      	ldr	r1, [pc, #124]	; (8004a1c <vTaskSwitchContext+0xb0>)
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	607b      	str	r3, [r7, #4]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <vTaskSwitchContext+0x5a>
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <vTaskSwitchContext+0xb0>)
 80049d4:	4413      	add	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3308      	adds	r3, #8
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d104      	bne.n	80049f8 <vTaskSwitchContext+0x8c>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <vTaskSwitchContext+0xb4>)
 8004a00:	6013      	str	r3, [r2, #0]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	200003a8 	.word	0x200003a8
 8004a14:	20000394 	.word	0x20000394
 8004a18:	20000388 	.word	0x20000388
 8004a1c:	20000284 	.word	0x20000284
 8004a20:	20000280 	.word	0x20000280

08004a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a4a:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <vTaskPlaceOnEventList+0x44>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fe fe25 	bl	80036a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a58:	2101      	movs	r1, #1
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	f000 fba6 	bl	80051ac <prvAddCurrentTaskToDelayedList>
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000280 	.word	0x20000280

08004a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fe39 	bl	8003714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <xTaskRemoveFromEventList+0xac>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11c      	bne.n	8004ae4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fe30 	bl	8003714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <xTaskRemoveFromEventList+0xb0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <xTaskRemoveFromEventList+0xb0>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <xTaskRemoveFromEventList+0xb4>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe fdbc 	bl	800365a <vListInsertEnd>
 8004ae2:	e005      	b.n	8004af0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	480e      	ldr	r0, [pc, #56]	; (8004b24 <xTaskRemoveFromEventList+0xb8>)
 8004aec:	f7fe fdb5 	bl	800365a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xTaskRemoveFromEventList+0xbc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d905      	bls.n	8004b0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <xTaskRemoveFromEventList+0xc0>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e001      	b.n	8004b0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200003a8 	.word	0x200003a8
 8004b1c:	20000388 	.word	0x20000388
 8004b20:	20000284 	.word	0x20000284
 8004b24:	20000340 	.word	0x20000340
 8004b28:	20000280 	.word	0x20000280
 8004b2c:	20000394 	.word	0x20000394

08004b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <vTaskInternalSetTimeOutState+0x24>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <vTaskInternalSetTimeOutState+0x28>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	20000398 	.word	0x20000398
 8004b58:	20000384 	.word	0x20000384

08004b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	613b      	str	r3, [r7, #16]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b9e:	f000 fc99 	bl	80054d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <xTaskCheckForTimeOut+0xbc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d102      	bne.n	8004bc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e023      	b.n	8004c0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <xTaskCheckForTimeOut+0xc0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d007      	beq.n	8004bde <xTaskCheckForTimeOut+0x82>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	e015      	b.n	8004c0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d20b      	bcs.n	8004c00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff9b 	bl	8004b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	e004      	b.n	8004c0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c0a:	f000 fc93 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000384 	.word	0x20000384
 8004c1c:	20000398 	.word	0x20000398

08004c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <vTaskMissedYield+0x14>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	20000394 	.word	0x20000394

08004c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c40:	f000 f852 	bl	8004ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <prvIdleTask+0x28>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d9f9      	bls.n	8004c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <prvIdleTask+0x2c>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c5c:	e7f0      	b.n	8004c40 <prvIdleTask+0x8>
 8004c5e:	bf00      	nop
 8004c60:	20000284 	.word	0x20000284
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	e00c      	b.n	8004c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <prvInitialiseTaskLists+0x60>)
 8004c80:	4413      	add	r3, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fcbc 	bl	8003600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d9ef      	bls.n	8004c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c94:	480d      	ldr	r0, [pc, #52]	; (8004ccc <prvInitialiseTaskLists+0x64>)
 8004c96:	f7fe fcb3 	bl	8003600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c9a:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <prvInitialiseTaskLists+0x68>)
 8004c9c:	f7fe fcb0 	bl	8003600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca0:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <prvInitialiseTaskLists+0x6c>)
 8004ca2:	f7fe fcad 	bl	8003600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ca6:	480c      	ldr	r0, [pc, #48]	; (8004cd8 <prvInitialiseTaskLists+0x70>)
 8004ca8:	f7fe fcaa 	bl	8003600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cac:	480b      	ldr	r0, [pc, #44]	; (8004cdc <prvInitialiseTaskLists+0x74>)
 8004cae:	f7fe fca7 	bl	8003600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <prvInitialiseTaskLists+0x78>)
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <prvInitialiseTaskLists+0x64>)
 8004cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <prvInitialiseTaskLists+0x7c>)
 8004cba:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <prvInitialiseTaskLists+0x68>)
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000284 	.word	0x20000284
 8004ccc:	20000310 	.word	0x20000310
 8004cd0:	20000324 	.word	0x20000324
 8004cd4:	20000340 	.word	0x20000340
 8004cd8:	20000354 	.word	0x20000354
 8004cdc:	2000036c 	.word	0x2000036c
 8004ce0:	20000338 	.word	0x20000338
 8004ce4:	2000033c 	.word	0x2000033c

08004ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cee:	e019      	b.n	8004d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf0:	f000 fbf0 	bl	80054d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004cf4:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <prvCheckTasksWaitingTermination+0x50>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fd07 	bl	8003714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <prvCheckTasksWaitingTermination+0x54>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <prvCheckTasksWaitingTermination+0x54>)
 8004d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d1a:	f000 fc0b 	bl	8005534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f810 	bl	8004d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e1      	bne.n	8004cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000354 	.word	0x20000354
 8004d3c:	20000380 	.word	0x20000380
 8004d40:	20000368 	.word	0x20000368

08004d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fda0 	bl	80058a0 <vPortFree>
				vPortFree( pxTCB );
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fd9d 	bl	80058a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d66:	e018      	b.n	8004d9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d103      	bne.n	8004d7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fd94 	bl	80058a0 <vPortFree>
	}
 8004d78:	e00f      	b.n	8004d9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d00a      	beq.n	8004d9a <prvDeleteTCB+0x56>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <prvDeleteTCB+0x54>
	}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <prvResetNextTaskUnblockTime+0x44>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <prvResetNextTaskUnblockTime+0x14>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <prvResetNextTaskUnblockTime+0x16>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <prvResetNextTaskUnblockTime+0x48>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dc6:	e008      	b.n	8004dda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <prvResetNextTaskUnblockTime+0x44>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <prvResetNextTaskUnblockTime+0x48>)
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000338 	.word	0x20000338
 8004dec:	200003a0 	.word	0x200003a0

08004df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <xTaskGetSchedulerState+0x34>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	e008      	b.n	8004e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <xTaskGetSchedulerState+0x38>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e001      	b.n	8004e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e16:	687b      	ldr	r3, [r7, #4]
	}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	2000038c 	.word	0x2000038c
 8004e28:	200003a8 	.word	0x200003a8

08004e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d06e      	beq.n	8004f20 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xTaskPriorityInherit+0x100>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d25e      	bcs.n	8004f0e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db06      	blt.n	8004e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e58:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <xTaskPriorityInherit+0x100>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	f1c3 0207 	rsb	r2, r3, #7
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6959      	ldr	r1, [r3, #20]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a2e      	ldr	r2, [pc, #184]	; (8004f30 <xTaskPriorityInherit+0x104>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	d101      	bne.n	8004e82 <xTaskPriorityInherit+0x56>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xTaskPriorityInherit+0x58>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d03a      	beq.n	8004efe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fc41 	bl	8003714 <uxListRemove>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4924      	ldr	r1, [pc, #144]	; (8004f30 <xTaskPriorityInherit+0x104>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <xTaskPriorityInherit+0x98>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xTaskPriorityInherit+0x108>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <xTaskPriorityInherit+0x108>)
 8004ec2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <xTaskPriorityInherit+0x100>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <xTaskPriorityInherit+0x108>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <xTaskPriorityInherit+0x108>)
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <xTaskPriorityInherit+0x104>)
 8004eee:	441a      	add	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f7fe fbaf 	bl	800365a <vListInsertEnd>
 8004efc:	e004      	b.n	8004f08 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <xTaskPriorityInherit+0x100>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e008      	b.n	8004f20 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <xTaskPriorityInherit+0x100>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d201      	bcs.n	8004f20 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f20:	68fb      	ldr	r3, [r7, #12]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000280 	.word	0x20000280
 8004f30:	20000284 	.word	0x20000284
 8004f34:	20000388 	.word	0x20000388

08004f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d06e      	beq.n	800502c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <xTaskPriorityDisinherit+0x100>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d00a      	beq.n	8004f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	1e5a      	subs	r2, r3, #1
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d044      	beq.n	800502c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d140      	bne.n	800502c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fbb0 	bl	8003714 <uxListRemove>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d115      	bne.n	8004fe6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	491f      	ldr	r1, [pc, #124]	; (800503c <xTaskPriorityDisinherit+0x104>)
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <xTaskPriorityDisinherit+0xae>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <xTaskPriorityDisinherit+0x108>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	4a17      	ldr	r2, [pc, #92]	; (8005040 <xTaskPriorityDisinherit+0x108>)
 8004fe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f1c3 0207 	rsb	r2, r3, #7
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	2201      	movs	r2, #1
 8005000:	409a      	lsls	r2, r3
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <xTaskPriorityDisinherit+0x108>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <xTaskPriorityDisinherit+0x108>)
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a08      	ldr	r2, [pc, #32]	; (800503c <xTaskPriorityDisinherit+0x104>)
 800501a:	441a      	add	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7fe fb19 	bl	800365a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005028:	2301      	movs	r3, #1
 800502a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800502c:	697b      	ldr	r3, [r7, #20]
	}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000280 	.word	0x20000280
 800503c:	20000284 	.word	0x20000284
 8005040:	20000388 	.word	0x20000388

08005044 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005052:	2301      	movs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8088 	beq.w	800516e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d902      	bls.n	800508c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e002      	b.n	8005092 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d068      	beq.n	800516e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d163      	bne.n	800516e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d10a      	bne.n	80050c6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db04      	blt.n	80050e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f1c3 0207 	rsb	r2, r3, #7
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	6959      	ldr	r1, [r3, #20]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050f4:	4413      	add	r3, r2
 80050f6:	4299      	cmp	r1, r3
 80050f8:	d101      	bne.n	80050fe <vTaskPriorityDisinheritAfterTimeout+0xba>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d034      	beq.n	800516e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fb03 	bl	8003714 <uxListRemove>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d115      	bne.n	8005140 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4918      	ldr	r1, [pc, #96]	; (800517c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43da      	mvns	r2, r3
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4013      	ands	r3, r2
 800513c:	4a10      	ldr	r2, [pc, #64]	; (8005180 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800513e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005160:	441a      	add	r2, r3
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7fe fa76 	bl	800365a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800516e:	bf00      	nop
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000280 	.word	0x20000280
 800517c:	20000284 	.word	0x20000284
 8005180:	20000388 	.word	0x20000388

08005184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005196:	3201      	adds	r2, #1
 8005198:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800519a:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800519c:	681b      	ldr	r3, [r3, #0]
	}
 800519e:	4618      	mov	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	20000280 	.word	0x20000280

080051ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051b6:	4b29      	ldr	r3, [pc, #164]	; (800525c <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051bc:	4b28      	ldr	r3, [pc, #160]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe faa6 	bl	8003714 <uxListRemove>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	2201      	movs	r2, #1
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43da      	mvns	r2, r3
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4013      	ands	r3, r2
 80051e2:	4a20      	ldr	r2, [pc, #128]	; (8005264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d10a      	bne.n	8005204 <prvAddCurrentTaskToDelayedList+0x58>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f4:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	481a      	ldr	r0, [pc, #104]	; (8005268 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051fe:	f7fe fa2c 	bl	800365a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005202:	e026      	b.n	8005252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800520c:	4b14      	ldr	r3, [pc, #80]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	429a      	cmp	r2, r3
 800521a:	d209      	bcs.n	8005230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <prvAddCurrentTaskToDelayedList+0xc0>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3304      	adds	r3, #4
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7fe fa3a 	bl	80036a2 <vListInsert>
}
 800522e:	e010      	b.n	8005252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fe fa30 	bl	80036a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d202      	bcs.n	8005252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6013      	str	r3, [r2, #0]
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000384 	.word	0x20000384
 8005260:	20000280 	.word	0x20000280
 8005264:	20000388 	.word	0x20000388
 8005268:	2000036c 	.word	0x2000036c
 800526c:	2000033c 	.word	0x2000033c
 8005270:	20000338 	.word	0x20000338
 8005274:	200003a0 	.word	0x200003a0

08005278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b04      	subs	r3, #4
 8005288:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b04      	subs	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0201 	bic.w	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3b04      	subs	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <pxPortInitialiseStack+0x64>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3b14      	subs	r3, #20
 80052b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b04      	subs	r3, #4
 80052be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f06f 0202 	mvn.w	r2, #2
 80052c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b20      	subs	r3, #32
 80052cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	080052e1 	.word	0x080052e1

080052e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <prvTaskExitError+0x54>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d00a      	beq.n	800530a <prvTaskExitError+0x2a>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <prvTaskExitError+0x28>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60bb      	str	r3, [r7, #8]
}
 800531c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800531e:	bf00      	nop
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0fc      	beq.n	8005320 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	2000000c 	.word	0x2000000c
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <xPortStartScheduler+0x120>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <xPortStartScheduler+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <xPortStartScheduler+0x26>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <xPortStartScheduler+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xPortStartScheduler+0x128>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10a      	bne.n	80053d6 <xPortStartScheduler+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <xPortStartScheduler+0x12c>)
 80053d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xPortStartScheduler+0x130>)
 80053fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <xPortStartScheduler+0x134>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005404:	e009      	b.n	800541a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005406:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <xPortStartScheduler+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <xPortStartScheduler+0x134>)
 800540e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d0ef      	beq.n	8005406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <xPortStartScheduler+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00a      	beq.n	8005448 <xPortStartScheduler+0xb8>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <xPortStartScheduler+0x134>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <xPortStartScheduler+0x134>)
 8005450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xPortStartScheduler+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <xPortStartScheduler+0x134>)
 800545c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <xPortStartScheduler+0x138>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <xPortStartScheduler+0x138>)
 800546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <xPortStartScheduler+0x138>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <xPortStartScheduler+0x138>)
 8005478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800547c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800547e:	f000 f8dd 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <xPortStartScheduler+0x13c>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005488:	f000 f8fc 	bl	8005684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xPortStartScheduler+0x140>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xPortStartScheduler+0x140>)
 8005492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005498:	f7ff ff66 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800549c:	f7ff fa66 	bl	800496c <vTaskSwitchContext>
	prvTaskExitError();
 80054a0:	f7ff ff1e 	bl	80052e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed00 	.word	0xe000ed00
 80054b4:	410fc271 	.word	0x410fc271
 80054b8:	410fc270 	.word	0x410fc270
 80054bc:	e000e400 	.word	0xe000e400
 80054c0:	200003ac 	.word	0x200003ac
 80054c4:	200003b0 	.word	0x200003b0
 80054c8:	e000ed20 	.word	0xe000ed20
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	e000ef34 	.word	0xe000ef34

080054d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <vPortEnterCritical+0x58>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <vPortEnterCritical+0x58>)
 80054f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <vPortEnterCritical+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10f      	bne.n	8005520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortEnterCritical+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <vPortEnterCritical+0x4c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vPortEnterCritical+0x4a>
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <vPortExitCritical+0x50>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <vPortExitCritical+0x24>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vPortExitCritical+0x50>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <vPortExitCritical+0x50>)
 8005560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <vPortExitCritical+0x42>
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
	...

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7ff f9d4 	bl	800496c <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7ff f8ed 	bl	80047f0 <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <SysTick_Handler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <vPortSetupTimerInterrupt+0x38>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <vPortSetupTimerInterrupt+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <vPortSetupTimerInterrupt+0x40>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <vPortSetupTimerInterrupt+0x44>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e010 	.word	0xe000e010
 8005674:	e000e018 	.word	0xe000e018
 8005678:	20000000 	.word	0x20000000
 800567c:	10624dd3 	.word	0x10624dd3
 8005680:	e000e014 	.word	0xe000e014

08005684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005694 <vPortEnableVFP+0x10>
 8005688:	6801      	ldr	r1, [r0, #0]
 800568a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800568e:	6001      	str	r1, [r0, #0]
 8005690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005692:	bf00      	nop
 8005694:	e000ed88 	.word	0xe000ed88

08005698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800569e:	f3ef 8305 	mrs	r3, IPSR
 80056a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d914      	bls.n	80056d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <vPortValidateInterruptPriority+0x70>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <vPortValidateInterruptPriority+0x74>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	7afa      	ldrb	r2, [r7, #11]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d20a      	bcs.n	80056d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <vPortValidateInterruptPriority+0x78>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <vPortValidateInterruptPriority+0x7c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d90a      	bls.n	80056fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	603b      	str	r3, [r7, #0]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <vPortValidateInterruptPriority+0x60>
	}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000e3f0 	.word	0xe000e3f0
 800570c:	200003ac 	.word	0x200003ac
 8005710:	e000ed0c 	.word	0xe000ed0c
 8005714:	200003b0 	.word	0x200003b0

08005718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005724:	f7fe ffba 	bl	800469c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005728:	4b58      	ldr	r3, [pc, #352]	; (800588c <pvPortMalloc+0x174>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005730:	f000 f910 	bl	8005954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005734:	4b56      	ldr	r3, [pc, #344]	; (8005890 <pvPortMalloc+0x178>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 808e 	bne.w	800585e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005748:	2208      	movs	r2, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <pvPortMalloc+0x6c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d069      	beq.n	800585e <pvPortMalloc+0x146>
 800578a:	4b42      	ldr	r3, [pc, #264]	; (8005894 <pvPortMalloc+0x17c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d864      	bhi.n	800585e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <pvPortMalloc+0x180>)
 8005796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005798:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <pvPortMalloc+0x180>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579e:	e004      	b.n	80057aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d903      	bls.n	80057bc <pvPortMalloc+0xa4>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f1      	bne.n	80057a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <pvPortMalloc+0x174>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d04b      	beq.n	800585e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d91f      	bls.n	8005828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <pvPortMalloc+0xf8>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	613b      	str	r3, [r7, #16]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f000 f8f8 	bl	8005a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005828:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <pvPortMalloc+0x17c>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <pvPortMalloc+0x17c>)
 8005834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <pvPortMalloc+0x17c>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b18      	ldr	r3, [pc, #96]	; (800589c <pvPortMalloc+0x184>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d203      	bcs.n	800584a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <pvPortMalloc+0x17c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <pvPortMalloc+0x184>)
 8005848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <pvPortMalloc+0x178>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	431a      	orrs	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800585e:	f7fe ff2b 	bl	80046b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <pvPortMalloc+0x16a>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <pvPortMalloc+0x168>
	return pvReturn;
 8005882:	69fb      	ldr	r3, [r7, #28]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	; 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000fbc 	.word	0x20000fbc
 8005890:	20000fc8 	.word	0x20000fc8
 8005894:	20000fc0 	.word	0x20000fc0
 8005898:	20000fb4 	.word	0x20000fb4
 800589c:	20000fc4 	.word	0x20000fc4

080058a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d048      	beq.n	8005944 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058b2:	2308      	movs	r3, #8
 80058b4:	425b      	negs	r3, r3
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4413      	add	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <vPortFree+0xac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <vPortFree+0x44>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <vPortFree+0x62>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60bb      	str	r3, [r7, #8]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <vPortFree+0xac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d019      	beq.n	8005944 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d115      	bne.n	8005944 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <vPortFree+0xac>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005928:	f7fe feb8 	bl	800469c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <vPortFree+0xb0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4413      	add	r3, r2
 8005936:	4a06      	ldr	r2, [pc, #24]	; (8005950 <vPortFree+0xb0>)
 8005938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800593a:	6938      	ldr	r0, [r7, #16]
 800593c:	f000 f86c 	bl	8005a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005940:	f7fe feba 	bl	80046b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000fc8 	.word	0x20000fc8
 8005950:	20000fc0 	.word	0x20000fc0

08005954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800595a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800595e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <prvHeapInit+0xac>)
 8005962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3307      	adds	r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <prvHeapInit+0xac>)
 8005984:	4413      	add	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <prvHeapInit+0xb0>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <prvHeapInit+0xb0>)
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059a0:	2208      	movs	r2, #8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <prvHeapInit+0xb4>)
 80059b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <prvHeapInit+0xb4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <prvHeapInit+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvHeapInit+0xb4>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <prvHeapInit+0xb8>)
 80059e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <prvHeapInit+0xbc>)
 80059ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <prvHeapInit+0xc0>)
 80059ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	200003b4 	.word	0x200003b4
 8005a04:	20000fb4 	.word	0x20000fb4
 8005a08:	20000fbc 	.word	0x20000fbc
 8005a0c:	20000fc4 	.word	0x20000fc4
 8005a10:	20000fc0 	.word	0x20000fc0
 8005a14:	20000fc8 	.word	0x20000fc8

08005a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a20:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <prvInsertBlockIntoFreeList+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <prvInsertBlockIntoFreeList+0x14>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d8f7      	bhi.n	8005a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d108      	bne.n	8005a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d118      	bne.n	8005aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00d      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e003      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d002      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000fb4 	.word	0x20000fb4
 8005ac8:	20000fbc 	.word	0x20000fbc

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4d0d      	ldr	r5, [pc, #52]	; (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4d0b      	ldr	r5, [pc, #44]	; (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	; (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f82e 	bl	8005b40 <_init>
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08005d20 	.word	0x08005d20
 8005b08:	08005d20 	.word	0x08005d20
 8005b0c:	08005d20 	.word	0x08005d20
 8005b10:	08005d24 	.word	0x08005d24

08005b14 <memcpy>:
 8005b14:	440a      	add	r2, r1
 8005b16:	4291      	cmp	r1, r2
 8005b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b1c:	d100      	bne.n	8005b20 <memcpy+0xc>
 8005b1e:	4770      	bx	lr
 8005b20:	b510      	push	{r4, lr}
 8005b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	d1f9      	bne.n	8005b22 <memcpy+0xe>
 8005b2e:	bd10      	pop	{r4, pc}

08005b30 <memset>:
 8005b30:	4402      	add	r2, r0
 8005b32:	4603      	mov	r3, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
